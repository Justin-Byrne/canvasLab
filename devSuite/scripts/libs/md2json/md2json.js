let md2json =
{
    "Texts": "## Classes\n\n<dl>\n<dt><a href=\"#Texts\">Texts</a></dt>\n<dd><p>{Array} Texts                               Collection of Text objects</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#point\">point(point)</a></dt>\n<dd><p>Set point</p>\n</dd>\n<dt><a href=\"#point\">point()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get point</p>\n</dd>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set y-axis value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas(value)</a></dt>\n<dd><p>Set canvas value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get canvas value</p>\n</dd>\n<dt><a href=\"#pushPop\">pushPop(object)</a></dt>\n<dd><p>Push or pops the passed object</p>\n</dd>\n<dt><a href=\"#draw\">draw(canvas)</a></dt>\n<dd><p>Typical draw function for collections; Circles, Texts</p>\n</dd>\n</dl>\n\n<a name=\"Texts\"></a>\n\n## Texts\n{Array} Texts                               Collection of Text objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n<a name=\"point\"></a>\n\n## point(point)\nSet point\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n\n<a name=\"point\"></a>\n\n## point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - X & Y axis coordinates  \n**Access**: public  \n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"y\"></a>\n\n## y(value)\nSet y-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n<a name=\"canvas\"></a>\n\n## canvas(value)\nSet canvas value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [combined.canvas](combined.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"canvas\"></a>\n\n## canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [combined.canvas](combined.canvas)  \n<a name=\"pushPop\"></a>\n\n## pushPop(object)\nPush or pops the passed object\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.misc.pushPop](Utilities.misc.pushPop)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| object | <code>Object</code> | Object; Circle, Rectangle, Text |\n\n<a name=\"draw\"></a>\n\n## draw(canvas)\nTypical draw function for collections; Circles, Texts\n\n**Kind**: global function  \n**Access**: public  \n**See**: [UTILITIES.draw.collection.typical](UTILITIES.draw.collection.typical)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Text": "## Classes\n\n<dl>\n<dt><a href=\"#Text\">Text</a></dt>\n<dd><p>{Object} Text                               Text element to render within a canvas element</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#point\">point(value)</a></dt>\n<dd><p>Set point</p>\n</dd>\n<dt><a href=\"#point\">point()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get point</p>\n</dd>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set the y-axis value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis value</p>\n</dd>\n<dt><a href=\"#text\">text(value)</a></dt>\n<dd><p>Set text</p>\n</dd>\n<dt><a href=\"#text\">text()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get text</p>\n</dd>\n<dt><a href=\"#stroke\">stroke()</a> \u21d2 <code>Stroke</code></dt>\n<dd><p>Get stroke properties</p>\n</dd>\n<dt><a href=\"#fill\">fill()</a> \u21d2 <code>Fill</code></dt>\n<dd><p>Get fill properties</p>\n</dd>\n<dt><a href=\"#shadow\">shadow()</a> \u21d2 <code>Shadow</code></dt>\n<dd><p>Get shadow properties</p>\n</dd>\n<dt><a href=\"#canvas\">canvas(value)</a></dt>\n<dd><p>Set canvas value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get canvas value</p>\n</dd>\n<dt><a href=\"#options\">options()</a> \u21d2 <code>Options</code></dt>\n<dd><p>Get options properties</p>\n</dd>\n<dt><a href=\"#+_drawOptions\">#_drawOptions()</a></dt>\n<dd><p>Draws associated options</p>\n</dd>\n<dt><a href=\"#type\">type(value)</a></dt>\n<dd><p>Set font&#39;s type</p>\n</dd>\n<dt><a href=\"#type\">type()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get font&#39;s type</p>\n</dd>\n<dt><a href=\"#size\">size(value)</a></dt>\n<dd><p>Set font&#39;s size</p>\n</dd>\n<dt><a href=\"#size\">size()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get font&#39;s size</p>\n</dd>\n<dt><a href=\"#weight\">weight(value)</a></dt>\n<dd><p>Set font&#39;s weight</p>\n</dd>\n<dt><a href=\"#weight\">weight()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get font&#39;s weight</p>\n</dd>\n<dt><a href=\"#maxWidth\">maxWidth(value)</a></dt>\n<dd><p>Set font&#39;s max width</p>\n</dd>\n<dt><a href=\"#maxWidth\">maxWidth()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get font&#39;s max width</p>\n</dd>\n<dt><a href=\"#offset\">offset(value)</a></dt>\n<dd><p>Set offset</p>\n</dd>\n<dt><a href=\"#offset\">offset()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get offset</p>\n</dd>\n<dt><a href=\"#font\">font()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get font</p>\n</dd>\n<dt><a href=\"#drawBorder\">drawBorder([offset])</a></dt>\n<dd><p>Draws border around this object</p>\n</dd>\n<dt><a href=\"#drawAxis\">drawAxis([offset])</a></dt>\n<dd><p>Draws axis through center of this object</p>\n</dd>\n<dt><a href=\"#fillColorCycle\">fillColorCycle(progress, start, end, [max])</a></dt>\n<dd><p>Cycle colors for fill</p>\n</dd>\n<dt><a href=\"#move\">move(degree, distance, [clear])</a></dt>\n<dd><p>Move this object</p>\n</dd>\n<dt><a href=\"#rotate\">rotate(degree, [anchor], [clear])</a></dt>\n<dd><p>Rotate this object</p>\n</dd>\n<dt><a href=\"#strokeColorCycle\">strokeColorCycle(start, end, progress, [max])</a></dt>\n<dd><p>Cycle colors for stroke</p>\n</dd>\n<dt><a href=\"#draw\">draw(canvas)</a></dt>\n<dd><p>Draw this object</p>\n</dd>\n</dl>\n\n<a name=\"Text\"></a>\n\n## Text\n{Object} Text                               Text element to render within a canvas element\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| text | <code>string</code> | Text to display |\n| stroke | <code>Stroke</code> | Stroke properties |\n| fill | <code>Fill</code> | Fill properties |\n| shadow | <code>Shadow</code> | Shadow properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n<a name=\"new_Text_new\"></a>\n\n### new Text(point, text, type, size, weight, maxWidth, offset, stroke, fill, shadow, canvas)\nCreate a Text object\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| text | <code>string</code> | Text of text object |\n| type | <code>string</code> | Font type |\n| size | <code>number</code> | Font size |\n| weight | <code>string</code> | Font weight |\n| maxWidth | <code>number</code> | Font max width |\n| offset | <code>Point</code> | Text offset |\n| stroke | <code>Stroke</code> | Stroke properties |\n| fill | <code>Fill</code> | Fill Properties |\n| shadow | <code>Shadow</code> | Shadow properties |\n| canvas | <code>string</code> | Canvas Id |\n\n<a name=\"point\"></a>\n\n## point(value)\nSet point\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.point](discrete.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"point\"></a>\n\n## point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [discrete.point](discrete.point)  \n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.pointX](discrete.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [discrete.pointX](discrete.pointX)  \n<a name=\"y\"></a>\n\n## y(value)\nSet the y-axis value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.pointY](discrete.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [discrete.pointY](discrete.pointY)  \n<a name=\"text\"></a>\n\n## text(value)\nSet text\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Text of object |\n\n<a name=\"text\"></a>\n\n## text() \u21d2 <code>string</code>\nGet text\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Text of object  \n**Read only**: true  \n<a name=\"stroke\"></a>\n\n## stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: global function  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"fill\"></a>\n\n## fill() \u21d2 <code>Fill</code>\nGet fill properties\n\n**Kind**: global function  \n**Returns**: <code>Fill</code> - Fill properties  \n**Access**: public  \n<a name=\"shadow\"></a>\n\n## shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: global function  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"canvas\"></a>\n\n## canvas(value)\nSet canvas value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.canvas](discrete.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"canvas\"></a>\n\n## canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [discrete.canvas](discrete.canvas)  \n<a name=\"options\"></a>\n\n## options() \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: global function  \n**Returns**: <code>Options</code> - Options properties  \n**Access**: public  \n<a name=\"+_drawOptions\"></a>\n\n## #\\_drawOptions()\nDraws associated options\n\n**Kind**: global function  \n**Access**: protected  \n<a name=\"type\"></a>\n\n## type(value)\nSet font's type\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Font's type |\n\n<a name=\"type\"></a>\n\n## type() \u21d2 <code>string</code>\nGet font's type\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Font's type  \n**Read only**: true  \n<a name=\"size\"></a>\n\n## size(value)\nSet font's size\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font's size |\n\n<a name=\"size\"></a>\n\n## size() \u21d2 <code>number</code>\nGet font's size\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Font's size  \n**Read only**: true  \n<a name=\"weight\"></a>\n\n## weight(value)\nSet font's weight\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Font's weight |\n\n<a name=\"weight\"></a>\n\n## weight() \u21d2 <code>string</code>\nGet font's weight\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Font's weight  \n**Read only**: true  \n<a name=\"maxWidth\"></a>\n\n## maxWidth(value)\nSet font's max width\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font's max width |\n\n<a name=\"maxWidth\"></a>\n\n## maxWidth() \u21d2 <code>number</code>\nGet font's max width\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Font's max width  \n**Read only**: true  \n<a name=\"offset\"></a>\n\n## offset(value)\nSet offset\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.offset](discrete.offset)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Shadow offset |\n\n<a name=\"offset\"></a>\n\n## offset() \u21d2 <code>Point</code>\nGet offset\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Shadow offset  \n**Read only**: true  \n**See**: [discrete.offset](discrete.offset)  \n<a name=\"font\"></a>\n\n## font() \u21d2 <code>string</code>\nGet font\n\n**Kind**: global function  \n**Returns**: <code>string</code> - CSS style font property syntax  \n**Access**: public  \n<a name=\"drawBorder\"></a>\n\n## drawBorder([offset])\nDraws border around this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of border's perimeter |\n\n<a name=\"drawAxis\"></a>\n\n## drawAxis([offset])\nDraws axis through center of this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of axis's edges |\n\n<a name=\"fillColorCycle\"></a>\n\n## fillColorCycle(progress, start, end, [max])\nCycle colors for fill\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.color.cycle.fill](Utilities.color.cycle.fill)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| progress | <code>number</code> |  | Progress time unit between; 0.00 - 1.00 |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"move\"></a>\n\n## move(degree, distance, [clear])\nMove this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Direction to move; in degrees |\n| distance | <code>number</code> |  | Distance to move |\n| [clear] | <code>boolean</code> | <code>true</code> | Clear canvas during each movement |\n\n<a name=\"rotate\"></a>\n\n## rotate(degree, [anchor], [clear])\nRotate this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [anchor] | <code>string</code> | <code>&quot;&#x27;center&#x27;&quot;</code> | Anchoring point during rotation |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"strokeColorCycle\"></a>\n\n## strokeColorCycle(start, end, progress, [max])\nCycle colors for stroke\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.color.cycle.stroke](Utilities.color.cycle.stroke)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| progress | <code>number</code> |  | Progress time unit; 0.00 - 1.00 |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"draw\"></a>\n\n## draw(canvas)\nDraw this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Rgb": "## Classes\n\n<dl>\n<dt><a href=\"#Rgb\">Rgb</a></dt>\n<dd><p>{Object} Rgb \t\t\t\t\t\t\t\tRGB color model</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#red\">red(red)</a></dt>\n<dd><p>Sets the red value</p>\n</dd>\n<dt><a href=\"#red\">red()</a> \u21d2 <code>number</code></dt>\n<dd><p>Gets the red value</p>\n</dd>\n<dt><a href=\"#green\">green(green)</a></dt>\n<dd><p>Sets the green value</p>\n</dd>\n<dt><a href=\"#green\">green()</a> \u21d2 <code>number</code></dt>\n<dd><p>Gets the green value</p>\n</dd>\n<dt><a href=\"#blue\">blue(blue)</a></dt>\n<dd><p>Sets the blue value</p>\n</dd>\n<dt><a href=\"#blue\">blue()</a> \u21d2 <code>number</code></dt>\n<dd><p>Gets the blue value</p>\n</dd>\n<dt><a href=\"#toCss\">toCss()</a> \u21d2 <code>string</code></dt>\n<dd><p>Returns a CSS compatible <color> string value</p>\n</dd>\n</dl>\n\n<a name=\"Rgb\"></a>\n\n## Rgb\n{Object} Rgb \t\t\t\t\t\t\t\tRGB color model\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [red] | <code>number</code> | <code>0</code> | Red value; 0 - 255 |\n| [green] | <code>number</code> | <code>0</code> | Green value; 0 - 255 |\n| [blue] | <code>number</code> | <code>0</code> | Blue value; 0 - 255 |\n| [alpha] | <code>number</code> | <code>1</code> | Alpha value; 0 - 1 (decimal) |\n\n<a name=\"new_Rgb_new\"></a>\n\n### new Rgb(red, green, blue, alpha)\nCreate an RGB color model\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| red | <code>number</code> | Red value |\n| green | <code>number</code> | Green value |\n| blue | <code>number</code> | Blue value |\n| alpha | <code>number</code> | Alpha value |\n\n<a name=\"red\"></a>\n\n## red(red)\nSets the red value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| red | <code>number</code> | Red value; 0 - 255 |\n\n<a name=\"red\"></a>\n\n## red() \u21d2 <code>number</code>\nGets the red value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Red value; 0 - 255  \n**Read only**: true  \n<a name=\"green\"></a>\n\n## green(green)\nSets the green value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| green | <code>number</code> | Green value; 0 - 255 |\n\n<a name=\"green\"></a>\n\n## green() \u21d2 <code>number</code>\nGets the green value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Green value; 0 - 255  \n**Read only**: true  \n<a name=\"blue\"></a>\n\n## blue(blue)\nSets the blue value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| blue | <code>number</code> | Blue value; 0 - 255 |\n\n<a name=\"blue\"></a>\n\n## blue() \u21d2 <code>number</code>\nGets the blue value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Blue value; 0 - 255  \n**Read only**: true  \n<a name=\"toCss\"></a>\n\n## toCss() \u21d2 <code>string</code>\nReturns a CSS compatible <color> string value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - CSS <color> string  \n**Access**: public  \n",
    "Group": "## Classes\n\n<dl>\n<dt><a href=\"#Group\">Group</a></dt>\n<dd><p>{Array} Group                               Collection of Line, Circle, Rectangle &amp; Text objects</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#point\">point(value)</a></dt>\n<dd><p>Set point</p>\n</dd>\n<dt><a href=\"#point\">point()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get point</p>\n</dd>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set the y-axis value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas(value)</a></dt>\n<dd><p>Set canvas value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get canvas value</p>\n</dd>\n<dt><a href=\"#push\">push(object)</a></dt>\n<dd><p>Pushes an object into this group</p>\n</dd>\n<dt><a href=\"#pop\">pop(object)</a></dt>\n<dd><p>Pops an object out of this group</p>\n</dd>\n<dt><a href=\"#aTypical\">aTypical(canvas)</a></dt>\n<dd><p>A-typical draw function for collections; Lines</p>\n</dd>\n<dt><a href=\"#typical\">typical(canvas)</a></dt>\n<dd><p>Typical draw function for collections; Circles, Rectangles, Texts</p>\n</dd>\n<dt><a href=\"#draw\">draw(canvas)</a></dt>\n<dd><p>Draw this group</p>\n</dd>\n</dl>\n\n<a name=\"Group\"></a>\n\n## Group\n{Array} Group                               Collection of Line, Circle, Rectangle & Text objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| lines | <code>Array</code> | Collection of Line objects |\n| circles | <code>Array</code> | Collection of Circle objects |\n| rectangles | <code>Array</code> | Collection of Rectangle objects |\n| text | <code>Array</code> | Collection of Text objects |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n<a name=\"new_Group_new\"></a>\n\n### new Group()\nCreate Group object\n\n<a name=\"point\"></a>\n\n## point(value)\nSet point\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"point\"></a>\n\n## point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"y\"></a>\n\n## y(value)\nSet the y-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n<a name=\"canvas\"></a>\n\n## canvas(value)\nSet canvas value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [combined.canvas](combined.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"canvas\"></a>\n\n## canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [combined.canvas](combined.canvas)  \n<a name=\"push\"></a>\n\n## push(object)\nPushes an object into this group\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| object | <code>Object</code> | Object; Line(s), Circle(s), Rectangle(S) |\n\n<a name=\"pop\"></a>\n\n## pop(object)\nPops an object out of this group\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| object | <code>Object</code> | Object; Line(s), Circle(s), Rectangle(S) |\n\n<a name=\"aTypical\"></a>\n\n## aTypical(canvas)\nA-typical draw function for collections; Lines\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.draw.aTypical](Utilities.draw.aTypical)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n<a name=\"typical\"></a>\n\n## typical(canvas)\nTypical draw function for collections; Circles, Rectangles, Texts\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.draw.typical](Utilities.draw.typical)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n<a name=\"draw\"></a>\n\n## draw(canvas)\nDraw this group\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Rectangle": "## Classes\n\n<dl>\n<dt><a href=\"#Rectangle\">Rectangle</a></dt>\n<dd><p>{Object} Rectangle                          Rectangle object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#point\">point(value)</a></dt>\n<dd><p>Set point</p>\n</dd>\n<dt><a href=\"#point\">point()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get point</p>\n</dd>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set the y-axis value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis value</p>\n</dd>\n<dt><a href=\"#aspect\">aspect(value)</a></dt>\n<dd><p>Set aspect properties</p>\n</dd>\n<dt><a href=\"#aspect\">aspect()</a> \u21d2 <code>Aspect</code></dt>\n<dd><p>Get aspect properties</p>\n</dd>\n<dt><a href=\"#width\">width(value)</a></dt>\n<dd><p>Set aspect width</p>\n</dd>\n<dt><a href=\"#width\">width()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get aspect with</p>\n</dd>\n<dt><a href=\"#height\">height(value)</a></dt>\n<dd><p>Set aspect height</p>\n</dd>\n<dt><a href=\"#height\">height()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get aspect height</p>\n</dd>\n<dt><a href=\"#stroke\">stroke()</a> \u21d2 <code>Stroke</code></dt>\n<dd><p>Get stroke properties</p>\n</dd>\n<dt><a href=\"#fill\">fill()</a> \u21d2 <code>Fill</code></dt>\n<dd><p>Get fill properties</p>\n</dd>\n<dt><a href=\"#shadow\">shadow()</a> \u21d2 <code>Shadow</code></dt>\n<dd><p>Get shadow properties</p>\n</dd>\n<dt><a href=\"#canvas\">canvas(value)</a></dt>\n<dd><p>Set canvas value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get canvas value</p>\n</dd>\n<dt><a href=\"#anchor\">anchor()</a> \u21d2 <code>Anchor</code></dt>\n<dd><p>Get anchor</p>\n</dd>\n<dt><a href=\"#options\">options()</a> \u21d2 <code>Options</code></dt>\n<dd><p>Get options properties</p>\n</dd>\n<dt><a href=\"#isThere\">isThere(rectangle)</a></dt>\n<dd><p>Check whether the passed object is already present</p>\n</dd>\n<dt><a href=\"#fillColorCycle\">fillColorCycle(progress, start, end, [max])</a></dt>\n<dd><p>Cycle colors for fill</p>\n</dd>\n<dt><a href=\"#gradientColorCycle\">gradientColorCycle(progress, start, end, stop, [max])</a></dt>\n<dd><p>Cycle colors for gradient</p>\n</dd>\n<dt><a href=\"#move\">move(degree, distance, [clear])</a></dt>\n<dd><p>Move this object</p>\n</dd>\n<dt><a href=\"#rotate\">rotate(degree, [clear])</a></dt>\n<dd><p>Rotate this object</p>\n</dd>\n<dt><a href=\"#strokeColorCycle\">strokeColorCycle(start, end, progress, [max])</a></dt>\n<dd><p>Cycle colors for stroke</p>\n</dd>\n<dt><a href=\"#area\">area()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get area of this object</p>\n</dd>\n<dt><a href=\"#center\">center()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get center of this object</p>\n</dd>\n<dt><a href=\"#perimeter\">perimeter()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get perimeter of this object</p>\n</dd>\n<dt><a href=\"#draw\">draw(canvas)</a></dt>\n<dd><p>Draw this object</p>\n</dd>\n</dl>\n\n<a name=\"Rectangle\"></a>\n\n## Rectangle\n{Object} Rectangle                          Rectangle object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| aspect | <code>Aspect</code> | Aspect properties |\n| stroke | <code>Stroke</code> | Stroke properties |\n| fill | <code>Fill</code> | Fill properties |\n| shadow | <code>Shadow</code> | Shadow properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n<a name=\"new_Rectangle_new\"></a>\n\n### new Rectangle()\nCreate a Rectangle object\n\n<a name=\"point\"></a>\n\n## point(value)\nSet point\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.point](discrete.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"point\"></a>\n\n## point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [discrete.point](discrete.point)  \n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.pointX](discrete.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [discrete.pointX](discrete.pointX)  \n<a name=\"y\"></a>\n\n## y(value)\nSet the y-axis value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.pointY](discrete.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [discrete.pointY](discrete.pointY)  \n<a name=\"aspect\"></a>\n\n## aspect(value)\nSet aspect properties\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Aspect</code> | Aspect properties |\n\n<a name=\"aspect\"></a>\n\n## aspect() \u21d2 <code>Aspect</code>\nGet aspect properties\n\n**Kind**: global function  \n**Returns**: <code>Aspect</code> - Aspect properties  \n**Read only**: true  \n<a name=\"width\"></a>\n\n## width(value)\nSet aspect width\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Width value |\n\n<a name=\"width\"></a>\n\n## width() \u21d2 <code>number</code>\nGet aspect with\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Width value  \n**Read only**: true  \n<a name=\"height\"></a>\n\n## height(value)\nSet aspect height\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Height value |\n\n<a name=\"height\"></a>\n\n## height() \u21d2 <code>number</code>\nGet aspect height\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Height value  \n**Read only**: true  \n<a name=\"stroke\"></a>\n\n## stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: global function  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"fill\"></a>\n\n## fill() \u21d2 <code>Fill</code>\nGet fill properties\n\n**Kind**: global function  \n**Returns**: <code>Fill</code> - Fill properties  \n**Access**: public  \n<a name=\"shadow\"></a>\n\n## shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: global function  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"canvas\"></a>\n\n## canvas(value)\nSet canvas value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.canvas](discrete.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"canvas\"></a>\n\n## canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [discrete.canvas](discrete.canvas)  \n<a name=\"anchor\"></a>\n\n## anchor() \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: global function  \n**Returns**: <code>Anchor</code> - Anchor properties  \n**Access**: public  \n<a name=\"options\"></a>\n\n## options() \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: global function  \n**Returns**: <code>Options</code> - Options properties  \n**Access**: public  \n<a name=\"isThere\"></a>\n\n## isThere(rectangle)\nCheck whether the passed object is already present\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| rectangle | [<code>Rectangle</code>](#Rectangle) | Object to validate |\n\n<a name=\"fillColorCycle\"></a>\n\n## fillColorCycle(progress, start, end, [max])\nCycle colors for fill\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.color.cycle.fill](Utilities.color.cycle.fill)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| progress | <code>number</code> |  | Progress time unit between; 0.00 - 1.00 |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"gradientColorCycle\"></a>\n\n## gradientColorCycle(progress, start, end, stop, [max])\nCycle colors for gradient\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.color.cycle.gradient](Utilities.color.cycle.gradient)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| progress | <code>number</code> |  | Progress time unit between; 0.00 - 1.00 |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| stop | <code>number</code> |  | Gradient color stop |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"move\"></a>\n\n## move(degree, distance, [clear])\nMove this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Direction to move; in degrees |\n| distance | <code>number</code> |  | Distance to move |\n| [clear] | <code>boolean</code> | <code>true</code> | Clear canvas during each movement |\n\n<a name=\"rotate\"></a>\n\n## rotate(degree, [clear])\nRotate this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"strokeColorCycle\"></a>\n\n## strokeColorCycle(start, end, progress, [max])\nCycle colors for stroke\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.color.cycle.stroke](Utilities.color.cycle.stroke)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| progress | <code>number</code> |  | Progress time unit; 0.00 - 1.00 |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"area\"></a>\n\n## area() \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Area of rectangle  \n**Read only**: true  \n<a name=\"center\"></a>\n\n## center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Center point coordinates  \n**Read only**: true  \n<a name=\"perimeter\"></a>\n\n## perimeter() \u21d2 <code>number</code>\nGet perimeter of this object\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Perimeter of rectangle  \n**Read only**: true  \n<a name=\"draw\"></a>\n\n## draw(canvas)\nDraw this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Application": "## Classes\n\n<dl>\n<dt><a href=\"#Application\">Application</a></dt>\n<dd><p>{Object}   Application                      Application handler</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#canvas\">canvas(value)</a></dt>\n<dd><p>Set canvas element</p>\n</dd>\n<dt><a href=\"#canvas\">canvas()</a> \u21d2 <code>HTMLCanvasElement</code></dt>\n<dd><p>Get canvas element</p>\n</dd>\n<dt><a href=\"#about\">about()</a> \u21d2 <code>Object</code></dt>\n<dd><p>Get application details</p>\n</dd>\n<dt><a href=\"#initCanvasLab\">initCanvasLab([canvas])</a></dt>\n<dd><p>Initiates canvasLab</p>\n</dd>\n</dl>\n\n<a name=\"Application\"></a>\n\n## Application\n{Object}   Application                      Application handler\n\n**Kind**: global class  \n\n* [Application](#Application)\n    * [new Application()](#new_Application_new)\n    * [.animation](#Application+animation)\n\n<a name=\"new_Application_new\"></a>\n\n### new Application()\nCreates an application handler\n\n<a name=\"Application+animation\"></a>\n\n### application.animation\nCreates a new animation instance\n\n**Kind**: instance property of [<code>Application</code>](#Application)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| flow | <code>Object</code> | Contains timing, draw, & duration values & functions |\n| flow.duration | <code>number</code> | Duration of animation |\n| flow.timing | <code>function</code> | Timing function |\n| flow.draw | <code>function</code> | Draw function |\n\n<a name=\"canvas\"></a>\n\n## canvas(value)\nSet canvas element\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Element Id |\n\n<a name=\"canvas\"></a>\n\n## canvas() \u21d2 <code>HTMLCanvasElement</code>\nGet canvas element\n\n**Kind**: global function  \n**Returns**: <code>HTMLCanvasElement</code> - Canvas context  \n**Access**: public  \n<a name=\"about\"></a>\n\n## about() \u21d2 <code>Object</code>\nGet application details\n\n**Kind**: global function  \n**Returns**: <code>Object</code> - Application details  \n**Read only**: true  \n<a name=\"initCanvasLab\"></a>\n\n## initCanvasLab([canvas])\nInitiates canvasLab\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [canvas] | <code>string</code> | Canvas identifier |\n\n",
    "Point": "## Classes\n\n<dl>\n<dt><a href=\"#Point\">Point</a></dt>\n<dd><p>{Object}  Point                             X &amp; Y coordinates for an object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set the y-axis value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas(value)</a></dt>\n<dd><p>Set canvas value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get canvas value</p>\n</dd>\n<dt><a href=\"#options\">options()</a> \u21d2 <code>Options</code></dt>\n<dd><p>Get options</p>\n</dd>\n<dt><a href=\"#center\">center()</a> \u21d2 <code><a href=\"#Point\">Point</a></code></dt>\n<dd><p>Get center of this object</p>\n</dd>\n<dt><a href=\"#drawOptions\">drawOptions(offset)</a></dt>\n<dd><p>Draws associated options</p>\n</dd>\n<dt><a href=\"#invert\">invert()</a></dt>\n<dd><p>Invert x &amp; y coordinate values</p>\n</dd>\n</dl>\n\n<a name=\"Point\"></a>\n\n## Point\n{Object}  Point                             X & Y coordinates for an object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [x] | <code>number</code> | <code>0</code> | X - x-axis coordinate |\n| [y] | <code>number</code> | <code>0</code> | Y - y-axis coordinate |\n| options | <code>Options</code> |  | Ancillary properties |\n\n<a name=\"new_Point_new\"></a>\n\n### new Point(x, y)\nCreate a point\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| x | <code>number</code> | X coordinate value |\n| y | <code>number</code> | Y coordinate value |\n\n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"y\"></a>\n\n## y(value)\nSet the y-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n<a name=\"canvas\"></a>\n\n## canvas(value)\nSet canvas value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"canvas\"></a>\n\n## canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n<a name=\"options\"></a>\n\n## options() \u21d2 <code>Options</code>\nGet options\n\n**Kind**: global function  \n**Returns**: <code>Options</code> - Options object  \n**Access**: public  \n<a name=\"center\"></a>\n\n## center() \u21d2 [<code>Point</code>](#Point)\nGet center of this object\n\n**Kind**: global function  \n**Returns**: [<code>Point</code>](#Point) - Center point coordinates  \n**Read only**: true  \n<a name=\"drawOptions\"></a>\n\n## drawOptions(offset)\nDraws associated options\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| offset | <code>number</code> | Offset of drawable options |\n\n<a name=\"invert\"></a>\n\n## invert()\nInvert x & y coordinate values\n\n**Kind**: global function  \n**Access**: public  \n",
    "Animation": "## Classes\n\n<dl>\n<dt><a href=\"#Animation\">Animation</a></dt>\n<dd><p>{Object}   Animation                        Animation handler</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#timing\">timing(value)</a></dt>\n<dd><p>Set timing</p>\n</dd>\n<dt><a href=\"#timing\">timing()</a> \u21d2 <code>function</code></dt>\n<dd><p>Get timing</p>\n</dd>\n<dt><a href=\"#draw\">draw(Draw)</a></dt>\n<dd><p>Set draw function</p>\n</dd>\n<dt><a href=\"#draw\">draw()</a> \u21d2 <code>function</code></dt>\n<dd><p>Get draw function</p>\n</dd>\n<dt><a href=\"#duration\">duration(value)</a></dt>\n<dd><p>Set duration</p>\n</dd>\n<dt><a href=\"#duration\">duration()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get duration</p>\n</dd>\n<dt><a href=\"#animate\">animate()</a></dt>\n<dd><p>Initiates animation</p>\n</dd>\n</dl>\n\n<a name=\"Animation\"></a>\n\n## Animation\n{Object}   Animation                        Animation handler\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| timing | <code>function</code> | Timing function |\n| draw | <code>function</code> | Draw function |\n| duration | <code>number</code> | Duration of animation |\n\n<a name=\"new_Animation_new\"></a>\n\n### new Animation(duration, timing, draw)\nCreates an animation instance\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| duration | <code>number</code> | Duration of animation |\n| timing | <code>function</code> | Timing function |\n| draw | <code>function</code> | Draw function |\n\n<a name=\"timing\"></a>\n\n## timing(value)\nSet timing\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>function</code> | Timing function |\n\n<a name=\"timing\"></a>\n\n## timing() \u21d2 <code>function</code>\nGet timing\n\n**Kind**: global function  \n**Returns**: <code>function</code> - Timing function  \n**Read only**: true  \n<a name=\"draw\"></a>\n\n## draw(Draw)\nSet draw function\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Draw | <code>function</code> | function |\n\n<a name=\"draw\"></a>\n\n## draw() \u21d2 <code>function</code>\nGet draw function\n\n**Kind**: global function  \n**Returns**: <code>function</code> - Draw function  \n**Read only**: true  \n<a name=\"duration\"></a>\n\n## duration(value)\nSet duration\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Duration |\n\n<a name=\"duration\"></a>\n\n## duration() \u21d2 <code>number</code>\nGet duration\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Duration  \n**Read only**: true  \n<a name=\"animate\"></a>\n\n## animate()\nInitiates animation\n\n**Kind**: global function  \n**Access**: public  \n",
    "Lines": "## Classes\n\n<dl>\n<dt><a href=\"#Lines\">Lines</a></dt>\n<dd><p>{Array} Lines                               Collection of Line objects</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#point\">point(value)</a></dt>\n<dd><p>Set point</p>\n</dd>\n<dt><a href=\"#point\">point()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get point</p>\n</dd>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set the y-axis value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis value</p>\n</dd>\n<dt><a href=\"#stroke\">stroke()</a> \u21d2 <code>Stroke</code></dt>\n<dd><p>Get stroke properties</p>\n</dd>\n<dt><a href=\"#shadow\">shadow()</a> \u21d2 <code>Shadow</code></dt>\n<dd><p>Get shadow properties</p>\n</dd>\n<dt><a href=\"#options\">options()</a> \u21d2 <code>Object</code></dt>\n<dd><p>Get options</p>\n</dd>\n<dt><a href=\"#lineCap\">lineCap(value)</a></dt>\n<dd><p>Set line cap</p>\n</dd>\n<dt><a href=\"#lineCap\">lineCap()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get line cap</p>\n</dd>\n<dt><a href=\"#canvas\">canvas(value)</a></dt>\n<dd><p>Set canvas value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get canvas value</p>\n</dd>\n<dt><a href=\"#aspect\">aspect()</a> \u21d2 <code>Aspect</code></dt>\n<dd><p>Get aspect properties</p>\n</dd>\n<dt><a href=\"#width\">width()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get aspect with</p>\n</dd>\n<dt><a href=\"#height\">height()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get aspect height</p>\n</dd>\n<dt><a href=\"#anchor\">anchor(value)</a></dt>\n<dd><p>Set anchor type</p>\n</dd>\n<dt><a href=\"#anchor\">anchor()</a> \u21d2 <code>Anchor</code></dt>\n<dd><p>Get anchor</p>\n</dd>\n<dt><a href=\"#area\">area()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get area of this object</p>\n</dd>\n<dt><a href=\"#perimeter\">perimeter()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get perimeter of this object</p>\n</dd>\n<dt><a href=\"#center\">center()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get center of this object</p>\n</dd>\n<dt><a href=\"#+_appendProperties\">#_appendProperties(line)</a></dt>\n<dd><p>Appends property values</p>\n</dd>\n<dt><a href=\"#_isAspect\">_isAspect(value)</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Returns whether the passed value is an Aspect</p>\n</dd>\n<dt><a href=\"#push\">push()</a></dt>\n<dd><p>Pushes Line(s) into this collection</p>\n</dd>\n<dt><a href=\"#draw\">draw(canvas)</a></dt>\n<dd><p>A-typical draw function for collections; Lines</p>\n</dd>\n</dl>\n\n<a name=\"Lines\"></a>\n\n## Lines\n{Array} Lines                               Collection of Line objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| stroke | <code>StrokeCollection</code> | Stroke collection properties |\n| shadow | <code>ShadowCollection</code> | Shadow collection properties |\n| lineCap | <code>string</code> | Shape of end points |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n<a name=\"new_Lines_new\"></a>\n\n### new Lines()\nCreate a lines array\n\n<a name=\"point\"></a>\n\n## point(value)\nSet point\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.point](discrete.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"point\"></a>\n\n## point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [discrete.point](discrete.point)  \n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.pointX](discrete.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [discrete.pointX](discrete.pointX)  \n<a name=\"y\"></a>\n\n## y(value)\nSet the y-axis value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.pointY](discrete.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [discrete.pointY](discrete.pointY)  \n<a name=\"stroke\"></a>\n\n## stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: global function  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"shadow\"></a>\n\n## shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: global function  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"options\"></a>\n\n## options() \u21d2 <code>Object</code>\nGet options\n\n**Kind**: global function  \n**Returns**: <code>Object</code> - Options object  \n**Access**: public  \n<a name=\"lineCap\"></a>\n\n## lineCap(value)\nSet line cap\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Line cap |\n\n<a name=\"lineCap\"></a>\n\n## lineCap() \u21d2 <code>string</code>\nGet line cap\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Line cap  \n**Read only**: true  \n<a name=\"canvas\"></a>\n\n## canvas(value)\nSet canvas value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [combined.canvas](combined.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"canvas\"></a>\n\n## canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [combined.canvas](combined.canvas)  \n<a name=\"aspect\"></a>\n\n## aspect() \u21d2 <code>Aspect</code>\nGet aspect properties\n\n**Kind**: global function  \n**Returns**: <code>Aspect</code> - Aspect properties  \n**Access**: public  \n<a name=\"width\"></a>\n\n## width() \u21d2 <code>number</code>\nGet aspect with\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Width value  \n**Read only**: true  \n<a name=\"height\"></a>\n\n## height() \u21d2 <code>number</code>\nGet aspect height\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Height value  \n**Read only**: true  \n<a name=\"anchor\"></a>\n\n## anchor(value)\nSet anchor type\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Anchor type |\n\n<a name=\"anchor\"></a>\n\n## anchor() \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: global function  \n**Returns**: <code>Anchor</code> - Anchor properties  \n**Access**: public  \n<a name=\"area\"></a>\n\n## area() \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Area of rectangle  \n**Read only**: true  \n<a name=\"perimeter\"></a>\n\n## perimeter() \u21d2 <code>number</code>\nGet perimeter of this object\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Perimeter of rectangle  \n**Read only**: true  \n<a name=\"center\"></a>\n\n## center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Center point coordinates  \n**Read only**: true  \n<a name=\"+_appendProperties\"></a>\n\n## #\\_appendProperties(line)\nAppends property values\n\n**Kind**: global function  \n**Access**: protected  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| line | <code>Line</code> | Line object |\n\n<a name=\"_isAspect\"></a>\n\n## \\_isAspect(value) \u21d2 <code>boolean</code>\nReturns whether the passed value is an Aspect\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - True || False  \n**Access**: public  \n**See**: [Validation.isAspect](Validation.isAspect)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | Aspect or object equivalent |\n\n<a name=\"push\"></a>\n\n## push()\nPushes Line(s) into this collection\n\n**Kind**: global function  \n**Access**: public  \n<a name=\"draw\"></a>\n\n## draw(canvas)\nA-typical draw function for collections; Lines\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.draw.collection.aTypical](Utilities.draw.collection.aTypical)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "ControlPoints": "## Classes\n\n<dl>\n<dt><a href=\"#ControlPoints\">ControlPoints</a></dt>\n<dd><p>{Object} ControlPoints                      Defines the shape of a bezier curve</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#p0\">p0(value)</a></dt>\n<dd><p>Set control point one</p>\n</dd>\n<dt><a href=\"#p0\">p0()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get control point one</p>\n</dd>\n<dt><a href=\"#p1\">p1(value)</a></dt>\n<dd><p>Set control point one</p>\n</dd>\n<dt><a href=\"#p1\">p1()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get control point one</p>\n</dd>\n<dt><a href=\"#p2\">p2(value)</a></dt>\n<dd><p>Set control point one</p>\n</dd>\n<dt><a href=\"#p2\">p2()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get control point one</p>\n</dd>\n<dt><a href=\"#p3\">p3(value)</a></dt>\n<dd><p>Set control point one</p>\n</dd>\n<dt><a href=\"#p3\">p3()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get control point one</p>\n</dd>\n</dl>\n\n<a name=\"ControlPoints\"></a>\n\n## ControlPoints\n{Object} ControlPoints                      Defines the shape of a bezier curve\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| p0 | <code>number</code> | Control point one |\n| p1 | <code>number</code> | Control point two |\n| p2 | <code>number</code> | Control point three |\n| p3 | <code>number</code> | Control point four |\n\n<a name=\"new_ControlPoints_new\"></a>\n\n### new ControlPoints(p0, p1, p2, p3)\nCreate control points\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| p0 | <code>number</code> | Control point one |\n| p1 | <code>number</code> | Control point two |\n| p2 | <code>number</code> | Control point three |\n| p3 | <code>number</code> | Control point four |\n\n<a name=\"p0\"></a>\n\n## p0(value)\nSet control point one\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Control point one |\n\n<a name=\"p0\"></a>\n\n## p0() \u21d2 <code>number</code>\nGet control point one\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Control point one  \n**Read only**: true  \n<a name=\"p1\"></a>\n\n## p1(value)\nSet control point one\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Control point two |\n\n<a name=\"p1\"></a>\n\n## p1() \u21d2 <code>number</code>\nGet control point one\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Control point two  \n**Read only**: true  \n<a name=\"p2\"></a>\n\n## p2(value)\nSet control point one\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Control point three |\n\n<a name=\"p2\"></a>\n\n## p2() \u21d2 <code>number</code>\nGet control point one\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Control point three  \n**Read only**: true  \n<a name=\"p3\"></a>\n\n## p3(value)\nSet control point one\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Control point four |\n\n<a name=\"p3\"></a>\n\n## p3() \u21d2 <code>number</code>\nGet control point one\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Control point four  \n**Read only**: true  \n",
    "Processing": "",
    "ShadowCollection": "## Classes\n\n<dl>\n<dt><a href=\"#ShadowCollection\">ShadowCollection</a></dt>\n<dd><p>{Object} ShadowCollection                   Shadow of associated object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#color\">color(value)</a></dt>\n<dd><p>Set color value</p>\n</dd>\n<dt><a href=\"#color\">color()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get color value</p>\n</dd>\n<dt><a href=\"#blur\">blur(blur)</a></dt>\n<dd><p>Set blur value</p>\n</dd>\n<dt><a href=\"#blur\">blur()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get blur value</p>\n</dd>\n<dt><a href=\"#offset\">offset(value)</a></dt>\n<dd><p>Set offset</p>\n</dd>\n<dt><a href=\"#offset\">offset()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get offset</p>\n</dd>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis offset value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis offset value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set the y-axis offset value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis offset value</p>\n</dd>\n</dl>\n\n<a name=\"ShadowCollection\"></a>\n\n## ShadowCollection\n{Object} ShadowCollection                   Shadow of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| blur | <code>number</code> |  | Blur strength |\n| offset | <code>Point</code> |  | Point offset coordinates |\n\n<a name=\"new_ShadowCollection_new\"></a>\n\n### new ShadowCollection()\nCreate a shadow collection\n\n<a name=\"color\"></a>\n\n## color(value)\nSet color value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | RGB color value |\n\n<a name=\"color\"></a>\n\n## color() \u21d2 <code>string</code>\nGet color value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - RGB color value  \n**Access**: public  \n<a name=\"blur\"></a>\n\n## blur(blur)\nSet blur value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| blur | <code>number</code> | Blur value |\n\n<a name=\"blur\"></a>\n\n## blur() \u21d2 <code>number</code>\nGet blur value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Blur value  \n**Read only**: true  \n<a name=\"offset\"></a>\n\n## offset(value)\nSet offset\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Shadow offset |\n\n<a name=\"offset\"></a>\n\n## offset() \u21d2 <code>Point</code>\nGet offset\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Shadow offset  \n**Access**: public  \n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis offset value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis offset value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"y\"></a>\n\n## y(value)\nSet the y-axis offset value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis offset value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n",
    "Shadow": "## Classes\n\n<dl>\n<dt><a href=\"#Shadow\">Shadow</a></dt>\n<dd><p>{Object} Shadow                             Shadow of associated object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#color\">color(value)</a></dt>\n<dd><p>Set color value</p>\n</dd>\n<dt><a href=\"#color\">color()</a> \u21d2 <code>Object</code></dt>\n<dd><p>Get color value</p>\n</dd>\n<dt><a href=\"#blur\">blur(blur)</a></dt>\n<dd><p>Set blur value</p>\n</dd>\n<dt><a href=\"#blur\">blur()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get blur value</p>\n</dd>\n<dt><a href=\"#offset\">offset(value)</a></dt>\n<dd><p>Set offset</p>\n</dd>\n<dt><a href=\"#offset\">offset()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get offset</p>\n</dd>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis offset value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis offset value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set the y-axis offset value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis offset value</p>\n</dd>\n</dl>\n\n<a name=\"Shadow\"></a>\n\n## Shadow\n{Object} Shadow                             Shadow of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | RGB color value; r, g, b |\n| [blur] | <code>number</code> | <code>3</code> | Blur strength |\n| offset | <code>Point</code> |  | Point offset coordinates |\n\n<a name=\"new_Shadow_new\"></a>\n\n### new Shadow(color, blur, offset)\nCreate a shadow\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| color | <code>Object</code> | RGB color value |\n| blur | <code>number</code> | Shadow blur value |\n| offset | <code>Point</code> | Shadow offset |\n\n<a name=\"color\"></a>\n\n## color(value)\nSet color value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | Color model; Rgb, Hsl, Hwb |\n\n<a name=\"color\"></a>\n\n## color() \u21d2 <code>Object</code>\nGet color value\n\n**Kind**: global function  \n**Returns**: <code>Object</code> - Color model; Rgb, Hsl, Hwb  \n**Access**: public  \n<a name=\"blur\"></a>\n\n## blur(blur)\nSet blur value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| blur | <code>number</code> | Blur value |\n\n<a name=\"blur\"></a>\n\n## blur() \u21d2 <code>number</code>\nGet blur value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Blur value  \n**Read only**: true  \n<a name=\"offset\"></a>\n\n## offset(value)\nSet offset\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.offset](discrete.offset)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Shadow offset |\n\n<a name=\"offset\"></a>\n\n## offset() \u21d2 <code>Point</code>\nGet offset\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Shadow offset  \n**Access**: public  \n**See**: [discrete.offset](discrete.offset)  \n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis offset value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.offsetX](discrete.offsetX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis offset value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [discrete.offsetX](discrete.offsetX)  \n<a name=\"y\"></a>\n\n## y(value)\nSet the y-axis offset value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.offsetY](discrete.offsetY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis offset value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [discrete.offsetY](discrete.offsetY)  \n",
    "Rectangles": "## Classes\n\n<dl>\n<dt><a href=\"#Rectangles\">Rectangles</a></dt>\n<dd><p>{Array} Rectangles                          Collection of Rectangle objects</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#point\">point(value)</a></dt>\n<dd><p>Set point</p>\n</dd>\n<dt><a href=\"#point\">point()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get point</p>\n</dd>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set the y-axis value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis value</p>\n</dd>\n<dt><a href=\"#pushPop\">pushPop(object)</a></dt>\n<dd><p>Push or pops the passed object</p>\n</dd>\n<dt><a href=\"#draw\">draw(canvas)</a></dt>\n<dd><p>Draw this object</p>\n</dd>\n</dl>\n\n<a name=\"Rectangles\"></a>\n\n## Rectangles\n{Array} Rectangles                          Collection of Rectangle objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n\n* [Rectangles](#Rectangles)\n    * [new Rectangles()](#new_Rectangles_new)\n    * [.canvas](#Rectangles+canvas)\n    * [.canvas](#Rectangles+canvas) \u21d2 <code>string</code>\n\n<a name=\"new_Rectangles_new\"></a>\n\n### new Rectangles()\nCreate Rectangles object\n\n<a name=\"Rectangles+canvas\"></a>\n\n### rectangles.canvas\nSet canvas value\n\n**Kind**: instance property of [<code>Rectangles</code>](#Rectangles)  \n**See**: [combined.canvas](combined.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Rectangles+canvas\"></a>\n\n### rectangles.canvas \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance property of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>string</code> - Canvas id  \n**See**: [combined.canvas](combined.canvas)  \n<a name=\"point\"></a>\n\n## point(value)\nSet point\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.point](discrete.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"point\"></a>\n\n## point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [discrete.point](discrete.point)  \n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.pointX](discrete.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [discrete.pointX](discrete.pointX)  \n<a name=\"y\"></a>\n\n## y(value)\nSet the y-axis value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.pointY](discrete.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [discrete.pointY](discrete.pointY)  \n<a name=\"pushPop\"></a>\n\n## pushPop(object)\nPush or pops the passed object\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.misc.pushPop](Utilities.misc.pushPop)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| object | <code>Object</code> | Object; Circle, Rectangle, Text |\n\n<a name=\"draw\"></a>\n\n## draw(canvas)\nDraw this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Circles": "## Classes\n\n<dl>\n<dt><a href=\"#Circles\">Circles</a></dt>\n<dd><p>{Array} Circles                             Collection of circle elements within an array</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#point\">point(point)</a></dt>\n<dd><p>Set point</p>\n</dd>\n<dt><a href=\"#point\">point()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get point</p>\n</dd>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set y-axis value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas(value)</a></dt>\n<dd><p>Set canvas value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get canvas value</p>\n</dd>\n<dt><a href=\"#pushPop\">pushPop(object)</a></dt>\n<dd><p>Push or pops the passed object</p>\n</dd>\n<dt><a href=\"#draw\">draw(canvas)</a></dt>\n<dd><p>Typical draw function for collections; Circles, Texts</p>\n</dd>\n</dl>\n\n<a name=\"Circles\"></a>\n\n## Circles\n{Array} Circles                             Collection of circle elements within an array\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n<a name=\"new_Circles_new\"></a>\n\n### new Circles()\nCreate Circles object\n\n<a name=\"point\"></a>\n\n## point(point)\nSet point\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n\n<a name=\"point\"></a>\n\n## point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - X & Y axis coordinates  \n**Access**: public  \n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"y\"></a>\n\n## y(value)\nSet y-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n<a name=\"canvas\"></a>\n\n## canvas(value)\nSet canvas value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [combined.canvas](combined.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"canvas\"></a>\n\n## canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [combined.canvas](combined.canvas)  \n<a name=\"pushPop\"></a>\n\n## pushPop(object)\nPush or pops the passed object\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.misc.pushPop](Utilities.misc.pushPop)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| object | <code>Object</code> | Object; Circle, Rectangle, Text |\n\n<a name=\"draw\"></a>\n\n## draw(canvas)\nTypical draw function for collections; Circles, Texts\n\n**Kind**: global function  \n**Access**: public  \n**See**: [UTILITIES.draw.collection.typical](UTILITIES.draw.collection.typical)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Anchor": "## Classes\n\n<dl>\n<dt><a href=\"#Anchor\">Anchor</a></dt>\n<dd><p>{Object} Anchor                             Anchor object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#point\">point(point)</a></dt>\n<dd><p>Set point</p>\n</dd>\n<dt><a href=\"#point\">point()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get point</p>\n</dd>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set y-axis value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis value</p>\n</dd>\n<dt><a href=\"#align\">align(value)</a></dt>\n<dd><p>Set anchor alignment</p>\n</dd>\n<dt><a href=\"#align\">align()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get anchor alignment</p>\n</dd>\n</dl>\n\n<a name=\"Anchor\"></a>\n\n## Anchor\n{Object} Anchor                             Anchor object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| align | <code>string</code> | Anchor alignment |\n\n<a name=\"point\"></a>\n\n## point(point)\nSet point\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n\n<a name=\"point\"></a>\n\n## point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - X & Y axis coordinates  \n**Access**: public  \n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"y\"></a>\n\n## y(value)\nSet y-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n<a name=\"align\"></a>\n\n## align(value)\nSet anchor alignment\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Anchor alignment |\n\n<a name=\"align\"></a>\n\n## align() \u21d2 <code>string</code>\nGet anchor alignment\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Anchor alignment  \n**Read only**: true  \n",
    "Fill": "## Classes\n\n<dl>\n<dt><a href=\"#Fill\">Fill</a></dt>\n<dd><p>{Object}  Fill                              Fill container for various fill types</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#color\">color(value)</a></dt>\n<dd><p>Set color type</p>\n</dd>\n<dt><a href=\"#color\">color()</a> \u21d2 <code>Object</code></dt>\n<dd><p>Get color type</p>\n</dd>\n<dt><a href=\"#type\">type(value)</a></dt>\n<dd><p>Set type value</p>\n</dd>\n<dt><a href=\"#type\">type()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get type value</p>\n</dd>\n<dt><a href=\"#gradient\">gradient(value)</a></dt>\n<dd><p>Set gradient gradient properties</p>\n</dd>\n<dt><a href=\"#gradient\">gradient()</a> \u21d2 <code>Object</code></dt>\n<dd><p>Get gradient gradient properties</p>\n</dd>\n<dt><a href=\"#pattern\">pattern()</a> \u21d2 <code>Pattern</code></dt>\n<dd><p>Get pattern fill object</p>\n</dd>\n</dl>\n\n<a name=\"Fill\"></a>\n\n## Fill\n{Object}  Fill                              Fill container for various fill types\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| [type] | <code>string</code> | <code>&quot;&#x27;solid&#x27;&quot;</code> | Fill type; solid | linear | radial | conic | pattern |\n| gradient | <code>Object</code> |  | Gradient object; Linear | Radial | Conic |\n| pattern | <code>Pattern</code> |  | Pattern fill object |\n\n<a name=\"new_Fill_new\"></a>\n\n### new Fill([color], [type], gradient)\nCreate a fill type\n\n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| [type] | <code>string</code> | <code>&quot;&#x27;solid&#x27;&quot;</code> | Fill type |\n| gradient | <code>Object</code> |  | Gradient object |\n\n<a name=\"color\"></a>\n\n## color(value)\nSet color type\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | Color model |\n\n<a name=\"color\"></a>\n\n## color() \u21d2 <code>Object</code>\nGet color type\n\n**Kind**: global function  \n**Returns**: <code>Object</code> - Color model  \n**Read only**: true  \n<a name=\"type\"></a>\n\n## type(value)\nSet type value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Fill type value |\n\n<a name=\"type\"></a>\n\n## type() \u21d2 <code>string</code>\nGet type value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Fill type value  \n**Read only**: true  \n<a name=\"gradient\"></a>\n\n## gradient(value)\nSet gradient gradient properties\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | Gradient object & properties |\n\n<a name=\"gradient\"></a>\n\n## gradient() \u21d2 <code>Object</code>\nGet gradient gradient properties\n\n**Kind**: global function  \n**Returns**: <code>Object</code> - Gradient object & properties  \n**Read only**: true  \n<a name=\"pattern\"></a>\n\n## pattern() \u21d2 <code>Pattern</code>\nGet pattern fill object\n\n**Kind**: global function  \n**Returns**: <code>Pattern</code> - Pattern fill object  \n**Access**: public  \n",
    "Hsl": "## Classes\n\n<dl>\n<dt><a href=\"#Hsl\">Hsl</a></dt>\n<dd><p>{Object} Hsl \t\t\t\t\t\t\t\tHSL color model</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#hue\">hue(hue)</a></dt>\n<dd><p>Sets the hue value</p>\n</dd>\n<dt><a href=\"#hue\">hue()</a> \u21d2 <code>number</code></dt>\n<dd><p>Gets the hue value</p>\n</dd>\n<dt><a href=\"#saturation\">saturation(saturation)</a></dt>\n<dd><p>Sets the saturation value</p>\n</dd>\n<dt><a href=\"#saturation\">saturation()</a> \u21d2 <code>number</code></dt>\n<dd><p>Gets the saturation value</p>\n</dd>\n<dt><a href=\"#lightness\">lightness(lightness)</a></dt>\n<dd><p>Sets the lightness value</p>\n</dd>\n<dt><a href=\"#lightness\">lightness()</a> \u21d2 <code>number</code></dt>\n<dd><p>Gets the lightness value</p>\n</dd>\n<dt><a href=\"#_isDegree\">_isDegree(value)</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Returns whether the passed value is a degree</p>\n</dd>\n<dt><a href=\"#toCss\">toCss()</a> \u21d2 <code>string</code></dt>\n<dd><p>Returns a CSS compatible <color> string value</p>\n</dd>\n</dl>\n\n<a name=\"Hsl\"></a>\n\n## Hsl\n{Object} Hsl \t\t\t\t\t\t\t\tHSL color model\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [hue] | <code>number</code> | <code>0</code> | Hue value; 0 - 360 (degree) |\n| [saturation] | <code>number</code> | <code>0</code> | Saturation value; 0 - 1 (decimal) |\n| [lightness] | <code>number</code> | <code>0</code> | Lightness value; 0 - 1 (decimal) |\n| [alpha] | <code>number</code> | <code>1</code> | Alpha value; 0 - 1 (decimal) |\n\n<a name=\"new_Hsl_new\"></a>\n\n### new Hsl(hue, saturation, lightness, alpha)\nCreate an HSL color model\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| hue | <code>number</code> | Hue value |\n| saturation | <code>number</code> | Saturation value |\n| lightness | <code>number</code> | Lightness value |\n| alpha | <code>number</code> | Alpha value |\n\n<a name=\"hue\"></a>\n\n## hue(hue)\nSets the hue value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| hue | <code>number</code> | Hue value; 0 - 360 |\n\n<a name=\"hue\"></a>\n\n## hue() \u21d2 <code>number</code>\nGets the hue value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Hue value; 0 - 360  \n**Access**: public  \n<a name=\"saturation\"></a>\n\n## saturation(saturation)\nSets the saturation value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| saturation | <code>number</code> | Saturation value; 0 - 1 |\n\n<a name=\"saturation\"></a>\n\n## saturation() \u21d2 <code>number</code>\nGets the saturation value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Saturation value; 0 - 1  \n**Access**: public  \n<a name=\"lightness\"></a>\n\n## lightness(lightness)\nSets the lightness value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| lightness | <code>number</code> | Lightness value; 0 - 1 |\n\n<a name=\"lightness\"></a>\n\n## lightness() \u21d2 <code>number</code>\nGets the lightness value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Lightness value; 0 - 1  \n**Access**: public  \n<a name=\"_isDegree\"></a>\n\n## \\_isDegree(value) \u21d2 <code>boolean</code>\nReturns whether the passed value is a degree\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - True || False  \n**Prviate**:   \n**See**: [Validation.isDegree](Validation.isDegree)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Degree |\n\n<a name=\"toCss\"></a>\n\n## toCss() \u21d2 <code>string</code>\nReturns a CSS compatible <color> string value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - CSS <color> string  \n**Access**: public  \n",
    "Options": "## Classes\n\n<dl>\n<dt><a href=\"#Options\">Options</a></dt>\n<dd><p>{Object}  Options                           Options for shapes, lines, and groups</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#shadow\">shadow(value)</a></dt>\n<dd><p>Set shadow value</p>\n</dd>\n<dt><a href=\"#shadow\">shadow()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get shadow value</p>\n</dd>\n<dt><a href=\"#border\">border(value)</a></dt>\n<dd><p>Set border value</p>\n</dd>\n<dt><a href=\"#border\">border()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get border value</p>\n</dd>\n<dt><a href=\"#axis\">axis(value)</a></dt>\n<dd><p>Set axis value</p>\n</dd>\n<dt><a href=\"#axis\">axis()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get axis value</p>\n</dd>\n<dt><a href=\"#anchor\">anchor(value)</a></dt>\n<dd><p>Set anchor value</p>\n</dd>\n<dt><a href=\"#anchor\">anchor()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get anchor value</p>\n</dd>\n<dt><a href=\"#coordinates\">coordinates(value)</a></dt>\n<dd><p>Set coordinates value</p>\n</dd>\n<dt><a href=\"#coordinates\">coordinates()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get coordinates value</p>\n</dd>\n<dt><a href=\"#controlPoints\">controlPoints(value)</a></dt>\n<dd><p>Set control points value</p>\n</dd>\n<dt><a href=\"#controlPoints\">controlPoints()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get control points value</p>\n</dd>\n<dt><a href=\"#master\">master(value)</a></dt>\n<dd><p>Set master object</p>\n</dd>\n<dt><a href=\"#master\">master()</a> \u21d2 <code>Object</code></dt>\n<dd><p>Get master object</p>\n</dd>\n</dl>\n\n<a name=\"Options\"></a>\n\n## Options\n{Object}  Options                           Options for shapes, lines, and groups\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [shadow] | <code>boolean</code> | <code>false</code> | Show shadow |\n| [border] | <code>boolean</code> | <code>false</code> | Show border |\n| [axis] | <code>boolean</code> | <code>false</code> | Show axis |\n| [points] | <code>boolean</code> | <code>false</code> | Show points |\n| [anchor] | <code>boolean</code> | <code>false</code> | Show anchor |\n| [coordinates] | <code>boolean</code> | <code>false</code> | Show coordinates |\n| [controlPoints] | <code>boolean</code> | <code>false</code> | Show control points |\n| master | <code>Object</code> |  | Master object to reference |\n\n<a name=\"new_Options_new\"></a>\n\n### new Options(shadow, border, axis, points, anchor, coordinates, controlPoints)\nCreate an options object\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| shadow | <code>boolean</code> | Show shadow |\n| border | <code>boolean</code> | Show border |\n| axis | <code>boolean</code> | Show axis |\n| points | <code>boolean</code> | Show points |\n| anchor | <code>boolean</code> | Show anchor |\n| coordinates | <code>boolean</code> | Show coordinates |\n| controlPoints | <code>boolean</code> | Show control points |\n\n<a name=\"shadow\"></a>\n\n## shadow(value)\nSet shadow value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Shadow; true | false |\n\n<a name=\"shadow\"></a>\n\n## shadow() \u21d2 <code>boolean</code>\nGet shadow value\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Shadow; true | false  \n**Access**: public  \n<a name=\"border\"></a>\n\n## border(value)\nSet border value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Border; true | false |\n\n<a name=\"border\"></a>\n\n## border() \u21d2 <code>boolean</code>\nGet border value\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Border; true | false  \n**Read only**: true  \n<a name=\"axis\"></a>\n\n## axis(value)\nSet axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Axis; true | false |\n\n<a name=\"axis\"></a>\n\n## axis() \u21d2 <code>boolean</code>\nGet axis value\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Axis; true | false  \n**Read only**: true  \n<a name=\"anchor\"></a>\n\n## anchor(value)\nSet anchor value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Anchor; true | false |\n\n<a name=\"anchor\"></a>\n\n## anchor() \u21d2 <code>boolean</code>\nGet anchor value\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Anchor; true | false  \n**Read only**: true  \n<a name=\"coordinates\"></a>\n\n## coordinates(value)\nSet coordinates value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Coordinates; true | false |\n\n<a name=\"coordinates\"></a>\n\n## coordinates() \u21d2 <code>boolean</code>\nGet coordinates value\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Coordinates; true | false  \n**Read only**: true  \n<a name=\"controlPoints\"></a>\n\n## controlPoints(value)\nSet control points value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Control points; true | false |\n\n<a name=\"controlPoints\"></a>\n\n## controlPoints() \u21d2 <code>boolean</code>\nGet control points value\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Control points; true | false  \n**Read only**: true  \n<a name=\"master\"></a>\n\n## master(value)\nSet master object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | CanvasLab Object |\n\n<a name=\"master\"></a>\n\n## master() \u21d2 <code>Object</code>\nGet master object\n\n**Kind**: global function  \n**Returns**: <code>Object</code> - CanvasLab Object  \n**Access**: public  \n",
    "Aspect": "## Classes\n\n<dl>\n<dt><a href=\"#Aspect\">Aspect</a></dt>\n<dd><p>{Object} Aspect                             Aspect dimensions of associated object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#width\">width(value)</a></dt>\n<dd><p>Set width</p>\n</dd>\n<dt><a href=\"#width\">width()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get width</p>\n</dd>\n<dt><a href=\"#height\">height(value)</a></dt>\n<dd><p>Set height</p>\n</dd>\n<dt><a href=\"#height\">height()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get height</p>\n</dd>\n<dt><a href=\"#center\">center()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get center of aspect</p>\n</dd>\n<dt><a href=\"#heightCenter\">heightCenter()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get center of height</p>\n</dd>\n<dt><a href=\"#widthCenter\">widthCenter()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get center of width</p>\n</dd>\n</dl>\n\n<a name=\"Aspect\"></a>\n\n## Aspect\n{Object} Aspect                             Aspect dimensions of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [width] | <code>number</code> | <code>0</code> | Width |\n| [height] | <code>number</code> | <code>0</code> | Height |\n\n<a name=\"new_Aspect_new\"></a>\n\n### new Aspect(width, height)\nCreate an aspect\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| width | <code>number</code> | Width of aspect |\n| height | <code>number</code> | Height of aspect |\n\n<a name=\"width\"></a>\n\n## width(value)\nSet width\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Width value |\n\n<a name=\"width\"></a>\n\n## width() \u21d2 <code>number</code>\nGet width\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Width value  \n**Read only**: true  \n<a name=\"height\"></a>\n\n## height(value)\nSet height\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Height value |\n\n<a name=\"height\"></a>\n\n## height() \u21d2 <code>number</code>\nGet height\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Height value  \n**Read only**: true  \n<a name=\"center\"></a>\n\n## center() \u21d2 <code>Point</code>\nGet center of aspect\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Center point of this aspect  \n**Read only**: true  \n<a name=\"heightCenter\"></a>\n\n## heightCenter() \u21d2 <code>number</code>\nGet center of height\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Center of height  \n**Read only**: true  \n<a name=\"widthCenter\"></a>\n\n## widthCenter() \u21d2 <code>number</code>\nGet center of width\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Center of with  \n**Read only**: true  \n",
    "PointCollection": "## Classes\n\n<dl>\n<dt><a href=\"#PointCollection\">PointCollection</a></dt>\n<dd><p>{Object}  PointCollection                   X &amp; Y coordinates for an object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set the y-axis value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis value</p>\n</dd>\n<dt><a href=\"#options\">options()</a> \u21d2 <code>OptionsCollection</code></dt>\n<dd><p>Get options</p>\n</dd>\n<dt><a href=\"#invert\">invert()</a></dt>\n<dd><p>Invert x &amp; y coordinate values</p>\n</dd>\n</dl>\n\n<a name=\"PointCollection\"></a>\n\n## PointCollection\n{Object}  PointCollection                   X & Y coordinates for an object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [x] | <code>number</code> | <code>0</code> | X - x-axis coordinate |\n| [y] | <code>number</code> | <code>0</code> | Y - y-axis coordinate |\n| options | <code>OptionsCollection</code> |  | Ancillary properties |\n\n<a name=\"new_PointCollection_new\"></a>\n\n### new PointCollection()\nCreate a point collection\n\n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"y\"></a>\n\n## y(value)\nSet the y-axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n<a name=\"options\"></a>\n\n## options() \u21d2 <code>OptionsCollection</code>\nGet options\n\n**Kind**: global function  \n**Returns**: <code>OptionsCollection</code> - Options collection object  \n**Access**: public  \n<a name=\"invert\"></a>\n\n## invert()\nInvert x & y coordinate values\n\n**Kind**: global function  \n**Access**: public  \n",
    "StrokeCollection": "## Classes\n\n<dl>\n<dt><a href=\"#StrokeCollection\">StrokeCollection</a></dt>\n<dd><p>{Object}   StrokeCollection                 Stroke properties of associated object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#color\">color(value)</a></dt>\n<dd><p>Set color value</p>\n</dd>\n<dt><a href=\"#color\">color()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get color value</p>\n</dd>\n<dt><a href=\"#type\">type(value)</a></dt>\n<dd><p>Set type</p>\n</dd>\n<dt><a href=\"#type\">type()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get type</p>\n</dd>\n<dt><a href=\"#segments\">segments(value)</a></dt>\n<dd><p>Set segment value</p>\n</dd>\n<dt><a href=\"#segments\">segments()</a> \u21d2 <code>Array</code></dt>\n<dd><p>Get segment value</p>\n</dd>\n<dt><a href=\"#width\">width(value)</a></dt>\n<dd><p>Set width value</p>\n</dd>\n<dt><a href=\"#width\">width()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get width value</p>\n</dd>\n<dt><a href=\"#master\">master()</a></dt>\n<dd><p>Set master object</p>\n</dd>\n</dl>\n\n<a name=\"StrokeCollection\"></a>\n\n## StrokeCollection\n{Object}   StrokeCollection                 Stroke properties of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| [type] | <code>string</code> | <code>&quot;&#x27;solid&#x27;&quot;</code> | Stroke type; solid | dashed |\n| [segments] | <code>Array.&lt;number&gt;</code> | <code>[5, 5]</code> | Dashed line segment distance(s) |\n| [alpha] | <code>number</code> | <code>1</code> | Alpha (transparency); number/decimal |\n| [width] | <code>number</code> | <code>2</code> | Thickness of stroke |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n\n<a name=\"new_StrokeCollection_new\"></a>\n\n### new StrokeCollection()\nCreate a stroke collection\n\n<a name=\"color\"></a>\n\n## color(value)\nSet color value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | RGB color value |\n\n<a name=\"color\"></a>\n\n## color() \u21d2 <code>string</code>\nGet color value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - RGB color value  \n**Access**: public  \n<a name=\"type\"></a>\n\n## type(value)\nSet type\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Type: (0) Solid or (1) Dashed |\n\n<a name=\"type\"></a>\n\n## type() \u21d2 <code>number</code>\nGet type\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Type: (0) Solid or (1) Dashed  \n**Read only**: true  \n<a name=\"segments\"></a>\n\n## segments(value)\nSet segment value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array</code> | Dashed line segment distance(s) |\n\n<a name=\"segments\"></a>\n\n## segments() \u21d2 <code>Array</code>\nGet segment value\n\n**Kind**: global function  \n**Returns**: <code>Array</code> - Dashed line segment distance(s)  \n**Read only**: true  \n<a name=\"width\"></a>\n\n## width(value)\nSet width value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Thickness of stroke |\n\n<a name=\"width\"></a>\n\n## width() \u21d2 <code>number</code>\nGet width value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Thickness of stroke  \n**Read only**: true  \n<a name=\"master\"></a>\n\n## master()\nSet master object\n\n**Kind**: global function  \n**Access**: public  \n",
    "Conic": "## Classes\n\n<dl>\n<dt><a href=\"#Conic\">Conic</a></dt>\n<dd><p>{Object} Conic                              Conic gradient object type and properties</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#angle\">angle(value)</a></dt>\n<dd><p>Set angle property</p>\n</dd>\n<dt><a href=\"#angle\">angle()</a> \u21d2 <code>Angle</code></dt>\n<dd><p>Set angle property</p>\n</dd>\n<dt><a href=\"#point\">point(value)</a></dt>\n<dd><p>Set point</p>\n</dd>\n<dt><a href=\"#point\">point()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get point</p>\n</dd>\n<dt><a href=\"#stops\">stops(values)</a></dt>\n<dd><p>Set color stops</p>\n</dd>\n<dt><a href=\"#stops\">stops()</a> \u21d2 <code>Array.&lt;Stop&gt;</code></dt>\n<dd><p>Get color stops</p>\n</dd>\n</dl>\n\n<a name=\"Conic\"></a>\n\n## Conic\n{Object} Conic                              Conic gradient object type and properties\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| angle | <code>number</code> | Angle in radians |\n| stops | <code>Array.&lt;Stop&gt;</code> | Array of color stops |\n\n<a name=\"new_Conic_new\"></a>\n\n### new Conic()\nCreate a Conic gradient object type\n\n<a name=\"angle\"></a>\n\n## angle(value)\nSet angle property\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Angle</code> | Angle object |\n\n<a name=\"angle\"></a>\n\n## angle() \u21d2 <code>Angle</code>\nSet angle property\n\n**Kind**: global function  \n**Returns**: <code>Angle</code> - Angle object  \n**Read only**: true  \n<a name=\"point\"></a>\n\n## point(value)\nSet point\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Point |\n\n<a name=\"point\"></a>\n\n## point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Point  \n**Read only**: true  \n<a name=\"stops\"></a>\n\n## stops(values)\nSet color stops\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| values | <code>Array.&lt;Stop&gt;</code> | Color stops |\n\n<a name=\"stops\"></a>\n\n## stops() \u21d2 <code>Array.&lt;Stop&gt;</code>\nGet color stops\n\n**Kind**: global function  \n**Returns**: <code>Array.&lt;Stop&gt;</code> - Color stops  \n**Read only**: true  \n",
    "OptionsCollection": "## Classes\n\n<dl>\n<dt><a href=\"#OptionsCollection\">OptionsCollection</a></dt>\n<dd><p>{Object}  OptionsCollection                 Options for shapes, lines, and groups</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#shadow\">shadow(value)</a></dt>\n<dd><p>Set shadow value</p>\n</dd>\n<dt><a href=\"#shadow\">shadow()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get shadow value</p>\n</dd>\n<dt><a href=\"#border\">border(value)</a></dt>\n<dd><p>Set border value</p>\n</dd>\n<dt><a href=\"#border\">border()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get border value</p>\n</dd>\n<dt><a href=\"#axis\">axis(value)</a></dt>\n<dd><p>Set axis value</p>\n</dd>\n<dt><a href=\"#axis\">axis()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get axis value</p>\n</dd>\n<dt><a href=\"#coordinates\">coordinates(value)</a></dt>\n<dd><p>Set coordinates value</p>\n</dd>\n<dt><a href=\"#coordinates\">coordinates()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get coordinates value</p>\n</dd>\n<dt><a href=\"#controlPoints\">controlPoints(value)</a></dt>\n<dd><p>Set control points value</p>\n</dd>\n<dt><a href=\"#controlPoints\">controlPoints()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get control points value</p>\n</dd>\n</dl>\n\n<a name=\"OptionsCollection\"></a>\n\n## OptionsCollection\n{Object}  OptionsCollection                 Options for shapes, lines, and groups\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [shadow] | <code>boolean</code> | <code>false</code> | Display shadow |\n| [border] | <code>boolean</code> | <code>false</code> | Display border |\n| [axis] | <code>boolean</code> | <code>false</code> | Display axis |\n| [points] | <code>boolean</code> | <code>false</code> | Display points |\n| [coordinates] | <code>boolean</code> | <code>false</code> | Display coordinates |\n| [controlPoints] | <code>boolean</code> | <code>false</code> | Display control points |\n| [shadow] | <code>boolean</code> | <code>false</code> | Display shadow |\n\n<a name=\"new_OptionsCollection_new\"></a>\n\n### new OptionsCollection(shadow, border, axis, points, coordinates)\nCreate an options collection\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| shadow | <code>boolean</code> | Show shadow |\n| border | <code>boolean</code> | Show border |\n| axis | <code>boolean</code> | Show axis |\n| points | <code>boolean</code> | Show points |\n| coordinates | <code>boolean</code> | Show coordinates |\n\n<a name=\"shadow\"></a>\n\n## shadow(value)\nSet shadow value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Shadow; true | false |\n\n<a name=\"shadow\"></a>\n\n## shadow() \u21d2 <code>boolean</code>\nGet shadow value\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Shadow; true | false  \n**Read only**: true  \n<a name=\"border\"></a>\n\n## border(value)\nSet border value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Border; true | false |\n\n<a name=\"border\"></a>\n\n## border() \u21d2 <code>boolean</code>\nGet border value\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Border; true | false  \n**Read only**: true  \n<a name=\"axis\"></a>\n\n## axis(value)\nSet axis value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Axis; true | false |\n\n<a name=\"axis\"></a>\n\n## axis() \u21d2 <code>boolean</code>\nGet axis value\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Axis; true | false  \n**Read only**: true  \n<a name=\"coordinates\"></a>\n\n## coordinates(value)\nSet coordinates value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Coordinates; true | false |\n\n<a name=\"coordinates\"></a>\n\n## coordinates() \u21d2 <code>boolean</code>\nGet coordinates value\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Coordinates; true | false  \n**Read only**: true  \n<a name=\"controlPoints\"></a>\n\n## controlPoints(value)\nSet control points value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Control points; true | false |\n\n<a name=\"controlPoints\"></a>\n\n## controlPoints() \u21d2 <code>boolean</code>\nGet control points value\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Control points; true | false  \n**Read only**: true  \n",
    "Hwb": "## Classes\n\n<dl>\n<dt><a href=\"#Hwb\">Hwb</a></dt>\n<dd><p>{Object} Hwb \t\t\t\t\t\t\t\tHWB color model</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#hue\">hue(hue)</a></dt>\n<dd><p>Sets the hue value</p>\n</dd>\n<dt><a href=\"#hue\">hue()</a> \u21d2 <code>number</code></dt>\n<dd><p>Gets the hue value</p>\n</dd>\n<dt><a href=\"#whiteness\">whiteness(whiteness)</a></dt>\n<dd><p>Sets the whiteness value</p>\n</dd>\n<dt><a href=\"#whiteness\">whiteness()</a> \u21d2 <code>number</code></dt>\n<dd><p>Gets the whiteness value</p>\n</dd>\n<dt><a href=\"#blackness\">blackness(blackness)</a></dt>\n<dd><p>Sets the blackness value</p>\n</dd>\n<dt><a href=\"#blackness\">blackness()</a> \u21d2 <code>number</code></dt>\n<dd><p>Gets the blackness value</p>\n</dd>\n<dt><a href=\"#_isDegree\">_isDegree(value)</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Returns whether the passed value is a degree</p>\n</dd>\n<dt><a href=\"#toCss\">toCss()</a> \u21d2 <code>string</code></dt>\n<dd><p>Returns a CSS compatible <color> string value</p>\n</dd>\n</dl>\n\n<a name=\"Hwb\"></a>\n\n## Hwb\n{Object} Hwb \t\t\t\t\t\t\t\tHWB color model\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [hue] | <code>number</code> | <code>0</code> | Hue value; 0 - 360 (degree) |\n| [whiteness] | <code>number</code> | <code>0</code> | Whiteness value; 0 - 1 (decimal) |\n| [blackness] | <code>number</code> | <code>0</code> | Blackness value; 0 - 1 (decimal) |\n| [alpha] | <code>number</code> | <code>1</code> | Alpha value; 0 - 1 (decimal) |\n\n<a name=\"new_Hwb_new\"></a>\n\n### new Hwb(hue, whiteness, blackness, alpha)\nCreate an HWB color Model\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| hue | <code>number</code> | Hue value |\n| whiteness | <code>number</code> | Whiteness value |\n| blackness | <code>number</code> | Blackness value |\n| alpha | <code>number</code> | Alpha value |\n\n<a name=\"hue\"></a>\n\n## hue(hue)\nSets the hue value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| hue | <code>number</code> | Hue value; 0 - 360 |\n\n<a name=\"hue\"></a>\n\n## hue() \u21d2 <code>number</code>\nGets the hue value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Hue value; 0 - 360  \n**Access**: public  \n<a name=\"whiteness\"></a>\n\n## whiteness(whiteness)\nSets the whiteness value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| whiteness | <code>number</code> | Whiteness value; 0 - 1 |\n\n<a name=\"whiteness\"></a>\n\n## whiteness() \u21d2 <code>number</code>\nGets the whiteness value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Whiteness value; 0 - 1  \n**Access**: public  \n<a name=\"blackness\"></a>\n\n## blackness(blackness)\nSets the blackness value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| blackness | <code>number</code> | Blackness value; 0 - 1 |\n\n<a name=\"blackness\"></a>\n\n## blackness() \u21d2 <code>number</code>\nGets the blackness value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Blackness value; 0 - 1  \n**Access**: public  \n<a name=\"_isDegree\"></a>\n\n## \\_isDegree(value) \u21d2 <code>boolean</code>\nReturns whether the passed value is a degree\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - True || False  \n**Prviate**:   \n**See**: [Validation.isDegree](Validation.isDegree)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Degree |\n\n<a name=\"toCss\"></a>\n\n## toCss() \u21d2 <code>string</code>\nReturns a CSS compatible <color> string value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - CSS <color> string  \n**Access**: public  \n",
    "Stroke": "## Classes\n\n<dl>\n<dt><a href=\"#Stroke\">Stroke</a></dt>\n<dd><p>{Object}   Stroke                           Stroke properties of associated object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#type\">type(value)</a></dt>\n<dd><p>Set type</p>\n</dd>\n<dt><a href=\"#type\">type()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get type</p>\n</dd>\n<dt><a href=\"#segments\">segments(value)</a></dt>\n<dd><p>Set segment value</p>\n</dd>\n<dt><a href=\"#segments\">segments()</a> \u21d2 <code>Array</code></dt>\n<dd><p>Get segment value</p>\n</dd>\n<dt><a href=\"#color\">color(value)</a></dt>\n<dd><p>Set color value</p>\n</dd>\n<dt><a href=\"#color\">color()</a> \u21d2 <code>Object</code></dt>\n<dd><p>Get color value</p>\n</dd>\n<dt><a href=\"#width\">width(value)</a></dt>\n<dd><p>Set width value</p>\n</dd>\n<dt><a href=\"#width\">width()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get width value</p>\n</dd>\n</dl>\n\n<a name=\"Stroke\"></a>\n\n## Stroke\n{Object}   Stroke                           Stroke properties of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| [type] | <code>string</code> | <code>&quot;&#x27;solid&#x27;&quot;</code> | Stroke type; solid | dashed |\n| [segments] | <code>Array.&lt;number&gt;</code> | <code>[5, 5]</code> | Dashed line segment distance(s); <array<numbers>> |\n| [width] | <code>number</code> | <code>2</code> | Thickness of stroke |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n\n<a name=\"new_Stroke_new\"></a>\n\n### new Stroke(color, type, segments, alpha, width)\nCreate a stroke\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| color | <code>Object</code> | RGB color value |\n| type | <code>number</code> | Stroke type |\n| segments | <code>Array.&lt;number&gt;</code> | Dashed line segment distance(s) |\n| alpha | <code>number</code> | Alpha value; number/decimal |\n| width | <code>number</code> | Thickness of stroke |\n\n<a name=\"type\"></a>\n\n## type(value)\nSet type\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Type: (0) Solid or (1) Dashed |\n\n<a name=\"type\"></a>\n\n## type() \u21d2 <code>number</code>\nGet type\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Type: (0) Solid or (1) Dashed  \n**Read only**: true  \n<a name=\"segments\"></a>\n\n## segments(value)\nSet segment value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array</code> | Dashed line segment distance(s) |\n\n<a name=\"segments\"></a>\n\n## segments() \u21d2 <code>Array</code>\nGet segment value\n\n**Kind**: global function  \n**Returns**: <code>Array</code> - Dashed line segment distance(s)  \n**Read only**: true  \n<a name=\"color\"></a>\n\n## color(value)\nSet color value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | Color model; Rgb, Hsl, Hwb |\n\n<a name=\"color\"></a>\n\n## color() \u21d2 <code>Object</code>\nGet color value\n\n**Kind**: global function  \n**Returns**: <code>Object</code> - Color model; Rgb, Hsl, Hwb  \n**Access**: public  \n<a name=\"width\"></a>\n\n## width(value)\nSet width value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Thickness of stroke |\n\n<a name=\"width\"></a>\n\n## width() \u21d2 <code>number</code>\nGet width value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Thickness of stroke  \n**Read only**: true  \n",
    "Font": "## Classes\n\n<dl>\n<dt><a href=\"#Font\">Font</a></dt>\n<dd><p>{Object} Font                               Font base class for text objects</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#type\">type(value)</a></dt>\n<dd><p>Set font type</p>\n</dd>\n<dt><a href=\"#type\">type()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get type</p>\n</dd>\n<dt><a href=\"#size\">size(value)</a></dt>\n<dd><p>Set font size</p>\n</dd>\n<dt><a href=\"#size\">size()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get font size</p>\n</dd>\n<dt><a href=\"#weight\">weight(value)</a></dt>\n<dd><p>Set font weight</p>\n</dd>\n<dt><a href=\"#weight\">weight()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get font weight</p>\n</dd>\n<dt><a href=\"#maxWidth\">maxWidth(value)</a></dt>\n<dd><p>Set font&#39;s max width</p>\n</dd>\n<dt><a href=\"#maxWidth\">maxWidth()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get font&#39;s max width</p>\n</dd>\n<dt><a href=\"#offset\">offset()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get font&#39;s offset</p>\n</dd>\n<dt><a href=\"#font\">font(value)</a></dt>\n<dd><p>Set font</p>\n</dd>\n<dt><a href=\"#font\">font()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get font</p>\n</dd>\n</dl>\n\n<a name=\"Font\"></a>\n\n## Font\n{Object} Font                               Font base class for text objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| type | <code>string</code> |  | Font type or face; typography name |\n| [size] | <code>number</code> | <code>24</code> | Size of font; in pixels |\n| [weight] | <code>string</code> | <code>&quot;&#x27;normal&#x27;&quot;</code> | Weight of font |\n| maxWidth | <code>number</code> |  | Font's maximum width |\n| offset | <code>Point</code> |  | Point offset coordinates |\n\n<a name=\"type\"></a>\n\n## type(value)\nSet font type\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Type face; typography name |\n\n<a name=\"type\"></a>\n\n## type() \u21d2 <code>string</code>\nGet type\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Type face; typography name  \n**Read only**: true  \n<a name=\"size\"></a>\n\n## size(value)\nSet font size\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font size |\n\n<a name=\"size\"></a>\n\n## size() \u21d2 <code>number</code>\nGet font size\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Font size  \n**Read only**: true  \n<a name=\"weight\"></a>\n\n## weight(value)\nSet font weight\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font weight |\n\n<a name=\"weight\"></a>\n\n## weight() \u21d2 <code>number</code>\nGet font weight\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Font weight  \n**Read only**: true  \n<a name=\"maxWidth\"></a>\n\n## maxWidth(value)\nSet font's max width\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Max width |\n\n<a name=\"maxWidth\"></a>\n\n## maxWidth() \u21d2 <code>number</code>\nGet font's max width\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Max width  \n**Read only**: true  \n<a name=\"offset\"></a>\n\n## offset() \u21d2 <code>Point</code>\nGet font's offset\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Font's offset; ( x, y )  \n**Access**: public  \n<a name=\"font\"></a>\n\n## font(value)\nSet font\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | CSS style font property syntax |\n\n<a name=\"font\"></a>\n\n## font() \u21d2 <code>string</code>\nGet font\n\n**Kind**: global function  \n**Returns**: <code>string</code> - CSS style font property syntax  \n**Read only**: true  \n",
    "Linear": "## Classes\n\n<dl>\n<dt><a href=\"#Linear\">Linear</a></dt>\n<dd><p>{Object} Linear                             Linear gradient object type and properties</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#start\">start(value)</a></dt>\n<dd><p>Set starting point</p>\n</dd>\n<dt><a href=\"#start\">start()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Set starting point</p>\n</dd>\n<dt><a href=\"#end\">end(value)</a></dt>\n<dd><p>Set ending point</p>\n</dd>\n<dt><a href=\"#end\">end()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Set ending point</p>\n</dd>\n<dt><a href=\"#stops\">stops(values)</a></dt>\n<dd><p>Set color stops</p>\n</dd>\n<dt><a href=\"#stops\">stops()</a> \u21d2 <code>Array.&lt;Stop&gt;</code></dt>\n<dd><p>Get color stops</p>\n</dd>\n</dl>\n\n<a name=\"Linear\"></a>\n\n## Linear\n{Object} Linear                             Linear gradient object type and properties\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| start | <code>Point</code> | X & Y axis coordinates (start) |\n| end | <code>Point</code> | X & Y axis coordinates (end) |\n| stops | <code>Array.&lt;Stop&gt;</code> | Array of color stops |\n\n<a name=\"new_Linear_new\"></a>\n\n### new Linear()\nCreate a Linear gradient object type\n\n<a name=\"start\"></a>\n\n## start(value)\nSet starting point\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Starting point |\n\n<a name=\"start\"></a>\n\n## start() \u21d2 <code>Point</code>\nSet starting point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Starting point  \n**Read only**: true  \n<a name=\"end\"></a>\n\n## end(value)\nSet ending point\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Ending point |\n\n<a name=\"end\"></a>\n\n## end() \u21d2 <code>Point</code>\nSet ending point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Ending point  \n**Read only**: true  \n<a name=\"stops\"></a>\n\n## stops(values)\nSet color stops\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| values | <code>Array.&lt;Stop&gt;</code> | Color stops |\n\n<a name=\"stops\"></a>\n\n## stops() \u21d2 <code>Array.&lt;Stop&gt;</code>\nGet color stops\n\n**Kind**: global function  \n**Returns**: <code>Array.&lt;Stop&gt;</code> - Color stops  \n**Read only**: true  \n",
    "Angle": "## Classes\n\n<dl>\n<dt><a href=\"#Angle\">Angle</a></dt>\n<dd><p>{Object}  Angle                             Angle properties of associated object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#start\">start(value)</a></dt>\n<dd><p>Set start angle</p>\n</dd>\n<dt><a href=\"#start\">start()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get start angle</p>\n</dd>\n<dt><a href=\"#end\">end(value)</a></dt>\n<dd><p>Set end angle</p>\n</dd>\n<dt><a href=\"#end\">end()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get end angle</p>\n</dd>\n<dt><a href=\"#clockwise\">clockwise(value)</a></dt>\n<dd><p>Set clockwise</p>\n</dd>\n<dt><a href=\"#clockwise\">clockwise()</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Get clockwise</p>\n</dd>\n<dt><a href=\"#startInRadians\">startInRadians()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get start angle in radians</p>\n</dd>\n<dt><a href=\"#endInRadians\">endInRadians()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get end angle in radians</p>\n</dd>\n</dl>\n\n<a name=\"Angle\"></a>\n\n## Angle\n{Object}  Angle                             Angle properties of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [start] | <code>number</code> | <code>0</code> | The start of the angle, in radians; measured from the positive x-axis |\n| [end] | <code>number</code> | <code>360</code> | The end of the angle, in radians; measured from the positive x-axis |\n| [clockwise] | <code>boolean</code> | <code>true</code> | Path arc clockwise |\n\n<a name=\"new_Angle_new\"></a>\n\n### new Angle(start, end, clockwise)\nCreate an angle\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| start | <code>number</code> | The angle at which the arc starts in degrees, measured from the positive x-axis |\n| end | <code>number</code> | The angle at which the arc ends in degrees, measured from the positive x-axis |\n| clockwise | <code>boolean</code> | Draws the arc clockwise between the start and end angles |\n\n<a name=\"start\"></a>\n\n## start(value)\nSet start angle\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Start angle; in degrees |\n\n<a name=\"start\"></a>\n\n## start() \u21d2 <code>number</code>\nGet start angle\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Start value; in degrees  \n**Read only**: true  \n<a name=\"end\"></a>\n\n## end(value)\nSet end angle\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | End angle; in degrees |\n\n<a name=\"end\"></a>\n\n## end() \u21d2 <code>number</code>\nGet end angle\n\n**Kind**: global function  \n**Returns**: <code>number</code> - End angle; in degrees  \n**Read only**: true  \n<a name=\"clockwise\"></a>\n\n## clockwise(value)\nSet clockwise\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Clockwise; true | false |\n\n<a name=\"clockwise\"></a>\n\n## clockwise() \u21d2 <code>boolean</code>\nGet clockwise\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - Clockwise; true | false  \n**Read only**: true  \n<a name=\"startInRadians\"></a>\n\n## startInRadians() \u21d2 <code>number</code>\nGet start angle in radians\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Start value; to radians  \n**Read only**: true  \n<a name=\"endInRadians\"></a>\n\n## endInRadians() \u21d2 <code>number</code>\nGet end angle in radians\n\n**Kind**: global function  \n**Returns**: <code>number</code> - End value; in radians  \n**Read only**: true  \n",
    "Circle": "## Classes\n\n<dl>\n<dt><a href=\"#Circle\">Circle</a></dt>\n<dd><p>{Object} Circle                             Circle object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#point\">point(value)</a></dt>\n<dd><p>Set point</p>\n</dd>\n<dt><a href=\"#point\">point()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get point</p>\n</dd>\n<dt><a href=\"#x\">x(value)</a></dt>\n<dd><p>Set x-axis value</p>\n</dd>\n<dt><a href=\"#x\">x()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get x-axis value</p>\n</dd>\n<dt><a href=\"#y\">y(value)</a></dt>\n<dd><p>Set the y-axis value</p>\n</dd>\n<dt><a href=\"#y\">y()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get y-axis value</p>\n</dd>\n<dt><a href=\"#radius\">radius(value)</a></dt>\n<dd><p>Set radius value</p>\n</dd>\n<dt><a href=\"#radius\">radius()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get radius value</p>\n</dd>\n<dt><a href=\"#angle\">angle()</a> \u21d2 <code>Angle</code></dt>\n<dd><p>Get angle properties</p>\n</dd>\n<dt><a href=\"#stroke\">stroke()</a> \u21d2 <code>Stroke</code></dt>\n<dd><p>Get stroke properties</p>\n</dd>\n<dt><a href=\"#fill\">fill()</a> \u21d2 <code>Fill</code></dt>\n<dd><p>Get fill properties</p>\n</dd>\n<dt><a href=\"#shadow\">shadow()</a> \u21d2 <code>Shadow</code></dt>\n<dd><p>Get shadow properties</p>\n</dd>\n<dt><a href=\"#canvas\">canvas(value)</a></dt>\n<dd><p>Set canvas value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get canvas value</p>\n</dd>\n<dt><a href=\"#anchor\">anchor()</a> \u21d2 <code>Anchor</code></dt>\n<dd><p>Get anchor</p>\n</dd>\n<dt><a href=\"#options\">options()</a> \u21d2 <code>Options</code></dt>\n<dd><p>Get options properties</p>\n</dd>\n<dt><a href=\"#area\">area()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get area of this object</p>\n</dd>\n<dt><a href=\"#diameter\">diameter()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get diameter of circle</p>\n</dd>\n<dt><a href=\"#center\">center()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get center of this object</p>\n</dd>\n<dt><a href=\"#circumference\">circumference()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get circumference of circle</p>\n</dd>\n<dt><a href=\"#isThere\">isThere(circle)</a> \u21d2 <code>boolean</code></dt>\n<dd><p>Check whether the passed object is already present</p>\n</dd>\n<dt><a href=\"#fillColorCycle\">fillColorCycle(progress, start, end, [max])</a></dt>\n<dd><p>Cycle colors for fill</p>\n</dd>\n<dt><a href=\"#gradientColorCycle\">gradientColorCycle(progress, start, end, stop, [max])</a></dt>\n<dd><p>Cycle colors for gradient</p>\n</dd>\n<dt><a href=\"#move\">move(degree, distance, [clear])</a></dt>\n<dd><p>Move this object</p>\n</dd>\n<dt><a href=\"#rotate\">rotate(degree, [clear])</a></dt>\n<dd><p>Rotate this object</p>\n</dd>\n<dt><a href=\"#showCordinates\">showCordinates([offset], [fontSize])</a></dt>\n<dd><p>Shows coordinates of this object</p>\n</dd>\n<dt><a href=\"#strokeColorCycle\">strokeColorCycle(start, end, progress, [max])</a></dt>\n<dd><p>Cycle colors for stroke</p>\n</dd>\n<dt><a href=\"#draw\">draw(canvas)</a></dt>\n<dd><p>Draw this object</p>\n</dd>\n<dt><a href=\"#redraw\">redraw(canvas, point, [clear])</a></dt>\n<dd><p>Redraw this object</p>\n</dd>\n</dl>\n\n<a name=\"Circle\"></a>\n\n## Circle\n{Object} Circle                             Circle object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| point | <code>Point</code> |  | X & Y axis coordinates |\n| [radius] | <code>number</code> | <code>25</code> | Radius of circle |\n| angle | <code>Angle</code> |  | Angle properties |\n| stroke | <code>Stroke</code> |  | Stroke properties |\n| fill | <code>Fill</code> |  | Fill properties |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n| canvas | <code>HTMLCanvasElement</code> |  | 2D canvas context |\n\n<a name=\"new_Circle_new\"></a>\n\n### new Circle()\nCreate a Circle object\n\n<a name=\"point\"></a>\n\n## point(value)\nSet point\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.point](discrete.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"point\"></a>\n\n## point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [discrete.point](discrete.point)  \n<a name=\"x\"></a>\n\n## x(value)\nSet x-axis value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.pointX](discrete.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"x\"></a>\n\n## x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [discrete.pointX](discrete.pointX)  \n<a name=\"y\"></a>\n\n## y(value)\nSet the y-axis value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.pointY](discrete.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"y\"></a>\n\n## y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [discrete.pointY](discrete.pointY)  \n<a name=\"radius\"></a>\n\n## radius(value)\nSet radius value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Radius of circle |\n\n<a name=\"radius\"></a>\n\n## radius() \u21d2 <code>number</code>\nGet radius value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Radius of circle  \n**Read only**: true  \n<a name=\"angle\"></a>\n\n## angle() \u21d2 <code>Angle</code>\nGet angle properties\n\n**Kind**: global function  \n**Returns**: <code>Angle</code> - Angle properties  \n**Access**: public  \n<a name=\"stroke\"></a>\n\n## stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: global function  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"fill\"></a>\n\n## fill() \u21d2 <code>Fill</code>\nGet fill properties\n\n**Kind**: global function  \n**Returns**: <code>Fill</code> - Fill properties  \n**Access**: public  \n<a name=\"shadow\"></a>\n\n## shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: global function  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"canvas\"></a>\n\n## canvas(value)\nSet canvas value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.canvas](discrete.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"canvas\"></a>\n\n## canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [discrete.canvas](discrete.canvas)  \n<a name=\"anchor\"></a>\n\n## anchor() \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: global function  \n**Returns**: <code>Anchor</code> - Anchor properties  \n**Access**: public  \n<a name=\"options\"></a>\n\n## options() \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: global function  \n**Returns**: <code>Options</code> - Options properties  \n**Access**: public  \n<a name=\"area\"></a>\n\n## area() \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Area of circle  \n**Read only**: true  \n<a name=\"diameter\"></a>\n\n## diameter() \u21d2 <code>number</code>\nGet diameter of circle\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Diameter of circle  \n**Read only**: true  \n<a name=\"center\"></a>\n\n## center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Point coordinates  \n**Read only**: true  \n<a name=\"circumference\"></a>\n\n## circumference() \u21d2 <code>number</code>\nGet circumference of circle\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Circumference of circle  \n**Read only**: true  \n<a name=\"isThere\"></a>\n\n## isThere(circle) \u21d2 <code>boolean</code>\nCheck whether the passed object is already present\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - True || False  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| circle | [<code>Circle</code>](#Circle) | Object to validate |\n\n<a name=\"fillColorCycle\"></a>\n\n## fillColorCycle(progress, start, end, [max])\nCycle colors for fill\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.color.cycle.fill](Utilities.color.cycle.fill)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| progress | <code>number</code> |  | Progress time unit between; 0.00 - 1.00 |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"gradientColorCycle\"></a>\n\n## gradientColorCycle(progress, start, end, stop, [max])\nCycle colors for gradient\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.color.cycle.gradient](Utilities.color.cycle.gradient)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| progress | <code>number</code> |  | Progress time unit between; 0.00 - 1.00 |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| stop | <code>number</code> |  | Gradient color stop |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"move\"></a>\n\n## move(degree, distance, [clear])\nMove this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Direction to move; in degrees |\n| distance | <code>number</code> |  | Distance to move |\n| [clear] | <code>boolean</code> | <code>true</code> | Clear canvas during each movement |\n\n<a name=\"rotate\"></a>\n\n## rotate(degree, [clear])\nRotate this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"showCordinates\"></a>\n\n## showCordinates([offset], [fontSize])\nShows coordinates of this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of coordinates y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Coordinates font size |\n\n<a name=\"strokeColorCycle\"></a>\n\n## strokeColorCycle(start, end, progress, [max])\nCycle colors for stroke\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.color.cycle.stroke](Utilities.color.cycle.stroke)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| progress | <code>number</code> |  | Progress time unit; 0.00 - 1.00 |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"draw\"></a>\n\n## draw(canvas)\nDraw this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n<a name=\"redraw\"></a>\n\n## redraw(canvas, point, [clear])\nRedraw this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| canvas | <code>string</code> |  | Canvas Id |\n| point | <code>Point</code> |  | Point of new location |\n| [clear] | <code>boolean</code> | <code>true</code> | Clear canvas during each redraw |\n\n",
    "Stop": "## Classes\n\n<dl>\n<dt><a href=\"#Stop\">Stop</a></dt>\n<dd><p>{Object} Stop                               Color stop properties for associated array(s)</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#offset\">offset(value)</a></dt>\n<dd><p>Set offset value</p>\n</dd>\n<dt><a href=\"#offset\">offset()</a> \u21d2 <code>number</code></dt>\n<dd><p>Get offset value</p>\n</dd>\n<dt><a href=\"#color\">color(value)</a></dt>\n<dd><p>Set color value</p>\n</dd>\n<dt><a href=\"#color\">color()</a> \u21d2 <code>Object</code></dt>\n<dd><p>Get color value</p>\n</dd>\n</dl>\n\n<a name=\"Stop\"></a>\n\n## Stop\n{Object} Stop                               Color stop properties for associated array(s)\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| offset | <code>number</code> |  | Representation of the color stop position; 0 = start, & 1 = end |\n| [color] | <code>string</code> | <code>&quot;&lt;Rgb&gt;&quot;</code> | Color model & value |\n\n<a name=\"new_Stop_new\"></a>\n\n### new Stop()\nCreate a color stop\n\n<a name=\"offset\"></a>\n\n## offset(value)\nSet offset value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Offset value |\n\n<a name=\"offset\"></a>\n\n## offset() \u21d2 <code>number</code>\nGet offset value\n\n**Kind**: global function  \n**Returns**: <code>number</code> - Offset value  \n**Read only**: true  \n<a name=\"color\"></a>\n\n## color(value)\nSet color value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | Color model; Rgb, Hsl, Hwb |\n\n<a name=\"color\"></a>\n\n## color() \u21d2 <code>Object</code>\nGet color value\n\n**Kind**: global function  \n**Returns**: <code>Object</code> - Color model; Rgb, Hsl, Hwb  \n**Access**: public  \n",
    "Radial": "## Classes\n\n<dl>\n<dt><a href=\"#Radial\">Radial</a></dt>\n<dd><p>{Object} Radial                             Radial gradient object type and properties</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#start\">start(value)</a></dt>\n<dd><p>Set starting point</p>\n</dd>\n<dt><a href=\"#start\">start()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Set starting point</p>\n</dd>\n<dt><a href=\"#startRadius\">startRadius(value)</a></dt>\n<dd><p>Set starting radius</p>\n</dd>\n<dt><a href=\"#startRadius\">startRadius()</a> \u21d2 <code>Number</code></dt>\n<dd><p>Set starting radius</p>\n</dd>\n<dt><a href=\"#end\">end(value)</a></dt>\n<dd><p>Set ending point</p>\n</dd>\n<dt><a href=\"#end\">end()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Set ending point</p>\n</dd>\n<dt><a href=\"#endRadius\">endRadius(value)</a></dt>\n<dd><p>Set ending radius</p>\n</dd>\n<dt><a href=\"#endRadius\">endRadius()</a> \u21d2 <code>Number</code></dt>\n<dd><p>Set ending radius</p>\n</dd>\n<dt><a href=\"#stops\">stops(value)</a></dt>\n<dd><p>Set color stops</p>\n</dd>\n<dt><a href=\"#stops\">stops()</a> \u21d2 <code>Array.&lt;Stop&gt;</code></dt>\n<dd><p>Get color stops</p>\n</dd>\n</dl>\n\n<a name=\"Radial\"></a>\n\n## Radial\n{Object} Radial                             Radial gradient object type and properties\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| start | <code>Point</code> | X & Y axis coordinates (start) |\n| startRadius | <code>Number</code> | Starting radius of linear gradient |\n| end | <code>Point</code> | X & Y axis coordinates (end) |\n| endRadius | <code>Number</code> | Ending radius of linear gradient gradient |\n| stops | <code>Array.&lt;Stop&gt;</code> | Array of color stops |\n\n<a name=\"new_Radial_new\"></a>\n\n### new Radial()\nCreate a Radial gradient object type and properties\n\n<a name=\"start\"></a>\n\n## start(value)\nSet starting point\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Starting point |\n\n<a name=\"start\"></a>\n\n## start() \u21d2 <code>Point</code>\nSet starting point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Starting point  \n**Read only**: true  \n<a name=\"startRadius\"></a>\n\n## startRadius(value)\nSet starting radius\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Number</code> | Starting radius |\n\n<a name=\"startRadius\"></a>\n\n## startRadius() \u21d2 <code>Number</code>\nSet starting radius\n\n**Kind**: global function  \n**Returns**: <code>Number</code> - Starting radius  \n**Read only**: true  \n<a name=\"end\"></a>\n\n## end(value)\nSet ending point\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Ending point |\n\n<a name=\"end\"></a>\n\n## end() \u21d2 <code>Point</code>\nSet ending point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Ending point  \n**Read only**: true  \n<a name=\"endRadius\"></a>\n\n## endRadius(value)\nSet ending radius\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Number</code> | Ending radius |\n\n<a name=\"endRadius\"></a>\n\n## endRadius() \u21d2 <code>Number</code>\nSet ending radius\n\n**Kind**: global function  \n**Returns**: <code>Number</code> - Ending radius  \n**Read only**: true  \n<a name=\"stops\"></a>\n\n## stops(value)\nSet color stops\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array.&lt;Stop&gt;</code> | Color stops |\n\n<a name=\"stops\"></a>\n\n## stops() \u21d2 <code>Array.&lt;Stop&gt;</code>\nGet color stops\n\n**Kind**: global function  \n**Returns**: <code>Array.&lt;Stop&gt;</code> - Color stops  \n**Read only**: true  \n",
    "Line": "## Classes\n\n<dl>\n<dt><a href=\"#Line\">Line</a></dt>\n<dd><p>{Object} Line                               Line object</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#start\">start(value)</a></dt>\n<dd><p>Set starting point</p>\n</dd>\n<dt><a href=\"#start\">start()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Set starting point</p>\n</dd>\n<dt><a href=\"#end\">end(value)</a></dt>\n<dd><p>Set ending point</p>\n</dd>\n<dt><a href=\"#end\">end()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Set ending point</p>\n</dd>\n<dt><a href=\"#stroke\">stroke()</a> \u21d2 <code>Stroke</code></dt>\n<dd><p>Get stroke properties</p>\n</dd>\n<dt><a href=\"#shadow\">shadow()</a> \u21d2 <code>Shadow</code></dt>\n<dd><p>Get shadow properties</p>\n</dd>\n<dt><a href=\"#lineCap\">lineCap(value)</a></dt>\n<dd><p>Set line cap</p>\n</dd>\n<dt><a href=\"#lineCap\">lineCap()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get line cap</p>\n</dd>\n<dt><a href=\"#canvas\">canvas(value)</a></dt>\n<dd><p>Set canvas value</p>\n</dd>\n<dt><a href=\"#canvas\">canvas()</a> \u21d2 <code>string</code></dt>\n<dd><p>Get canvas value</p>\n</dd>\n<dt><a href=\"#options\">options()</a> \u21d2 <code>Options</code></dt>\n<dd><p>Get options properties</p>\n</dd>\n<dt><a href=\"#controlPoints\">controlPoints()</a> \u21d2 <code>ControlPoints</code></dt>\n<dd><p>Get control point properties</p>\n</dd>\n<dt><a href=\"#center\">center()</a> \u21d2 <code>Point</code></dt>\n<dd><p>Get center of this object</p>\n</dd>\n<dt><a href=\"#+_setPath\">#_setPath()</a></dt>\n<dd><p>Set line&#39;s path</p>\n</dd>\n<dt><a href=\"#isThere\">isThere(line)</a></dt>\n<dd><p>Check whether the passed object is already present</p>\n</dd>\n<dt><a href=\"#curve\">curve(p0, p1, p2, p3)</a></dt>\n<dd><p>Set control points for bezier curve</p>\n</dd>\n<dt><a href=\"#drawPoints\">drawPoints()</a></dt>\n<dd><p>Draws start &amp; end points</p>\n</dd>\n<dt><a href=\"#fillColorCycle\">fillColorCycle(progress, start, end, [max])</a></dt>\n<dd><p>Cycle colors for fill</p>\n</dd>\n<dt><a href=\"#move\">move(degree, distance, [clear])</a></dt>\n<dd><p>Move this object</p>\n</dd>\n<dt><a href=\"#rotate\">rotate(degree, [anchor], [clear])</a></dt>\n<dd><p>Rotate this object</p>\n</dd>\n<dt><a href=\"#showControlPoints\">showControlPoints([offset], [fontSize])</a></dt>\n<dd><p>Show control points for this object</p>\n</dd>\n<dt><a href=\"#showCoordinates\">showCoordinates([offset], [fontSize])</a></dt>\n<dd><p>Shows coordinates of this object</p>\n</dd>\n<dt><a href=\"#strokeColorCycle\">strokeColorCycle(start, end, progress, [max])</a></dt>\n<dd><p>Cycle colors for stroke</p>\n</dd>\n<dt><a href=\"#draw\">draw(canvas)</a></dt>\n<dd><p>Draw this object</p>\n</dd>\n<dt><a href=\"#redraw\">redraw(canvas, start, end, clear)</a></dt>\n<dd><p>Redraw this object</p>\n</dd>\n</dl>\n\n<a name=\"Line\"></a>\n\n## Line\n{Object} Line                               Line object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>Point</code> |  | X & Y axis coordinates (start) |\n| end | <code>Point</code> |  | X & Y axis coordinates (end) |\n| stroke | <code>Stroke</code> |  | Stroke properties |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n| [lineCap] | <code>string</code> | <code>&quot;&#x27;round&#x27;&quot;</code> | Shape of end points |\n| canvas | <code>HTMLCanvasElement</code> |  | 2D canvas context |\n\n<a name=\"new_Line_new\"></a>\n\n### new Line()\nCreate a Line object\n\n<a name=\"start\"></a>\n\n## start(value)\nSet starting point\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Starting point |\n\n<a name=\"start\"></a>\n\n## start() \u21d2 <code>Point</code>\nSet starting point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Starting point  \n**Access**: public  \n<a name=\"end\"></a>\n\n## end(value)\nSet ending point\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Ending point |\n\n<a name=\"end\"></a>\n\n## end() \u21d2 <code>Point</code>\nSet ending point\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Ending point  \n**Access**: public  \n<a name=\"stroke\"></a>\n\n## stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: global function  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"shadow\"></a>\n\n## shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: global function  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"lineCap\"></a>\n\n## lineCap(value)\nSet line cap\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Line cap |\n\n<a name=\"lineCap\"></a>\n\n## lineCap() \u21d2 <code>string</code>\nGet line cap\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Line cap  \n**Read only**: true  \n<a name=\"canvas\"></a>\n\n## canvas(value)\nSet canvas value\n\n**Kind**: global function  \n**Access**: public  \n**See**: [discrete.canvas](discrete.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"canvas\"></a>\n\n## canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [discrete.canvas](discrete.canvas)  \n<a name=\"options\"></a>\n\n## options() \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: global function  \n**Returns**: <code>Options</code> - Options properties  \n**Access**: public  \n<a name=\"controlPoints\"></a>\n\n## controlPoints() \u21d2 <code>ControlPoints</code>\nGet control point properties\n\n**Kind**: global function  \n**Returns**: <code>ControlPoints</code> - Control points properties  \n**Access**: public  \n<a name=\"center\"></a>\n\n## center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: global function  \n**Returns**: <code>Point</code> - Center point coordinates  \n**Read only**: true  \n<a name=\"+_setPath\"></a>\n\n## #\\_setPath()\nSet line's path\n\n**Kind**: global function  \n**Access**: protected  \n<a name=\"isThere\"></a>\n\n## isThere(line)\nCheck whether the passed object is already present\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| line | [<code>Line</code>](#Line) | Object to validate |\n\n<a name=\"curve\"></a>\n\n## curve(p0, p1, p2, p3)\nSet control points for bezier curve\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| p0 | <code>number</code> | Control point 0 |\n| p1 | <code>number</code> | Control point 1 |\n| p2 | <code>number</code> | Control point 2 |\n| p3 | <code>number</code> | Control point 3 |\n\n<a name=\"drawPoints\"></a>\n\n## drawPoints()\nDraws start & end points\n\n**Kind**: global function  \n**Access**: public  \n<a name=\"fillColorCycle\"></a>\n\n## fillColorCycle(progress, start, end, [max])\nCycle colors for fill\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.color.cycle.fill](Utilities.color.cycle.fill)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| progress | <code>number</code> |  | Progress time unit between; 0.00 - 1.00 |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"move\"></a>\n\n## move(degree, distance, [clear])\nMove this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Direction to move; in degrees |\n| distance | <code>number</code> |  | Distance to move |\n| [clear] | <code>boolean</code> | <code>true</code> | Clear canvas during each movement |\n\n<a name=\"rotate\"></a>\n\n## rotate(degree, [anchor], [clear])\nRotate this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [anchor] | <code>string</code> | <code>&quot;&#x27;center&#x27;&quot;</code> | Anchoring point during rotation |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"showControlPoints\"></a>\n\n## showControlPoints([offset], [fontSize])\nShow control points for this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of control points y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Control points font size |\n\n<a name=\"showCoordinates\"></a>\n\n## showCoordinates([offset], [fontSize])\nShows coordinates of this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of coordinates y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Coordinates font size |\n\n<a name=\"strokeColorCycle\"></a>\n\n## strokeColorCycle(start, end, progress, [max])\nCycle colors for stroke\n\n**Kind**: global function  \n**Access**: public  \n**See**: [Utilities.color.cycle.stroke](Utilities.color.cycle.stroke)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| progress | <code>number</code> |  | Progress time unit; 0.00 - 1.00 |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"draw\"></a>\n\n## draw(canvas)\nDraw this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n<a name=\"redraw\"></a>\n\n## redraw(canvas, start, end, clear)\nRedraw this object\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n| start | <code>Point</code> | Point of new start location |\n| end | <code>Point</code> | Point of new end location |\n| clear | <code>boolean</code> | Clear canvas during each redraw |\n\n"
}