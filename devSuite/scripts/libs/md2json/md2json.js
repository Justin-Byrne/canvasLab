let md2json =
{
    "Texts": "<a name=\"Texts\"></a>\n\n## Texts\n{Array} Texts                               Collection of Text objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n\n* [Texts](#Texts)\n    * [.canvas](#Texts+canvas)\n    * [.canvas](#Texts+canvas) \u21d2 <code>string</code>\n\n<a name=\"Texts+canvas\"></a>\n\n### texts.canvas\nSet canvas value\n\n**Kind**: instance property of [<code>Texts</code>](#Texts)  \n**See**: [combined.canvas](combined.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Texts+canvas\"></a>\n\n### texts.canvas \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance property of [<code>Texts</code>](#Texts)  \n**Returns**: <code>string</code> - Canvas id  \n**See**: [combined.canvas](combined.canvas)  \n",
    "Text": "<a name=\"Text\"></a>\n\n## Text\n{Object} Text                               Text element to render within a canvas element\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| text | <code>string</code> | Text to display |\n| stroke | <code>Stroke</code> | Stroke properties |\n| fill | <code>Fill</code> | Fill properties |\n| shadow | <code>Shadow</code> | Shadow properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n\n* [Text](#Text)\n    * [new Text(point, text, type, size, weight, maxWidth, offset, stroke, fill, shadow, canvas)](#new_Text_new)\n    * [.point](#Text+point)\n    * [.point](#Text+point) \u21d2 <code>Point</code>\n    * [.x](#Text+x)\n    * [.x](#Text+x) \u21d2 <code>number</code>\n    * [.y](#Text+y)\n    * [.y](#Text+y) \u21d2 <code>number</code>\n    * [.text](#Text+text)\n    * [.text](#Text+text) \u21d2 <code>string</code>\n    * [.stroke](#Text+stroke) \u21d2 <code>Stroke</code>\n    * [.fill](#Text+fill) \u21d2 <code>Fill</code>\n    * [.shadow](#Text+shadow) \u21d2 <code>Shadow</code>\n    * [.canvas](#Text+canvas)\n    * [.canvas](#Text+canvas) \u21d2 <code>string</code>\n    * [.options](#Text+options) \u21d2 <code>Options</code>\n    * [.type](#Text+type)\n    * [.type](#Text+type) \u21d2 <code>string</code>\n    * [.size](#Text+size)\n    * [.size](#Text+size) \u21d2 <code>number</code>\n    * [.weight](#Text+weight)\n    * [.weight](#Text+weight) \u21d2 <code>string</code>\n    * [.maxWidth](#Text+maxWidth)\n    * [.maxWidth](#Text+maxWidth) \u21d2 <code>number</code>\n    * [.offset](#Text+offset)\n    * [.offset](#Text+offset) \u21d2 <code>Point</code>\n    * [.font](#Text+font) \u21d2 <code>string</code>\n    * [.drawBorder([offset])](#Text+drawBorder)\n    * [.drawAxis([offset])](#Text+drawAxis)\n    * [.move(degree, distance, [clear])](#Text+move)\n    * [.rotate(degree, [anchor], [clear])](#Text+rotate)\n    * [.draw(canvas)](#Text+draw)\n\n<a name=\"new_Text_new\"></a>\n\n### new Text(point, text, type, size, weight, maxWidth, offset, stroke, fill, shadow, canvas)\nCreate a text object\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| text | <code>string</code> | Text of text object |\n| type | <code>string</code> | Font type |\n| size | <code>number</code> | Font size |\n| weight | <code>string</code> | Font weight |\n| maxWidth | <code>number</code> | Font max width |\n| offset | <code>Point</code> | Text offset |\n| stroke | <code>Stroke</code> | Stroke properties |\n| fill | <code>Fill</code> | Fill Properties |\n| shadow | <code>Shadow</code> | Shadow properties |\n| canvas | <code>string</code> | Canvas Id |\n\n<a name=\"Text+point\"></a>\n\n### text.point\nSet point\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**See**: [discrete.point](discrete.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Text+point\"></a>\n\n### text.point \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**See**: [discrete.point](discrete.point)  \n<a name=\"Text+x\"></a>\n\n### text.x\nSet x-axis value\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**See**: [discrete.pointX](discrete.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Text+x\"></a>\n\n### text.x \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>number</code> - X coordinate value  \n**See**: [discrete.pointX](discrete.pointX)  \n<a name=\"Text+y\"></a>\n\n### text.y\nSet the y-axis value\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**See**: [discrete.pointY](discrete.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Text+y\"></a>\n\n### text.y \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>number</code> - Y coordinate value  \n**See**: [discrete.pointY](discrete.pointY)  \n<a name=\"Text+text\"></a>\n\n### text.text\nSet text\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Text of object |\n\n<a name=\"Text+text\"></a>\n\n### text.text \u21d2 <code>string</code>\nGet text\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>string</code> - Text of object  \n<a name=\"Text+stroke\"></a>\n\n### text.stroke \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n<a name=\"Text+fill\"></a>\n\n### text.fill \u21d2 <code>Fill</code>\nGet fill properties\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>Fill</code> - Fill properties  \n<a name=\"Text+shadow\"></a>\n\n### text.shadow \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n<a name=\"Text+canvas\"></a>\n\n### text.canvas\nSet canvas value\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**See**: [discrete.canvas](discrete.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Text+canvas\"></a>\n\n### text.canvas \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>string</code> - Canvas id  \n**See**: [discrete.canvas](discrete.canvas)  \n<a name=\"Text+options\"></a>\n\n### text.options \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>Options</code> - Options properties  \n<a name=\"Text+type\"></a>\n\n### text.type\nSet font's type\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Font's type |\n\n<a name=\"Text+type\"></a>\n\n### text.type \u21d2 <code>string</code>\nGet font's type\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>string</code> - Font's type  \n<a name=\"Text+size\"></a>\n\n### text.size\nSet font's size\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font's size |\n\n<a name=\"Text+size\"></a>\n\n### text.size \u21d2 <code>number</code>\nGet font's size\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>number</code> - Font's size  \n<a name=\"Text+weight\"></a>\n\n### text.weight\nSet font's weight\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Font's weight |\n\n<a name=\"Text+weight\"></a>\n\n### text.weight \u21d2 <code>string</code>\nGet font's weight\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>string</code> - Font's weight  \n<a name=\"Text+maxWidth\"></a>\n\n### text.maxWidth\nSet font's max width\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font's max width |\n\n<a name=\"Text+maxWidth\"></a>\n\n### text.maxWidth \u21d2 <code>number</code>\nGet font's max width\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>number</code> - Font's max width  \n<a name=\"Text+offset\"></a>\n\n### text.offset\nSet offset\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**See**: [discrete.offset](discrete.offset)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Shadow offset |\n\n<a name=\"Text+offset\"></a>\n\n### text.offset \u21d2 <code>Point</code>\nGet offset\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>Point</code> - Shadow offset  \n**See**: [discrete.offset](discrete.offset)  \n<a name=\"Text+font\"></a>\n\n### text.font \u21d2 <code>string</code>\nGet font\n\n**Kind**: instance property of [<code>Text</code>](#Text)  \n**Returns**: <code>string</code> - CSS style font property syntax  \n<a name=\"Text+drawBorder\"></a>\n\n### text.drawBorder([offset])\nDraws border around this object\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of border's perimeter |\n\n<a name=\"Text+drawAxis\"></a>\n\n### text.drawAxis([offset])\nDraws axis through center of this object\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of axis's edges |\n\n<a name=\"Text+move\"></a>\n\n### text.move(degree, distance, [clear])\nMove this object\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Direction to move; in degrees |\n| distance | <code>number</code> |  | Distance to move |\n| [clear] | <code>boolean</code> | <code>true</code> | Clear canvas during each movement |\n\n<a name=\"Text+rotate\"></a>\n\n### text.rotate(degree, [anchor], [clear])\nRotate this object\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [anchor] | <code>string</code> | <code>&quot;&#x27;center&#x27;&quot;</code> | Anchoring point during rotation |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"Text+draw\"></a>\n\n### text.draw(canvas)\nDraw this object\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Rgb": "## Classes\n\n<dl>\n<dt><a href=\"#Rgb\">Rgb</a></dt>\n<dd><p>{Object} Rgb \t\t\t\t\t\t\t\tRGB color model</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#red\">red(red)</a></dt>\n<dd><p>Sets the red value</p>\n</dd>\n<dt><a href=\"#red\">red(Red)</a></dt>\n<dd><p>Gets the red value</p>\n</dd>\n<dt><a href=\"#green\">green(green)</a></dt>\n<dd><p>Sets the green value</p>\n</dd>\n<dt><a href=\"#green\">green(Green)</a></dt>\n<dd><p>Gets the green value</p>\n</dd>\n<dt><a href=\"#blue\">blue(blue)</a></dt>\n<dd><p>Sets the blue value</p>\n</dd>\n<dt><a href=\"#blue\">blue(Blue)</a></dt>\n<dd><p>Gets the blue value</p>\n</dd>\n<dt><a href=\"#toCss\">toCss()</a> \u21d2 <code>string</code></dt>\n<dd><p>Returns a CSS compatible <color> string value</p>\n</dd>\n</dl>\n\n<a name=\"Rgb\"></a>\n\n## Rgb\n{Object} Rgb \t\t\t\t\t\t\t\tRGB color model\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [red] | <code>number</code> | <code>0</code> | Red value; 0 - 255 |\n| [green] | <code>number</code> | <code>0</code> | Green value; 0 - 255 |\n| [blue] | <code>number</code> | <code>0</code> | Blue value; 0 - 255 |\n| [alpha] | <code>number</code> | <code>1</code> | Alpha value; 0 - 1 (decimal) |\n\n<a name=\"new_Rgb_new\"></a>\n\n### new Rgb(red, green, blue, alpha)\nCreate an RGB color model\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| red | <code>number</code> | Red value |\n| green | <code>number</code> | Green value |\n| blue | <code>number</code> | Blue value |\n| alpha | <code>number</code> | Alpha value |\n\n<a name=\"red\"></a>\n\n## red(red)\nSets the red value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| red | <code>number</code> | Red value; 0 - 255 |\n\n<a name=\"red\"></a>\n\n## red(Red)\nGets the red value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Red | <code>number</code> | value; 0 - 255 |\n\n<a name=\"green\"></a>\n\n## green(green)\nSets the green value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| green | <code>number</code> | Green value; 0 - 255 |\n\n<a name=\"green\"></a>\n\n## green(Green)\nGets the green value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Green | <code>number</code> | value; 0 - 255 |\n\n<a name=\"blue\"></a>\n\n## blue(blue)\nSets the blue value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| blue | <code>number</code> | Blue value; 0 - 255 |\n\n<a name=\"blue\"></a>\n\n## blue(Blue)\nGets the blue value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Blue | <code>number</code> | value; 0 - 255 |\n\n<a name=\"toCss\"></a>\n\n## toCss() \u21d2 <code>string</code>\nReturns a CSS compatible <color> string value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - CSS <color> string  \n**Access**: public  \n",
    "Group": "<a name=\"Group\"></a>\n\n## Group\n{Array} Group                               Collection of Line, Circle, Rectangle & Text objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| lines | <code>Array</code> | Collection of Line objects |\n| circles | <code>Array</code> | Collection of Circle objects |\n| rectangles | <code>Array</code> | Collection of Rectangle objects |\n| text | <code>Array</code> | Collection of Text objects |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n\n* [Group](#Group)\n    * [.point](#Group+point)\n    * [.point](#Group+point) \u21d2 <code>Point</code>\n    * [.x](#Group+x)\n    * [.x](#Group+x) \u21d2 <code>number</code>\n    * [.y](#Group+y)\n    * [.y](#Group+y) \u21d2 <code>number</code>\n    * [.canvas](#Group+canvas)\n    * [.canvas](#Group+canvas) \u21d2 <code>string</code>\n\n<a name=\"Group+point\"></a>\n\n### group.point\nSet point\n\n**Kind**: instance property of [<code>Group</code>](#Group)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Group+point\"></a>\n\n### group.point \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance property of [<code>Group</code>](#Group)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n<a name=\"Group+x\"></a>\n\n### group.x\nSet x-axis value\n\n**Kind**: instance property of [<code>Group</code>](#Group)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Group+x\"></a>\n\n### group.x \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance property of [<code>Group</code>](#Group)  \n**Returns**: <code>number</code> - X coordinate value  \n<a name=\"Group+y\"></a>\n\n### group.y\nSet the y-axis value\n\n**Kind**: instance property of [<code>Group</code>](#Group)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Group+y\"></a>\n\n### group.y \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance property of [<code>Group</code>](#Group)  \n**Returns**: <code>number</code> - Y coordinate value  \n<a name=\"Group+canvas\"></a>\n\n### group.canvas\nSet canvas value\n\n**Kind**: instance property of [<code>Group</code>](#Group)  \n**See**: [combined.canvas](combined.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Group+canvas\"></a>\n\n### group.canvas \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance property of [<code>Group</code>](#Group)  \n**Returns**: <code>string</code> - Canvas id  \n**See**: [combined.canvas](combined.canvas)  \n",
    "Rectangle": "<a name=\"Rectangle\"></a>\n\n## Rectangle\n{Object} Rectangle                          Rectangle object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| aspect | <code>Aspect</code> | Aspect properties |\n| stroke | <code>Stroke</code> | Stroke properties |\n| fill | <code>Fill</code> | Fill properties |\n| shadow | <code>Shadow</code> | Shadow properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n\n* [Rectangle](#Rectangle)\n    * [new Rectangle()](#new_Rectangle_new)\n    * [.point](#Rectangle+point)\n    * [.point](#Rectangle+point) \u21d2 <code>Point</code>\n    * [.x](#Rectangle+x)\n    * [.x](#Rectangle+x) \u21d2 <code>number</code>\n    * [.y](#Rectangle+y)\n    * [.y](#Rectangle+y) \u21d2 <code>number</code>\n    * [.aspect](#Rectangle+aspect)\n    * [.aspect](#Rectangle+aspect) \u21d2 <code>Aspect</code>\n    * [.width](#Rectangle+width)\n    * [.width](#Rectangle+width) \u21d2 <code>number</code>\n    * [.height](#Rectangle+height)\n    * [.height](#Rectangle+height) \u21d2 <code>number</code>\n    * [.stroke](#Rectangle+stroke) \u21d2 <code>Stroke</code>\n    * [.fill](#Rectangle+fill) \u21d2 <code>Fill</code>\n    * [.shadow](#Rectangle+shadow) \u21d2 <code>Shadow</code>\n    * [.canvas](#Rectangle+canvas)\n    * [.canvas](#Rectangle+canvas) \u21d2 <code>string</code>\n    * [.anchor](#Rectangle+anchor) \u21d2 <code>Anchor</code>\n    * [.options](#Rectangle+options) \u21d2 <code>Options</code>\n    * [.area](#Rectangle+area) \u21d2 <code>number</code>\n    * [.perimeter](#Rectangle+perimeter) \u21d2 <code>number</code>\n    * [.center](#Rectangle+center) \u21d2 <code>Point</code>\n    * [._drawOptions()](#Rectangle+_drawOptions)\n    * [._drawAnchor()](#Rectangle+_drawAnchor)\n    * [._setAnchorPoint()](#Rectangle+_setAnchorPoint)\n    * [.move(degree, distance, [clear])](#Rectangle+move)\n    * [.rotate(degree, [clear])](#Rectangle+rotate)\n    * [.isThere(rectangle)](#Rectangle+isThere)\n    * [.draw(canvas)](#Rectangle+draw)\n\n<a name=\"new_Rectangle_new\"></a>\n\n### new Rectangle()\nCreate a rectangle\n\n<a name=\"Rectangle+point\"></a>\n\n### rectangle.point\nSet point\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**See**: [discrete.point](discrete.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Rectangle+point\"></a>\n\n### rectangle.point \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**See**: [discrete.point](discrete.point)  \n<a name=\"Rectangle+x\"></a>\n\n### rectangle.x\nSet x-axis value\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**See**: [discrete.pointX](discrete.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Rectangle+x\"></a>\n\n### rectangle.x \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - X coordinate value  \n**See**: [discrete.pointX](discrete.pointX)  \n<a name=\"Rectangle+y\"></a>\n\n### rectangle.y\nSet the y-axis value\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**See**: [discrete.pointY](discrete.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Rectangle+y\"></a>\n\n### rectangle.y \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - Y coordinate value  \n**See**: [discrete.pointY](discrete.pointY)  \n<a name=\"Rectangle+aspect\"></a>\n\n### rectangle.aspect\nSet aspect properties\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Aspect</code> | Aspect properties |\n\n<a name=\"Rectangle+aspect\"></a>\n\n### rectangle.aspect \u21d2 <code>Aspect</code>\nGet aspect properties\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Aspect</code> - Aspect properties  \n<a name=\"Rectangle+width\"></a>\n\n### rectangle.width\nSet aspect width\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Width value |\n\n<a name=\"Rectangle+width\"></a>\n\n### rectangle.width \u21d2 <code>number</code>\nGet aspect with\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - Width value  \n<a name=\"Rectangle+height\"></a>\n\n### rectangle.height\nSet aspect height\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Height value |\n\n<a name=\"Rectangle+height\"></a>\n\n### rectangle.height \u21d2 <code>number</code>\nGet aspect height\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - Height value  \n<a name=\"Rectangle+stroke\"></a>\n\n### rectangle.stroke \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n<a name=\"Rectangle+fill\"></a>\n\n### rectangle.fill \u21d2 <code>Fill</code>\nGet fill properties\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Fill</code> - Fill properties  \n<a name=\"Rectangle+shadow\"></a>\n\n### rectangle.shadow \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n<a name=\"Rectangle+canvas\"></a>\n\n### rectangle.canvas\nSet canvas value\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**See**: [discrete.canvas](discrete.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Rectangle+canvas\"></a>\n\n### rectangle.canvas \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>string</code> - Canvas id  \n**See**: [discrete.canvas](discrete.canvas)  \n<a name=\"Rectangle+anchor\"></a>\n\n### rectangle.anchor \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Anchor</code> - Anchor properties  \n<a name=\"Rectangle+options\"></a>\n\n### rectangle.options \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Options</code> - Options properties  \n<a name=\"Rectangle+area\"></a>\n\n### rectangle.area \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - Area of rectangle  \n<a name=\"Rectangle+perimeter\"></a>\n\n### rectangle.perimeter \u21d2 <code>number</code>\nGet perimeter of this object\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - Perimeter of rectangle  \n<a name=\"Rectangle+center\"></a>\n\n### rectangle.center \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance property of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Point</code> - Center point coordinates  \n<a name=\"Rectangle+_drawOptions\"></a>\n\n### rectangle.\\_drawOptions()\nDraws associated options\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n<a name=\"Rectangle+_drawAnchor\"></a>\n\n### rectangle.\\_drawAnchor()\nDraws anchor point\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n<a name=\"Rectangle+_setAnchorPoint\"></a>\n\n### rectangle.\\_setAnchorPoint()\nSets anchor's point against this object's point location\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n<a name=\"Rectangle+move\"></a>\n\n### rectangle.move(degree, distance, [clear])\nMove this object\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Direction to move; in degrees |\n| distance | <code>number</code> |  | Distance to move |\n| [clear] | <code>boolean</code> | <code>true</code> | Clear canvas during each movement |\n\n<a name=\"Rectangle+rotate\"></a>\n\n### rectangle.rotate(degree, [clear])\nRotate this object\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"Rectangle+isThere\"></a>\n\n### rectangle.isThere(rectangle)\nCheck whether the passed object is already present\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| rectangle | [<code>Rectangle</code>](#Rectangle) | Object to validate |\n\n<a name=\"Rectangle+draw\"></a>\n\n### rectangle.draw(canvas)\nDraw this object\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Application": "<a name=\"initCanvasLab\"></a>\n\n## initCanvasLab([canvas])\nInitiates canvasLab\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [canvas] | <code>string</code> | Canvas identifier |\n\n",
    "Point": "<a name=\"Point\"></a>\n\n## Point\n{Object}  Point                             X & Y coordinates for an object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [x] | <code>number</code> | <code>0</code> | X - x-axis coordinate |\n| [y] | <code>number</code> | <code>0</code> | Y - y-axis coordinate |\n| options | <code>Options</code> |  | Ancillary properties |\n\n\n* [Point](#Point)\n    * [new Point(x, y)](#new_Point_new)\n    * [.x](#Point+x)\n    * [.x](#Point+x) \u21d2 <code>number</code>\n    * [.y](#Point+y)\n    * [.y](#Point+y) \u21d2 <code>number</code>\n    * [.canvas](#Point+canvas)\n    * [.canvas](#Point+canvas) \u21d2 <code>string</code>\n    * [.options](#Point+options) \u21d2 <code>Options</code>\n    * [.center](#Point+center) \u21d2 [<code>Point</code>](#Point)\n    * [.drawOptions(offset)](#Point+drawOptions)\n    * [.invert()](#Point+invert)\n\n<a name=\"new_Point_new\"></a>\n\n### new Point(x, y)\nCreate a point\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| x | <code>number</code> | X coordinate value |\n| y | <code>number</code> | Y coordinate value |\n\n<a name=\"Point+x\"></a>\n\n### point.x\nSet x-axis value\n\n**Kind**: instance property of [<code>Point</code>](#Point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Point+x\"></a>\n\n### point.x \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance property of [<code>Point</code>](#Point)  \n**Returns**: <code>number</code> - X coordinate value  \n<a name=\"Point+y\"></a>\n\n### point.y\nSet the y-axis value\n\n**Kind**: instance property of [<code>Point</code>](#Point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Point+y\"></a>\n\n### point.y \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance property of [<code>Point</code>](#Point)  \n**Returns**: <code>number</code> - Y coordinate value  \n<a name=\"Point+canvas\"></a>\n\n### point.canvas\nSet canvas value\n\n**Kind**: instance property of [<code>Point</code>](#Point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Point+canvas\"></a>\n\n### point.canvas \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance property of [<code>Point</code>](#Point)  \n**Returns**: <code>string</code> - Canvas id  \n<a name=\"Point+options\"></a>\n\n### point.options \u21d2 <code>Options</code>\nGet options\n\n**Kind**: instance property of [<code>Point</code>](#Point)  \n**Returns**: <code>Options</code> - Options object  \n<a name=\"Point+center\"></a>\n\n### point.center \u21d2 [<code>Point</code>](#Point)\nGet center of this object\n\n**Kind**: instance property of [<code>Point</code>](#Point)  \n**Returns**: [<code>Point</code>](#Point) - Center point coordinates  \n<a name=\"Point+drawOptions\"></a>\n\n### point.drawOptions(offset)\nDraws associated options\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| offset | <code>number</code> | Offset of drawable options |\n\n<a name=\"Point+invert\"></a>\n\n### point.invert()\nInvert x & y coordinate values\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n",
    "Animation": "<a name=\"Animation\"></a>\n\n## Animation\n**Kind**: global class  \n<a name=\"new_Animation_new\"></a>\n\n### new Animation(duration, timing, draw)\nCreates an animation instance\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| duration | <code>number</code> | Duration of animation |\n| timing | <code>function</code> | Timing function |\n| draw | <code>function</code> | Draw function |\n\n",
    "Lines": "<a name=\"Lines\"></a>\n\n## Lines\n{Array} Lines                               Collection of Line objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| stroke | <code>StrokeCollection</code> | Stroke collection properties |\n| shadow | <code>ShadowCollection</code> | Shadow collection properties |\n| lineCap | <code>string</code> | Shape of end points |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n\n* [Lines](#Lines)\n    * [new Lines()](#new_Lines_new)\n    * [.point](#Lines+point)\n    * [.point](#Lines+point) \u21d2 <code>Point</code>\n    * [.x](#Lines+x)\n    * [.x](#Lines+x) \u21d2 <code>number</code>\n    * [.y](#Lines+y)\n    * [.y](#Lines+y) \u21d2 <code>number</code>\n    * [.stroke](#Lines+stroke) \u21d2 <code>Stroke</code>\n    * [.shadow](#Lines+shadow) \u21d2 <code>Shadow</code>\n    * [.lineCap](#Lines+lineCap)\n    * [.lineCap](#Lines+lineCap) \u21d2 <code>string</code>\n    * [.canvas](#Lines+canvas)\n    * [.canvas](#Lines+canvas) \u21d2 <code>string</code>\n    * [.aspect](#Lines+aspect) \u21d2 <code>Aspect</code>\n    * [.width](#Lines+width) \u21d2 <code>number</code>\n    * [.height](#Lines+height) \u21d2 <code>number</code>\n    * [.anchor](#Lines+anchor)\n    * [.anchor](#Lines+anchor) \u21d2 <code>Anchor</code>\n    * [.area](#Lines+area) \u21d2 <code>number</code>\n    * [.perimeter](#Lines+perimeter) \u21d2 <code>number</code>\n    * [.center](#Lines+center) \u21d2 <code>Point</code>\n    * [._drawOptions()](#Lines+_drawOptions)\n    * [._drawAnchor()](#Lines+_drawAnchor)\n    * [._setAnchorPoint()](#Lines+_setAnchorPoint)\n\n<a name=\"new_Lines_new\"></a>\n\n### new Lines()\nCreate a lines array\n\n<a name=\"Lines+point\"></a>\n\n### lines.point\nSet point\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**See**: [discrete.point](discrete.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Lines+point\"></a>\n\n### lines.point \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**See**: [discrete.point](discrete.point)  \n<a name=\"Lines+x\"></a>\n\n### lines.x\nSet x-axis value\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**See**: [discrete.pointX](discrete.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Lines+x\"></a>\n\n### lines.x \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - X coordinate value  \n**See**: [discrete.pointX](discrete.pointX)  \n<a name=\"Lines+y\"></a>\n\n### lines.y\nSet the y-axis value\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**See**: [discrete.pointY](discrete.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Lines+y\"></a>\n\n### lines.y \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - Y coordinate value  \n**See**: [discrete.pointY](discrete.pointY)  \n<a name=\"Lines+stroke\"></a>\n\n### lines.stroke \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n<a name=\"Lines+shadow\"></a>\n\n### lines.shadow \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n<a name=\"Lines+lineCap\"></a>\n\n### lines.lineCap\nSet line cap\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Line cap |\n\n<a name=\"Lines+lineCap\"></a>\n\n### lines.lineCap \u21d2 <code>string</code>\nGet line cap\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>string</code> - Line cap  \n<a name=\"Lines+canvas\"></a>\n\n### lines.canvas\nSet canvas value\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**See**: [combined.canvas](combined.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Lines+canvas\"></a>\n\n### lines.canvas \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>string</code> - Canvas id  \n**See**: [combined.canvas](combined.canvas)  \n<a name=\"Lines+aspect\"></a>\n\n### lines.aspect \u21d2 <code>Aspect</code>\nGet aspect properties\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Aspect</code> - Aspect properties  \n<a name=\"Lines+width\"></a>\n\n### lines.width \u21d2 <code>number</code>\nGet aspect with\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - Width value  \n<a name=\"Lines+height\"></a>\n\n### lines.height \u21d2 <code>number</code>\nGet aspect height\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - Height value  \n<a name=\"Lines+anchor\"></a>\n\n### lines.anchor\nSet anchor type\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Anchor type |\n\n<a name=\"Lines+anchor\"></a>\n\n### lines.anchor \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Anchor</code> - Anchor properties  \n<a name=\"Lines+area\"></a>\n\n### lines.area \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - Area of rectangle  \n<a name=\"Lines+perimeter\"></a>\n\n### lines.perimeter \u21d2 <code>number</code>\nGet perimeter of this object\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - Perimeter of rectangle  \n<a name=\"Lines+center\"></a>\n\n### lines.center \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance property of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Point</code> - Center point coordinates  \n<a name=\"Lines+_drawOptions\"></a>\n\n### lines.\\_drawOptions()\nDraws associated options\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n<a name=\"Lines+_drawAnchor\"></a>\n\n### lines.\\_drawAnchor()\nDraws anchor point\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n<a name=\"Lines+_setAnchorPoint\"></a>\n\n### lines.\\_setAnchorPoint()\nSets anchor's point against this object's point location\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n",
    "FillSolid": "<a name=\"FillSolid\"></a>\n\n## FillSolid\n{Object} FillSolid                          Solid fill properties of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>string</code> | <code>&quot;&#x27;255, 255, 255&#x27;&quot;</code> | RGB color value; r, g, b |\n| [alpha] | <code>number</code> | <code>0</code> | Alpha (transparency); number/decimal |\n\n\n* [FillSolid](#FillSolid)\n    * [new FillSolid(color, alpha)](#new_FillSolid_new)\n    * [.color](#FillSolid+color)\n    * [.color](#FillSolid+color) \u21d2 <code>string</code>\n    * [.alpha](#FillSolid+alpha)\n    * [.alpha](#FillSolid+alpha) \u21d2 <code>number</code>\n\n<a name=\"new_FillSolid_new\"></a>\n\n### new FillSolid(color, alpha)\nCreate a fill, solid\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| color | <code>string</code> | RGB color value |\n| alpha | <code>number</code> | Alpha value; number/decimal |\n\n<a name=\"FillSolid+color\"></a>\n\n### fillSolid.color\nSet color value\n\n**Kind**: instance property of [<code>FillSolid</code>](#FillSolid)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | RGB color value |\n\n<a name=\"FillSolid+color\"></a>\n\n### fillSolid.color \u21d2 <code>string</code>\nGet color value\n\n**Kind**: instance property of [<code>FillSolid</code>](#FillSolid)  \n**Returns**: <code>string</code> - RGB color value  \n<a name=\"FillSolid+alpha\"></a>\n\n### fillSolid.alpha\nSet alpha value\n\n**Kind**: instance property of [<code>FillSolid</code>](#FillSolid)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Alpha value; number/decimal |\n\n<a name=\"FillSolid+alpha\"></a>\n\n### fillSolid.alpha \u21d2 <code>number</code>\nGet alpha value\n\n**Kind**: instance property of [<code>FillSolid</code>](#FillSolid)  \n**Returns**: <code>number</code> - Alpha value; number/decimal  \n",
    "Stage": "",
    "ControlPoints": "<a name=\"ControlPoints\"></a>\n\n## ControlPoints\n{Object} ControlPoints                      Defines the shape of a bezier curve\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| p0 | <code>Point</code> | Control point one |\n| p1 | <code>Point</code> | Control point two |\n| p2 | <code>Point</code> | Control point three |\n| p3 | <code>Point</code> | Control point four |\n\n\n* [ControlPoints](#ControlPoints)\n    * [new ControlPoints(p0, p1, p2, p3)](#new_ControlPoints_new)\n    * [.p0](#ControlPoints+p0)\n    * [.p0](#ControlPoints+p0) \u21d2 <code>Point</code>\n    * [.p1](#ControlPoints+p1)\n    * [.p1](#ControlPoints+p1) \u21d2 <code>Point</code>\n    * [.p2](#ControlPoints+p2)\n    * [.p2](#ControlPoints+p2) \u21d2 <code>Point</code>\n    * [.p3](#ControlPoints+p3)\n    * [.p3](#ControlPoints+p3) \u21d2 <code>Point</code>\n\n<a name=\"new_ControlPoints_new\"></a>\n\n### new ControlPoints(p0, p1, p2, p3)\nCreate control points\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| p0 | <code>Point</code> | Control point one |\n| p1 | <code>Point</code> | Control point two |\n| p2 | <code>Point</code> | Control point three |\n| p3 | <code>Point</code> | Control point four |\n\n<a name=\"ControlPoints+p0\"></a>\n\n### controlPoints.p0\nSet control point one\n\n**Kind**: instance property of [<code>ControlPoints</code>](#ControlPoints)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Control Point ( x, y ) values |\n\n<a name=\"ControlPoints+p0\"></a>\n\n### controlPoints.p0 \u21d2 <code>Point</code>\nGet control point one\n\n**Kind**: instance property of [<code>ControlPoints</code>](#ControlPoints)  \n**Returns**: <code>Point</code> - Control Point ( x, y ) values  \n<a name=\"ControlPoints+p1\"></a>\n\n### controlPoints.p1\nSet control point one\n\n**Kind**: instance property of [<code>ControlPoints</code>](#ControlPoints)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Control Point ( x, y ) values |\n\n<a name=\"ControlPoints+p1\"></a>\n\n### controlPoints.p1 \u21d2 <code>Point</code>\nGet control point one\n\n**Kind**: instance property of [<code>ControlPoints</code>](#ControlPoints)  \n**Returns**: <code>Point</code> - Control Point ( x, y ) values  \n<a name=\"ControlPoints+p2\"></a>\n\n### controlPoints.p2\nSet control point one\n\n**Kind**: instance property of [<code>ControlPoints</code>](#ControlPoints)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Control Point ( x, y ) values |\n\n<a name=\"ControlPoints+p2\"></a>\n\n### controlPoints.p2 \u21d2 <code>Point</code>\nGet control point one\n\n**Kind**: instance property of [<code>ControlPoints</code>](#ControlPoints)  \n**Returns**: <code>Point</code> - Control Point ( x, y ) values  \n<a name=\"ControlPoints+p3\"></a>\n\n### controlPoints.p3\nSet control point one\n\n**Kind**: instance property of [<code>ControlPoints</code>](#ControlPoints)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Control Point ( x, y ) values |\n\n<a name=\"ControlPoints+p3\"></a>\n\n### controlPoints.p3 \u21d2 <code>Point</code>\nGet control point one\n\n**Kind**: instance property of [<code>ControlPoints</code>](#ControlPoints)  \n**Returns**: <code>Point</code> - Control Point ( x, y ) values  \n",
    "Processing": "",
    "ShadowCollection": "<a name=\"ShadowCollection\"></a>\n\n## ShadowCollection\n{Object} ShadowCollection                   Shadow of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| blur | <code>number</code> |  | Blur strength |\n| offset | <code>Point</code> |  | Point offset coordinates |\n\n\n* [ShadowCollection](#ShadowCollection)\n    * [new ShadowCollection()](#new_ShadowCollection_new)\n    * [.color](#ShadowCollection+color)\n    * [.color](#ShadowCollection+color) \u21d2 <code>string</code>\n    * [.blur](#ShadowCollection+blur)\n    * [.blur](#ShadowCollection+blur) \u21d2 <code>number</code>\n    * [.offset](#ShadowCollection+offset)\n    * [.offset](#ShadowCollection+offset) \u21d2 <code>Point</code>\n    * [.x](#ShadowCollection+x)\n    * [.x](#ShadowCollection+x) \u21d2 <code>number</code>\n    * [.y](#ShadowCollection+y)\n    * [.y](#ShadowCollection+y) \u21d2 <code>number</code>\n\n<a name=\"new_ShadowCollection_new\"></a>\n\n### new ShadowCollection()\nCreate a shadow collection\n\n<a name=\"ShadowCollection+color\"></a>\n\n### shadowCollection.color\nSet color value\n\n**Kind**: instance property of [<code>ShadowCollection</code>](#ShadowCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | RGB color value |\n\n<a name=\"ShadowCollection+color\"></a>\n\n### shadowCollection.color \u21d2 <code>string</code>\nGet color value\n\n**Kind**: instance property of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Returns**: <code>string</code> - RGB color value  \n<a name=\"ShadowCollection+blur\"></a>\n\n### shadowCollection.blur\nSet blur value\n\n**Kind**: instance property of [<code>ShadowCollection</code>](#ShadowCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| blur | <code>number</code> | Blur value |\n\n<a name=\"ShadowCollection+blur\"></a>\n\n### shadowCollection.blur \u21d2 <code>number</code>\nGet blur value\n\n**Kind**: instance property of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Returns**: <code>number</code> - Blur value  \n<a name=\"ShadowCollection+offset\"></a>\n\n### shadowCollection.offset\nSet offset\n\n**Kind**: instance property of [<code>ShadowCollection</code>](#ShadowCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Shadow offset |\n\n<a name=\"ShadowCollection+offset\"></a>\n\n### shadowCollection.offset \u21d2 <code>Point</code>\nGet offset\n\n**Kind**: instance property of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Returns**: <code>Point</code> - Shadow offset  \n<a name=\"ShadowCollection+x\"></a>\n\n### shadowCollection.x\nSet x-axis offset value\n\n**Kind**: instance property of [<code>ShadowCollection</code>](#ShadowCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"ShadowCollection+x\"></a>\n\n### shadowCollection.x \u21d2 <code>number</code>\nGet x-axis offset value\n\n**Kind**: instance property of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Returns**: <code>number</code> - X coordinate value  \n<a name=\"ShadowCollection+y\"></a>\n\n### shadowCollection.y\nSet the y-axis offset value\n\n**Kind**: instance property of [<code>ShadowCollection</code>](#ShadowCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"ShadowCollection+y\"></a>\n\n### shadowCollection.y \u21d2 <code>number</code>\nGet y-axis offset value\n\n**Kind**: instance property of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Returns**: <code>number</code> - Y coordinate value  \n",
    "Shadow": "<a name=\"Shadow\"></a>\n\n## Shadow\n{Object} Shadow                             Shadow of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | RGB color value; r, g, b |\n| [blur] | <code>number</code> | <code>3</code> | Blur strength |\n| offset | <code>Point</code> |  | Point offset coordinates |\n\n\n* [Shadow](#Shadow)\n    * [new Shadow(color, blur, offset)](#new_Shadow_new)\n    * [.color](#Shadow+color)\n    * [.color](#Shadow+color) \u21d2 <code>string</code>\n    * [.blur](#Shadow+blur)\n    * [.blur](#Shadow+blur) \u21d2 <code>number</code>\n    * [.offset](#Shadow+offset)\n    * [.offset](#Shadow+offset) \u21d2 <code>Point</code>\n    * [.x](#Shadow+x)\n    * [.x](#Shadow+x) \u21d2 <code>number</code>\n    * [.y](#Shadow+y)\n    * [.y](#Shadow+y) \u21d2 <code>number</code>\n\n<a name=\"new_Shadow_new\"></a>\n\n### new Shadow(color, blur, offset)\nCreate a shadow\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| color | <code>Object</code> | RGB color value |\n| blur | <code>number</code> | Shadow blur value |\n| offset | <code>Point</code> | Shadow offset |\n\n<a name=\"Shadow+color\"></a>\n\n### shadow.color\nSet color value\n\n**Kind**: instance property of [<code>Shadow</code>](#Shadow)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | RGB color value |\n\n<a name=\"Shadow+color\"></a>\n\n### shadow.color \u21d2 <code>string</code>\nGet color value\n\n**Kind**: instance property of [<code>Shadow</code>](#Shadow)  \n**Returns**: <code>string</code> - RGB color value  \n<a name=\"Shadow+blur\"></a>\n\n### shadow.blur\nSet blur value\n\n**Kind**: instance property of [<code>Shadow</code>](#Shadow)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| blur | <code>number</code> | Blur value |\n\n<a name=\"Shadow+blur\"></a>\n\n### shadow.blur \u21d2 <code>number</code>\nGet blur value\n\n**Kind**: instance property of [<code>Shadow</code>](#Shadow)  \n**Returns**: <code>number</code> - Blur value  \n<a name=\"Shadow+offset\"></a>\n\n### shadow.offset\nSet offset\n\n**Kind**: instance property of [<code>Shadow</code>](#Shadow)  \n**See**: [discrete.offset](discrete.offset)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Shadow offset |\n\n<a name=\"Shadow+offset\"></a>\n\n### shadow.offset \u21d2 <code>Point</code>\nGet offset\n\n**Kind**: instance property of [<code>Shadow</code>](#Shadow)  \n**Returns**: <code>Point</code> - Shadow offset  \n**See**: [discrete.offset](discrete.offset)  \n<a name=\"Shadow+x\"></a>\n\n### shadow.x\nSet x-axis offset value\n\n**Kind**: instance property of [<code>Shadow</code>](#Shadow)  \n**See**: [discrete.offsetX](discrete.offsetX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Shadow+x\"></a>\n\n### shadow.x \u21d2 <code>number</code>\nGet x-axis offset value\n\n**Kind**: instance property of [<code>Shadow</code>](#Shadow)  \n**Returns**: <code>number</code> - X coordinate value  \n**See**: [discrete.offsetX](discrete.offsetX)  \n<a name=\"Shadow+y\"></a>\n\n### shadow.y\nSet the y-axis offset value\n\n**Kind**: instance property of [<code>Shadow</code>](#Shadow)  \n**See**: [discrete.offsetY](discrete.offsetY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Shadow+y\"></a>\n\n### shadow.y \u21d2 <code>number</code>\nGet y-axis offset value\n\n**Kind**: instance property of [<code>Shadow</code>](#Shadow)  \n**Returns**: <code>number</code> - Y coordinate value  \n**See**: [discrete.offsetY](discrete.offsetY)  \n",
    "Rectangles": "<a name=\"Rectangles\"></a>\n\n## Rectangles\n{Array} Rectangles                          Collection of Rectangle objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n\n* [Rectangles](#Rectangles)\n    * [.canvas](#Rectangles+canvas)\n    * [.canvas](#Rectangles+canvas) \u21d2 <code>string</code>\n\n<a name=\"Rectangles+canvas\"></a>\n\n### rectangles.canvas\nSet canvas value\n\n**Kind**: instance property of [<code>Rectangles</code>](#Rectangles)  \n**See**: [combined.canvas](combined.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Rectangles+canvas\"></a>\n\n### rectangles.canvas \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance property of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>string</code> - Canvas id  \n**See**: [combined.canvas](combined.canvas)  \n",
    "GradientLinear": "<a name=\"GradientLinear\"></a>\n\n## GradientLinear\n{Object} GradientLinear                     GradientLinear properties of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| start | <code>Point</code> | X & Y axis coordinates (start) |\n| end | <code>Point</code> | X & Y axis coordinates (end) |\n| end | <code>Array</code> | X & Y axis coordinates (end) |\n\n\n* [GradientLinear](#GradientLinear)\n    * [new GradientLinear()](#new_GradientLinear_new)\n    * [.start](#GradientLinear+start)\n    * [.start](#GradientLinear+start) \u21d2 <code>Point</code>\n    * [.end](#GradientLinear+end)\n    * [.end](#GradientLinear+end) \u21d2 <code>Point</code>\n\n<a name=\"new_GradientLinear_new\"></a>\n\n### new GradientLinear()\nCreate a LinearGradient\n\n<a name=\"GradientLinear+start\"></a>\n\n### gradientLinear.start\nSet starting point\n\n**Kind**: instance property of [<code>GradientLinear</code>](#GradientLinear)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Starting point |\n\n<a name=\"GradientLinear+start\"></a>\n\n### gradientLinear.start \u21d2 <code>Point</code>\nSet starting point\n\n**Kind**: instance property of [<code>GradientLinear</code>](#GradientLinear)  \n**Returns**: <code>Point</code> - Starting point  \n<a name=\"GradientLinear+end\"></a>\n\n### gradientLinear.end\nSet ending point\n\n**Kind**: instance property of [<code>GradientLinear</code>](#GradientLinear)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Ending point |\n\n<a name=\"GradientLinear+end\"></a>\n\n### gradientLinear.end \u21d2 <code>Point</code>\nSet ending point\n\n**Kind**: instance property of [<code>GradientLinear</code>](#GradientLinear)  \n**Returns**: <code>Point</code> - Ending point  \n",
    "Circles": "<a name=\"Circles\"></a>\n\n## Circles\n{Array} Circles                             Collection of circle elements within an array\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n\n\n* [Circles](#Circles)\n    * [.canvas](#Circles+canvas)\n    * [.canvas](#Circles+canvas) \u21d2 <code>string</code>\n\n<a name=\"Circles+canvas\"></a>\n\n### circles.canvas\nSet canvas value\n\n**Kind**: instance property of [<code>Circles</code>](#Circles)  \n**See**: [combined.canvas](combined.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Circles+canvas\"></a>\n\n### circles.canvas \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance property of [<code>Circles</code>](#Circles)  \n**Returns**: <code>string</code> - Canvas id  \n**See**: [combined.canvas](combined.canvas)  \n",
    "Anchor": "<a name=\"Anchor\"></a>\n\n## Anchor\n{Object} Anchor                             Anchor object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| align | <code>string</code> | Anchor alignment |\n\n\n* [Anchor](#Anchor)\n    * [.x](#Anchor+x)\n    * [.x](#Anchor+x) \u21d2 <code>number</code>\n    * [.y](#Anchor+y)\n    * [.y](#Anchor+y) \u21d2 <code>number</code>\n    * [.align](#Anchor+align)\n    * [.align](#Anchor+align) \u21d2 <code>string</code>\n\n<a name=\"Anchor+x\"></a>\n\n### anchor.x\nSet x-axis value\n\n**Kind**: instance property of [<code>Anchor</code>](#Anchor)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Anchor+x\"></a>\n\n### anchor.x \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance property of [<code>Anchor</code>](#Anchor)  \n**Returns**: <code>number</code> - X coordinate value  \n<a name=\"Anchor+y\"></a>\n\n### anchor.y\nSet the y-axis value\n\n**Kind**: instance property of [<code>Anchor</code>](#Anchor)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Anchor+y\"></a>\n\n### anchor.y \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance property of [<code>Anchor</code>](#Anchor)  \n**Returns**: <code>number</code> - Y coordinate value  \n<a name=\"Anchor+align\"></a>\n\n### anchor.align\nSet anchor alignment\n\n**Kind**: instance property of [<code>Anchor</code>](#Anchor)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Anchor alignment |\n\n<a name=\"Anchor+align\"></a>\n\n### anchor.align \u21d2 <code>string</code>\nGet anchor alignment\n\n**Kind**: instance property of [<code>Anchor</code>](#Anchor)  \n**Returns**: <code>string</code> - Anchor alignment  \n",
    "Fill": "<a name=\"Fill\"></a>\n\n## Fill\n{Object}         Fill                       Fill container for various fill types\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| [type] | <code>string</code> | <code>&quot;&#x27;solid&#x27;&quot;</code> | Fill type; solid | linear | radial | conic | pattern |\n| linear | <code>GradientLinear</code> |  | Linear Gradient fill object |\n| radial | <code>GradientRadial</code> |  | Radial Gradient fill object |\n| conic | <code>GradientConic</code> |  | Conic Gradient fill object |\n| pattern | <code>FillPattern</code> |  | Pattern fill object |\n\n\n* [Fill](#Fill)\n    * [new Fill(type)](#new_Fill_new)\n    * [.type](#Fill+type)\n    * [.type](#Fill+type) \u21d2 <code>string</code>\n    * [.linear](#Fill+linear) \u21d2 <code>GradientLinear</code>\n    * [.radial](#Fill+radial) \u21d2 <code>GradientRadioal</code>\n    * [.conic](#Fill+conic) \u21d2 <code>GradientConic</code>\n    * [.pattern](#Fill+pattern) \u21d2 <code>FillPattern</code>\n\n<a name=\"new_Fill_new\"></a>\n\n### new Fill(type)\nCreate a fill type\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| type | <code>string</code> | Fill type |\n\n<a name=\"Fill+type\"></a>\n\n### fill.type\nSet type value\n\n**Kind**: instance property of [<code>Fill</code>](#Fill)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Fill type value |\n\n<a name=\"Fill+type\"></a>\n\n### fill.type \u21d2 <code>string</code>\nGet type value\n\n**Kind**: instance property of [<code>Fill</code>](#Fill)  \n**Returns**: <code>string</code> - Fill type value  \n<a name=\"Fill+linear\"></a>\n\n### fill.linear \u21d2 <code>GradientLinear</code>\nGet linear gradient fill object\n\n**Kind**: instance property of [<code>Fill</code>](#Fill)  \n**Returns**: <code>GradientLinear</code> - Linear gradient fill object  \n<a name=\"Fill+radial\"></a>\n\n### fill.radial \u21d2 <code>GradientRadioal</code>\nGet radial gradient fill object\n\n**Kind**: instance property of [<code>Fill</code>](#Fill)  \n**Returns**: <code>GradientRadioal</code> - Radial gradient fill object  \n<a name=\"Fill+conic\"></a>\n\n### fill.conic \u21d2 <code>GradientConic</code>\nGet conic gradient fill object\n\n**Kind**: instance property of [<code>Fill</code>](#Fill)  \n**Returns**: <code>GradientConic</code> - Conic gradient fill object  \n<a name=\"Fill+pattern\"></a>\n\n### fill.pattern \u21d2 <code>FillPattern</code>\nGet pattern fill object\n\n**Kind**: instance property of [<code>Fill</code>](#Fill)  \n**Returns**: <code>FillPattern</code> - Pattern fill object  \n",
    "Hsl": "## Classes\n\n<dl>\n<dt><a href=\"#Hsl\">Hsl</a></dt>\n<dd><p>{Object} Hsl \t\t\t\t\t\t\t\tHSL color model</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#hue\">hue(hue)</a></dt>\n<dd><p>Sets the hue value</p>\n</dd>\n<dt><a href=\"#hue\">hue(Hue)</a></dt>\n<dd><p>Gets the hue value</p>\n</dd>\n<dt><a href=\"#saturation\">saturation(saturation)</a></dt>\n<dd><p>Sets the saturation value</p>\n</dd>\n<dt><a href=\"#saturation\">saturation(Saturation)</a></dt>\n<dd><p>Gets the saturation value</p>\n</dd>\n<dt><a href=\"#lightness\">lightness(lightness)</a></dt>\n<dd><p>Sets the lightness value</p>\n</dd>\n<dt><a href=\"#lightness\">lightness(Lightness)</a></dt>\n<dd><p>Gets the lightness value</p>\n</dd>\n<dt><a href=\"#toCss\">toCss()</a> \u21d2 <code>string</code></dt>\n<dd><p>Returns a CSS compatible <color> string value</p>\n</dd>\n</dl>\n\n<a name=\"Hsl\"></a>\n\n## Hsl\n{Object} Hsl \t\t\t\t\t\t\t\tHSL color model\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [hue] | <code>number</code> | <code>0</code> | Hue value; 0 - 360 (degree) |\n| [saturation] | <code>number</code> | <code>0</code> | Saturation value; 0 - 1 (decimal) |\n| [lightness] | <code>number</code> | <code>0</code> | Lightness value; 0 - 1 (decimal) |\n| [alpha] | <code>number</code> | <code>1</code> | Alpha value; 0 - 1 (decimal) |\n\n<a name=\"new_Hsl_new\"></a>\n\n### new Hsl(hue, saturation, lightness, alpha)\nCreate an HSL color model\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| hue | <code>number</code> | Hue value |\n| saturation | <code>number</code> | Saturation value |\n| lightness | <code>number</code> | Lightness value |\n| alpha | <code>number</code> | Alpha value |\n\n<a name=\"hue\"></a>\n\n## hue(hue)\nSets the hue value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| hue | <code>number</code> | Hue value; 0 - 360 |\n\n<a name=\"hue\"></a>\n\n## hue(Hue)\nGets the hue value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Hue | <code>number</code> | value; 0 - 360 |\n\n<a name=\"saturation\"></a>\n\n## saturation(saturation)\nSets the saturation value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| saturation | <code>number</code> | Saturation value; 0 - 1 |\n\n<a name=\"saturation\"></a>\n\n## saturation(Saturation)\nGets the saturation value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Saturation | <code>number</code> | value; 0 - 1 |\n\n<a name=\"lightness\"></a>\n\n## lightness(lightness)\nSets the lightness value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| lightness | <code>number</code> | Lightness value; 0 - 1 |\n\n<a name=\"lightness\"></a>\n\n## lightness(Lightness)\nGets the lightness value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Lightness | <code>number</code> | value; 0 - 1 |\n\n<a name=\"toCss\"></a>\n\n## toCss() \u21d2 <code>string</code>\nReturns a CSS compatible <color> string value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - CSS <color> string  \n**Access**: public  \n",
    "Options": "<a name=\"Options\"></a>\n\n## Options\n{Object}  Options                           Options for shapes, lines, and groups\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [shadow] | <code>boolean</code> | <code>false</code> | Show shadow |\n| [border] | <code>boolean</code> | <code>false</code> | Show border |\n| [axis] | <code>boolean</code> | <code>false</code> | Show axis |\n| [points] | <code>boolean</code> | <code>false</code> | Show points |\n| [anchor] | <code>boolean</code> | <code>false</code> | Show anchor |\n| [coordinates] | <code>boolean</code> | <code>false</code> | Show coordinates |\n| [controlPoints] | <code>boolean</code> | <code>false</code> | Show control points |\n| master | <code>Object</code> |  | Master object to reference |\n\n\n* [Options](#Options)\n    * [new Options(shadow, border, axis, points, anchor, coordinates, controlPoints)](#new_Options_new)\n    * [.shadow](#Options+shadow)\n    * [.shadow](#Options+shadow) \u21d2 <code>boolean</code>\n    * [.border](#Options+border)\n    * [.border](#Options+border) \u21d2 <code>boolean</code>\n    * [.axis](#Options+axis)\n    * [.axis](#Options+axis) \u21d2 <code>boolean</code>\n    * [.anchor](#Options+anchor)\n    * [.anchor](#Options+anchor) \u21d2 <code>boolean</code>\n    * [.coordinates](#Options+coordinates)\n    * [.coordinates](#Options+coordinates) \u21d2 <code>boolean</code>\n    * [.controlPoints](#Options+controlPoints)\n    * [.controlPoints](#Options+controlPoints) \u21d2 <code>boolean</code>\n    * [.master](#Options+master)\n    * [.master](#Options+master) \u21d2 <code>Object</code>\n\n<a name=\"new_Options_new\"></a>\n\n### new Options(shadow, border, axis, points, anchor, coordinates, controlPoints)\nCreate an options object\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| shadow | <code>boolean</code> | Show shadow |\n| border | <code>boolean</code> | Show border |\n| axis | <code>boolean</code> | Show axis |\n| points | <code>boolean</code> | Show points |\n| anchor | <code>boolean</code> | Show anchor |\n| coordinates | <code>boolean</code> | Show coordinates |\n| controlPoints | <code>boolean</code> | Show control points |\n\n<a name=\"Options+shadow\"></a>\n\n### options.shadow\nSet shadow value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Shadow; true | false |\n\n<a name=\"Options+shadow\"></a>\n\n### options.shadow \u21d2 <code>boolean</code>\nGet shadow value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Shadow; true | false  \n<a name=\"Options+border\"></a>\n\n### options.border\nSet border value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Border; true | false |\n\n<a name=\"Options+border\"></a>\n\n### options.border \u21d2 <code>boolean</code>\nGet border value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Border; true | false  \n<a name=\"Options+axis\"></a>\n\n### options.axis\nSet axis value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Axis; true | false |\n\n<a name=\"Options+axis\"></a>\n\n### options.axis \u21d2 <code>boolean</code>\nGet axis value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Axis; true | false  \n<a name=\"Options+anchor\"></a>\n\n### options.anchor\nSet anchor value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Anchor; true | false |\n\n<a name=\"Options+anchor\"></a>\n\n### options.anchor \u21d2 <code>boolean</code>\nGet anchor value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Anchor; true | false  \n<a name=\"Options+coordinates\"></a>\n\n### options.coordinates\nSet coordinates value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Coordinates; true | false |\n\n<a name=\"Options+coordinates\"></a>\n\n### options.coordinates \u21d2 <code>boolean</code>\nGet coordinates value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Coordinates; true | false  \n<a name=\"Options+controlPoints\"></a>\n\n### options.controlPoints\nSet control points value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Control points; true | false |\n\n<a name=\"Options+controlPoints\"></a>\n\n### options.controlPoints \u21d2 <code>boolean</code>\nGet control points value\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Control points; true | false  \n<a name=\"Options+master\"></a>\n\n### options.master\nSet master object\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | CanvasLab Object |\n\n<a name=\"Options+master\"></a>\n\n### options.master \u21d2 <code>Object</code>\nGet master object\n\n**Kind**: instance property of [<code>Options</code>](#Options)  \n**Returns**: <code>Object</code> - CanvasLab Object  \n",
    "Aspect": "<a name=\"Aspect\"></a>\n\n## Aspect\n{Object} Aspect                             Aspect dimensions of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [width] | <code>number</code> | <code>0</code> | Width |\n| [height] | <code>number</code> | <code>0</code> | Height |\n\n\n* [Aspect](#Aspect)\n    * [new Aspect(width, height)](#new_Aspect_new)\n    * [.width](#Aspect+width)\n    * [.width](#Aspect+width) \u21d2 <code>number</code>\n    * [.height](#Aspect+height)\n    * [.height](#Aspect+height) \u21d2 <code>number</code>\n    * [.heightCenter](#Aspect+heightCenter) \u21d2 <code>number</code>\n    * [.widthCenter](#Aspect+widthCenter) \u21d2 <code>number</code>\n    * [.center](#Aspect+center) \u21d2 <code>Point</code>\n\n<a name=\"new_Aspect_new\"></a>\n\n### new Aspect(width, height)\nCreate an aspect\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| width | <code>number</code> | Width of aspect |\n| height | <code>number</code> | Height of aspect |\n\n<a name=\"Aspect+width\"></a>\n\n### aspect.width\nSet width\n\n**Kind**: instance property of [<code>Aspect</code>](#Aspect)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Width value |\n\n<a name=\"Aspect+width\"></a>\n\n### aspect.width \u21d2 <code>number</code>\nGet width\n\n**Kind**: instance property of [<code>Aspect</code>](#Aspect)  \n**Returns**: <code>number</code> - Width value  \n<a name=\"Aspect+height\"></a>\n\n### aspect.height\nSet height\n\n**Kind**: instance property of [<code>Aspect</code>](#Aspect)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Height value |\n\n<a name=\"Aspect+height\"></a>\n\n### aspect.height \u21d2 <code>number</code>\nGet height\n\n**Kind**: instance property of [<code>Aspect</code>](#Aspect)  \n**Returns**: <code>number</code> - Height value  \n<a name=\"Aspect+heightCenter\"></a>\n\n### aspect.heightCenter \u21d2 <code>number</code>\nGet center of height\n\n**Kind**: instance property of [<code>Aspect</code>](#Aspect)  \n**Returns**: <code>number</code> - Center of height  \n<a name=\"Aspect+widthCenter\"></a>\n\n### aspect.widthCenter \u21d2 <code>number</code>\nGet center of width\n\n**Kind**: instance property of [<code>Aspect</code>](#Aspect)  \n**Returns**: <code>number</code> - Center of with  \n<a name=\"Aspect+center\"></a>\n\n### aspect.center \u21d2 <code>Point</code>\nGet center of aspect\n\n**Kind**: instance property of [<code>Aspect</code>](#Aspect)  \n**Returns**: <code>Point</code> - Center point of this aspect  \n",
    "PointCollection": "<a name=\"PointCollection\"></a>\n\n## PointCollection\n{Object}  PointCollection                   X & Y coordinates for an object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [x] | <code>number</code> | <code>0</code> | X - x-axis coordinate |\n| [y] | <code>number</code> | <code>0</code> | Y - y-axis coordinate |\n| options | <code>OptionsCollection</code> |  | Ancillary properties |\n\n\n* [PointCollection](#PointCollection)\n    * [new PointCollection()](#new_PointCollection_new)\n    * [.x](#PointCollection+x)\n    * [.x](#PointCollection+x) \u21d2 <code>number</code>\n    * [.y](#PointCollection+y)\n    * [.y](#PointCollection+y) \u21d2 <code>number</code>\n    * [.options](#PointCollection+options) \u21d2 <code>OptionsCollection</code>\n    * [.invert()](#PointCollection+invert)\n\n<a name=\"new_PointCollection_new\"></a>\n\n### new PointCollection()\nCreate a point collection\n\n<a name=\"PointCollection+x\"></a>\n\n### pointCollection.x\nSet x-axis value\n\n**Kind**: instance property of [<code>PointCollection</code>](#PointCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"PointCollection+x\"></a>\n\n### pointCollection.x \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance property of [<code>PointCollection</code>](#PointCollection)  \n**Returns**: <code>number</code> - X coordinate value  \n<a name=\"PointCollection+y\"></a>\n\n### pointCollection.y\nSet the y-axis value\n\n**Kind**: instance property of [<code>PointCollection</code>](#PointCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"PointCollection+y\"></a>\n\n### pointCollection.y \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance property of [<code>PointCollection</code>](#PointCollection)  \n**Returns**: <code>number</code> - Y coordinate value  \n<a name=\"PointCollection+options\"></a>\n\n### pointCollection.options \u21d2 <code>OptionsCollection</code>\nGet options\n\n**Kind**: instance property of [<code>PointCollection</code>](#PointCollection)  \n**Returns**: <code>OptionsCollection</code> - Options collection object  \n<a name=\"PointCollection+invert\"></a>\n\n### pointCollection.invert()\nInvert x & y coordinate values\n\n**Kind**: instance method of [<code>PointCollection</code>](#PointCollection)  \n",
    "StrokeCollection": "<a name=\"StrokeCollection\"></a>\n\n## StrokeCollection\n{Object}   StrokeCollection                 Stroke properties of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| [type] | <code>string</code> | <code>&quot;&#x27;solid&#x27;&quot;</code> | Stroke type; solid | dashed |\n| [segments] | <code>Array.&lt;number&gt;</code> | <code>[5, 5]</code> | Dashed line segment distance(s) |\n| [alpha] | <code>number</code> | <code>1</code> | Alpha (transparency); number/decimal |\n| [width] | <code>number</code> | <code>2</code> | Thickness of stroke |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n\n\n* [StrokeCollection](#StrokeCollection)\n    * [new StrokeCollection()](#new_StrokeCollection_new)\n    * [.color](#StrokeCollection+color)\n    * [.color](#StrokeCollection+color) \u21d2 <code>string</code>\n    * [.type](#StrokeCollection+type)\n    * [.type](#StrokeCollection+type) \u21d2 <code>number</code>\n    * [.segments](#StrokeCollection+segments)\n    * [.segments](#StrokeCollection+segments) \u21d2 <code>Array</code>\n    * [.width](#StrokeCollection+width)\n    * [.width](#StrokeCollection+width) \u21d2 <code>number</code>\n\n<a name=\"new_StrokeCollection_new\"></a>\n\n### new StrokeCollection()\nCreate a stroke collection\n\n<a name=\"StrokeCollection+color\"></a>\n\n### strokeCollection.color\nSet color value\n\n**Kind**: instance property of [<code>StrokeCollection</code>](#StrokeCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | RGB color value |\n\n<a name=\"StrokeCollection+color\"></a>\n\n### strokeCollection.color \u21d2 <code>string</code>\nGet color value\n\n**Kind**: instance property of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Returns**: <code>string</code> - RGB color value  \n<a name=\"StrokeCollection+type\"></a>\n\n### strokeCollection.type\nSet type\n\n**Kind**: instance property of [<code>StrokeCollection</code>](#StrokeCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Type: (0) Solid or (1) Dashed |\n\n<a name=\"StrokeCollection+type\"></a>\n\n### strokeCollection.type \u21d2 <code>number</code>\nGet type\n\n**Kind**: instance property of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Returns**: <code>number</code> - Type: (0) Solid or (1) Dashed  \n<a name=\"StrokeCollection+segments\"></a>\n\n### strokeCollection.segments\nSet segment value\n\n**Kind**: instance property of [<code>StrokeCollection</code>](#StrokeCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array</code> | Dashed line segment distance(s) |\n\n<a name=\"StrokeCollection+segments\"></a>\n\n### strokeCollection.segments \u21d2 <code>Array</code>\nGet segment value\n\n**Kind**: instance property of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Returns**: <code>Array</code> - Dashed line segment distance(s)  \n<a name=\"StrokeCollection+width\"></a>\n\n### strokeCollection.width\nSet width value\n\n**Kind**: instance property of [<code>StrokeCollection</code>](#StrokeCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Thickness of stroke |\n\n<a name=\"StrokeCollection+width\"></a>\n\n### strokeCollection.width \u21d2 <code>number</code>\nGet width value\n\n**Kind**: instance property of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Returns**: <code>number</code> - Thickness of stroke  \n",
    "OptionsCollection": "<a name=\"OptionsCollection\"></a>\n\n## OptionsCollection\n{Object}  OptionsCollection                 Options for shapes, lines, and groups\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [shadow] | <code>boolean</code> | <code>false</code> | Display shadow |\n| [border] | <code>boolean</code> | <code>false</code> | Display border |\n| [axis] | <code>boolean</code> | <code>false</code> | Display axis |\n| [points] | <code>boolean</code> | <code>false</code> | Display points |\n| [coordinates] | <code>boolean</code> | <code>false</code> | Display coordinates |\n| [controlPoints] | <code>boolean</code> | <code>false</code> | Display control points |\n| [shadow] | <code>boolean</code> | <code>false</code> | Display shadow |\n\n\n* [OptionsCollection](#OptionsCollection)\n    * [new OptionsCollection(shadow, border, axis, points, coordinates)](#new_OptionsCollection_new)\n    * [.shadow](#OptionsCollection+shadow)\n    * [.shadow](#OptionsCollection+shadow) \u21d2 <code>boolean</code>\n    * [.border](#OptionsCollection+border)\n    * [.border](#OptionsCollection+border) \u21d2 <code>boolean</code>\n    * [.axis](#OptionsCollection+axis)\n    * [.axis](#OptionsCollection+axis) \u21d2 <code>boolean</code>\n    * [.coordinates](#OptionsCollection+coordinates)\n    * [.coordinates](#OptionsCollection+coordinates) \u21d2 <code>boolean</code>\n    * [.controlPoints](#OptionsCollection+controlPoints)\n    * [.controlPoints](#OptionsCollection+controlPoints) \u21d2 <code>boolean</code>\n\n<a name=\"new_OptionsCollection_new\"></a>\n\n### new OptionsCollection(shadow, border, axis, points, coordinates)\nCreate an options collection\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| shadow | <code>boolean</code> | Show shadow |\n| border | <code>boolean</code> | Show border |\n| axis | <code>boolean</code> | Show axis |\n| points | <code>boolean</code> | Show points |\n| coordinates | <code>boolean</code> | Show coordinates |\n\n<a name=\"OptionsCollection+shadow\"></a>\n\n### optionsCollection.shadow\nSet shadow value\n\n**Kind**: instance property of [<code>OptionsCollection</code>](#OptionsCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Shadow; true | false |\n\n<a name=\"OptionsCollection+shadow\"></a>\n\n### optionsCollection.shadow \u21d2 <code>boolean</code>\nGet shadow value\n\n**Kind**: instance property of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Returns**: <code>boolean</code> - Shadow; true | false  \n<a name=\"OptionsCollection+border\"></a>\n\n### optionsCollection.border\nSet border value\n\n**Kind**: instance property of [<code>OptionsCollection</code>](#OptionsCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Border; true | false |\n\n<a name=\"OptionsCollection+border\"></a>\n\n### optionsCollection.border \u21d2 <code>boolean</code>\nGet border value\n\n**Kind**: instance property of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Returns**: <code>boolean</code> - Border; true | false  \n<a name=\"OptionsCollection+axis\"></a>\n\n### optionsCollection.axis\nSet axis value\n\n**Kind**: instance property of [<code>OptionsCollection</code>](#OptionsCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Axis; true | false |\n\n<a name=\"OptionsCollection+axis\"></a>\n\n### optionsCollection.axis \u21d2 <code>boolean</code>\nGet axis value\n\n**Kind**: instance property of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Returns**: <code>boolean</code> - Axis; true | false  \n<a name=\"OptionsCollection+coordinates\"></a>\n\n### optionsCollection.coordinates\nSet coordinates value\n\n**Kind**: instance property of [<code>OptionsCollection</code>](#OptionsCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Coordinates; true | false |\n\n<a name=\"OptionsCollection+coordinates\"></a>\n\n### optionsCollection.coordinates \u21d2 <code>boolean</code>\nGet coordinates value\n\n**Kind**: instance property of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Returns**: <code>boolean</code> - Coordinates; true | false  \n<a name=\"OptionsCollection+controlPoints\"></a>\n\n### optionsCollection.controlPoints\nSet control points value\n\n**Kind**: instance property of [<code>OptionsCollection</code>](#OptionsCollection)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Control points; true | false |\n\n<a name=\"OptionsCollection+controlPoints\"></a>\n\n### optionsCollection.controlPoints \u21d2 <code>boolean</code>\nGet control points value\n\n**Kind**: instance property of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Returns**: <code>boolean</code> - Control points; true | false  \n",
    "Hwb": "## Classes\n\n<dl>\n<dt><a href=\"#Hwb\">Hwb</a></dt>\n<dd><p>{Object} Hwb \t\t\t\t\t\t\t\tHWB color model</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#hue\">hue(hue)</a></dt>\n<dd><p>Sets the hue value</p>\n</dd>\n<dt><a href=\"#hue\">hue(Hue)</a></dt>\n<dd><p>Gets the hue value</p>\n</dd>\n<dt><a href=\"#whiteness\">whiteness(whiteness)</a></dt>\n<dd><p>Sets the whiteness value</p>\n</dd>\n<dt><a href=\"#whiteness\">whiteness(Whiteness)</a></dt>\n<dd><p>Gets the whiteness value</p>\n</dd>\n<dt><a href=\"#blackness\">blackness(blackness)</a></dt>\n<dd><p>Sets the blackness value</p>\n</dd>\n<dt><a href=\"#blackness\">blackness(Blackness)</a></dt>\n<dd><p>Gets the blackness value</p>\n</dd>\n<dt><a href=\"#toCss\">toCss()</a> \u21d2 <code>string</code></dt>\n<dd><p>Returns a CSS compatible <color> string value</p>\n</dd>\n</dl>\n\n<a name=\"Hwb\"></a>\n\n## Hwb\n{Object} Hwb \t\t\t\t\t\t\t\tHWB color model\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [hue] | <code>number</code> | <code>0</code> | Hue value; 0 - 360 (degree) |\n| [whiteness] | <code>number</code> | <code>0</code> | Whiteness value; 0 - 1 (decimal) |\n| [blackness] | <code>number</code> | <code>0</code> | Blackness value; 0 - 1 (decimal) |\n| [alpha] | <code>number</code> | <code>1</code> | Alpha value; 0 - 1 (decimal) |\n\n<a name=\"new_Hwb_new\"></a>\n\n### new Hwb(hue, whiteness, blackness, alpha)\nCreate an HWB color Model\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| hue | <code>number</code> | Hue value |\n| whiteness | <code>number</code> | Whiteness value |\n| blackness | <code>number</code> | Blackness value |\n| alpha | <code>number</code> | Alpha value |\n\n<a name=\"hue\"></a>\n\n## hue(hue)\nSets the hue value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| hue | <code>number</code> | Hue value; 0 - 360 |\n\n<a name=\"hue\"></a>\n\n## hue(Hue)\nGets the hue value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Hue | <code>number</code> | value; 0 - 360 |\n\n<a name=\"whiteness\"></a>\n\n## whiteness(whiteness)\nSets the whiteness value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| whiteness | <code>number</code> | Whiteness value; 0 - 1 |\n\n<a name=\"whiteness\"></a>\n\n## whiteness(Whiteness)\nGets the whiteness value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Whiteness | <code>number</code> | value; 0 - 1 |\n\n<a name=\"blackness\"></a>\n\n## blackness(blackness)\nSets the blackness value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| blackness | <code>number</code> | Blackness value; 0 - 1 |\n\n<a name=\"blackness\"></a>\n\n## blackness(Blackness)\nGets the blackness value\n\n**Kind**: global function  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Blackness | <code>number</code> | value; 0 - 1 |\n\n<a name=\"toCss\"></a>\n\n## toCss() \u21d2 <code>string</code>\nReturns a CSS compatible <color> string value\n\n**Kind**: global function  \n**Returns**: <code>string</code> - CSS <color> string  \n**Access**: public  \n",
    "Stroke": "<a name=\"Stroke\"></a>\n\n## Stroke\n{Object}   Stroke                           Stroke properties of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| [type] | <code>string</code> | <code>&quot;&#x27;solid&#x27;&quot;</code> | Stroke type; solid | dashed |\n| [segments] | <code>Array.&lt;number&gt;</code> | <code>[5, 5]</code> | Dashed line segment distance(s); <array<numbers>> |\n| [width] | <code>number</code> | <code>2</code> | Thickness of stroke |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n\n\n* [Stroke](#Stroke)\n    * [new Stroke(color, type, segments, alpha, width)](#new_Stroke_new)\n    * [.type](#Stroke+type)\n    * [.type](#Stroke+type) \u21d2 <code>number</code>\n    * [.segments](#Stroke+segments)\n    * [.segments](#Stroke+segments) \u21d2 <code>Array</code>\n    * [.color](#Stroke+color)\n    * [.color](#Stroke+color) \u21d2 <code>string</code>\n    * [.width](#Stroke+width)\n    * [.width](#Stroke+width) \u21d2 <code>number</code>\n\n<a name=\"new_Stroke_new\"></a>\n\n### new Stroke(color, type, segments, alpha, width)\nCreate a stroke\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| color | <code>Object</code> | RGB color value |\n| type | <code>number</code> | Stroke type |\n| segments | <code>Array.&lt;number&gt;</code> | Dashed line segment distance(s) |\n| alpha | <code>number</code> | Alpha value; number/decimal |\n| width | <code>number</code> | Thickness of stroke |\n\n<a name=\"Stroke+type\"></a>\n\n### stroke.type\nSet type\n\n**Kind**: instance property of [<code>Stroke</code>](#Stroke)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Type: (0) Solid or (1) Dashed |\n\n<a name=\"Stroke+type\"></a>\n\n### stroke.type \u21d2 <code>number</code>\nGet type\n\n**Kind**: instance property of [<code>Stroke</code>](#Stroke)  \n**Returns**: <code>number</code> - Type: (0) Solid or (1) Dashed  \n<a name=\"Stroke+segments\"></a>\n\n### stroke.segments\nSet segment value\n\n**Kind**: instance property of [<code>Stroke</code>](#Stroke)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array</code> | Dashed line segment distance(s) |\n\n<a name=\"Stroke+segments\"></a>\n\n### stroke.segments \u21d2 <code>Array</code>\nGet segment value\n\n**Kind**: instance property of [<code>Stroke</code>](#Stroke)  \n**Returns**: <code>Array</code> - Dashed line segment distance(s)  \n<a name=\"Stroke+color\"></a>\n\n### stroke.color\nSet color value\n\n**Kind**: instance property of [<code>Stroke</code>](#Stroke)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | RGB color value |\n\n<a name=\"Stroke+color\"></a>\n\n### stroke.color \u21d2 <code>string</code>\nGet color value\n\n**Kind**: instance property of [<code>Stroke</code>](#Stroke)  \n**Returns**: <code>string</code> - RGB color value  \n<a name=\"Stroke+width\"></a>\n\n### stroke.width\nSet width value\n\n**Kind**: instance property of [<code>Stroke</code>](#Stroke)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Thickness of stroke |\n\n<a name=\"Stroke+width\"></a>\n\n### stroke.width \u21d2 <code>number</code>\nGet width value\n\n**Kind**: instance property of [<code>Stroke</code>](#Stroke)  \n**Returns**: <code>number</code> - Thickness of stroke  \n",
    "Font": "<a name=\"Font\"></a>\n\n## Font\n{Object} Font                               Font base class for text objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| type | <code>string</code> |  | Font type or face; typography name |\n| [size] | <code>number</code> | <code>24</code> | Size of font; in pixels |\n| [weight] | <code>string</code> | <code>&quot;&#x27;normal&#x27;&quot;</code> | Weight of font |\n| maxWidth | <code>number</code> |  | Font's maximum width |\n| offset | <code>Point</code> |  | Point offset coordinates |\n\n\n* [Font](#Font)\n    * [.type](#Font+type)\n    * [.type](#Font+type) \u21d2 <code>string</code>\n    * [.size](#Font+size)\n    * [.size](#Font+size) \u21d2 <code>number</code>\n    * [.weight](#Font+weight)\n    * [.weight](#Font+weight) \u21d2 <code>number</code>\n    * [.maxWidth](#Font+maxWidth)\n    * [.maxWidth](#Font+maxWidth) \u21d2 <code>number</code>\n    * [.offset](#Font+offset) \u21d2 <code>Point</code>\n    * [.font](#Font+font)\n    * [.font](#Font+font) \u21d2 <code>string</code>\n\n<a name=\"Font+type\"></a>\n\n### font.type\nSet font type\n\n**Kind**: instance property of [<code>Font</code>](#Font)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Type face; typography name |\n\n<a name=\"Font+type\"></a>\n\n### font.type \u21d2 <code>string</code>\nGet type\n\n**Kind**: instance property of [<code>Font</code>](#Font)  \n**Returns**: <code>string</code> - Type face; typography name  \n<a name=\"Font+size\"></a>\n\n### font.size\nSet font size\n\n**Kind**: instance property of [<code>Font</code>](#Font)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font size |\n\n<a name=\"Font+size\"></a>\n\n### font.size \u21d2 <code>number</code>\nGet font size\n\n**Kind**: instance property of [<code>Font</code>](#Font)  \n**Returns**: <code>number</code> - Font size  \n<a name=\"Font+weight\"></a>\n\n### font.weight\nSet font weight\n\n**Kind**: instance property of [<code>Font</code>](#Font)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font weight |\n\n<a name=\"Font+weight\"></a>\n\n### font.weight \u21d2 <code>number</code>\nGet font weight\n\n**Kind**: instance property of [<code>Font</code>](#Font)  \n**Returns**: <code>number</code> - Font weight  \n<a name=\"Font+maxWidth\"></a>\n\n### font.maxWidth\nSet font's max width\n\n**Kind**: instance property of [<code>Font</code>](#Font)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Max width |\n\n<a name=\"Font+maxWidth\"></a>\n\n### font.maxWidth \u21d2 <code>number</code>\nGet font's max width\n\n**Kind**: instance property of [<code>Font</code>](#Font)  \n**Returns**: <code>number</code> - Max width  \n<a name=\"Font+offset\"></a>\n\n### font.offset \u21d2 <code>Point</code>\nGet font's offset\n\n**Kind**: instance property of [<code>Font</code>](#Font)  \n**Returns**: <code>Point</code> - Font's offset; ( x, y )  \n<a name=\"Font+font\"></a>\n\n### font.font\nSet font\n\n**Kind**: instance property of [<code>Font</code>](#Font)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | CSS style font property syntax |\n\n<a name=\"Font+font\"></a>\n\n### font.font \u21d2 <code>string</code>\nGet font\n\n**Kind**: instance property of [<code>Font</code>](#Font)  \n**Returns**: <code>string</code> - CSS style font property syntax  \n",
    "Angle": "<a name=\"Angle\"></a>\n\n## Angle\n{Object}  Angle                             Angle properties of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [start] | <code>number</code> | <code>0</code> | The start of the angle, in radians; measured from the positive x-axis |\n| [end] | <code>number</code> | <code>360</code> | The end of the angle, in radians; measured from the positive x-axis |\n| [clockwise] | <code>boolean</code> | <code>true</code> | Path arc clockwise |\n\n\n* [Angle](#Angle)\n    * [new Angle(start, end, clockwise)](#new_Angle_new)\n    * [.start](#Angle+start)\n    * [.start](#Angle+start) \u21d2 <code>number</code>\n    * [.end](#Angle+end)\n    * [.end](#Angle+end) \u21d2 <code>number</code>\n    * [.clockwise](#Angle+clockwise)\n    * [.clockwise](#Angle+clockwise) \u21d2 <code>boolean</code>\n    * [.startInRadians](#Angle+startInRadians) \u21d2 <code>number</code>\n    * [.endInRadians](#Angle+endInRadians) \u21d2 <code>number</code>\n    * [._convert2Radian(value)](#Angle+_convert2Radian) \u21d2 <code>number</code>\n    * [._convert2Degree(value)](#Angle+_convert2Degree) \u21d2 <code>number</code>\n\n<a name=\"new_Angle_new\"></a>\n\n### new Angle(start, end, clockwise)\nCreate an angle\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| start | <code>number</code> | The angle at which the arc starts in degrees, measured from the positive x-axis |\n| end | <code>number</code> | The angle at which the arc ends in degrees, measured from the positive x-axis |\n| clockwise | <code>boolean</code> | Draws the arc clockwise between the start and end angles |\n\n<a name=\"Angle+start\"></a>\n\n### angle.start\nSet start angle\n\n**Kind**: instance property of [<code>Angle</code>](#Angle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Start angle; in degrees |\n\n<a name=\"Angle+start\"></a>\n\n### angle.start \u21d2 <code>number</code>\nGet start angle\n\n**Kind**: instance property of [<code>Angle</code>](#Angle)  \n**Returns**: <code>number</code> - Start value; in degrees  \n<a name=\"Angle+end\"></a>\n\n### angle.end\nSet end angle\n\n**Kind**: instance property of [<code>Angle</code>](#Angle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | End angle; in degrees |\n\n<a name=\"Angle+end\"></a>\n\n### angle.end \u21d2 <code>number</code>\nGet end angle\n\n**Kind**: instance property of [<code>Angle</code>](#Angle)  \n**Returns**: <code>number</code> - End angle; in degrees  \n<a name=\"Angle+clockwise\"></a>\n\n### angle.clockwise\nSet clockwise\n\n**Kind**: instance property of [<code>Angle</code>](#Angle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Clockwise; true | false |\n\n<a name=\"Angle+clockwise\"></a>\n\n### angle.clockwise \u21d2 <code>boolean</code>\nGet clockwise\n\n**Kind**: instance property of [<code>Angle</code>](#Angle)  \n**Returns**: <code>boolean</code> - Clockwise; true | false  \n<a name=\"Angle+startInRadians\"></a>\n\n### angle.startInRadians \u21d2 <code>number</code>\nGet start angle in radians\n\n**Kind**: instance property of [<code>Angle</code>](#Angle)  \n**Returns**: <code>number</code> - Start value; to radians  \n<a name=\"Angle+endInRadians\"></a>\n\n### angle.endInRadians \u21d2 <code>number</code>\nGet end angle in radians\n\n**Kind**: instance property of [<code>Angle</code>](#Angle)  \n**Returns**: <code>number</code> - End value; in radians  \n<a name=\"Angle+_convert2Radian\"></a>\n\n### angle.\\_convert2Radian(value) \u21d2 <code>number</code>\nConvert degree to radian\n\n**Kind**: instance method of [<code>Angle</code>](#Angle)  \n**Returns**: <code>number</code> - Conversion in radians  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Degree |\n\n<a name=\"Angle+_convert2Degree\"></a>\n\n### angle.\\_convert2Degree(value) \u21d2 <code>number</code>\nConvert radian to degree\n\n**Kind**: instance method of [<code>Angle</code>](#Angle)  \n**Returns**: <code>number</code> - Conversion in degrees  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Radian |\n\n",
    "Circle": "<a name=\"Circle\"></a>\n\n## Circle\n{Object} Circle                             Circle object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| point | <code>Point</code> |  | X & Y axis coordinates |\n| [radius] | <code>number</code> | <code>25</code> | Radius of circle |\n| angle | <code>Angle</code> |  | Angle properties |\n| stroke | <code>Stroke</code> |  | Stroke properties |\n| fill | <code>Fill</code> |  | Fill properties |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n| canvas | <code>HTMLCanvasElement</code> |  | 2D canvas context |\n\n\n* [Circle](#Circle)\n    * [new Circle()](#new_Circle_new)\n    * [.point](#Circle+point)\n    * [.point](#Circle+point) \u21d2 <code>Point</code>\n    * [.x](#Circle+x)\n    * [.x](#Circle+x) \u21d2 <code>number</code>\n    * [.y](#Circle+y)\n    * [.y](#Circle+y) \u21d2 <code>number</code>\n    * [.radius](#Circle+radius)\n    * [.radius](#Circle+radius) \u21d2 <code>number</code>\n    * [.angle](#Circle+angle) \u21d2 <code>Angle</code>\n    * [.stroke](#Circle+stroke) \u21d2 <code>Stroke</code>\n    * [.fill](#Circle+fill) \u21d2 <code>Fill</code>\n    * [.shadow](#Circle+shadow) \u21d2 <code>Shadow</code>\n    * [.canvas](#Circle+canvas)\n    * [.canvas](#Circle+canvas) \u21d2 <code>string</code>\n    * [.anchor](#Circle+anchor) \u21d2 <code>Anchor</code>\n    * [.options](#Circle+options) \u21d2 <code>Options</code>\n    * [.area](#Circle+area) \u21d2 <code>number</code>\n    * [.diameter](#Circle+diameter) \u21d2 <code>number</code>\n    * [.circumference](#Circle+circumference) \u21d2 <code>number</code>\n    * [.center](#Circle+center) \u21d2 <code>Point</code>\n    * [._drawOptions()](#Circle+_drawOptions)\n    * [._drawAnchor()](#Circle+_drawAnchor)\n    * [._setAnchorPoint()](#Circle+_setAnchorPoint)\n    * [.showCoordinates([offset], [fontSize])](#Circle+showCoordinates)\n    * [.move(degree, distance, [clear])](#Circle+move)\n    * [.rotate(degree, [clear])](#Circle+rotate)\n    * [.isThere(circle)](#Circle+isThere)\n    * [.draw(canvas)](#Circle+draw)\n    * [.redraw(canvas, point, [clear])](#Circle+redraw)\n\n<a name=\"new_Circle_new\"></a>\n\n### new Circle()\nCreate a circle\n\n<a name=\"Circle+point\"></a>\n\n### circle.point\nSet point\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**See**: [discrete.point](discrete.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Circle+point\"></a>\n\n### circle.point \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**See**: [discrete.point](discrete.point)  \n<a name=\"Circle+x\"></a>\n\n### circle.x\nSet x-axis value\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**See**: [discrete.pointX](discrete.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Circle+x\"></a>\n\n### circle.x \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> - X coordinate value  \n**See**: [discrete.pointX](discrete.pointX)  \n<a name=\"Circle+y\"></a>\n\n### circle.y\nSet the y-axis value\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**See**: [discrete.pointY](discrete.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Circle+y\"></a>\n\n### circle.y \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> - Y coordinate value  \n**See**: [discrete.pointY](discrete.pointY)  \n<a name=\"Circle+radius\"></a>\n\n### circle.radius\nSet radius value\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Radius of circle |\n\n<a name=\"Circle+radius\"></a>\n\n### circle.radius \u21d2 <code>number</code>\nGet radius value\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> - Radius of circle  \n<a name=\"Circle+angle\"></a>\n\n### circle.angle \u21d2 <code>Angle</code>\nGet angle properties\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Angle</code> - Angle properties  \n<a name=\"Circle+stroke\"></a>\n\n### circle.stroke \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n<a name=\"Circle+fill\"></a>\n\n### circle.fill \u21d2 <code>Fill</code>\nGet fill properties\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Fill</code> - Fill properties  \n<a name=\"Circle+shadow\"></a>\n\n### circle.shadow \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n<a name=\"Circle+canvas\"></a>\n\n### circle.canvas\nSet canvas value\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**See**: [discrete.canvas](discrete.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Circle+canvas\"></a>\n\n### circle.canvas \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>string</code> - Canvas id  \n**See**: [discrete.canvas](discrete.canvas)  \n<a name=\"Circle+anchor\"></a>\n\n### circle.anchor \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Anchor</code> - Anchor properties  \n<a name=\"Circle+options\"></a>\n\n### circle.options \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Options</code> - Options properties  \n<a name=\"Circle+area\"></a>\n\n### circle.area \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> - Area of circle  \n<a name=\"Circle+diameter\"></a>\n\n### circle.diameter \u21d2 <code>number</code>\nGet diameter of circle\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> - Diameter of circle  \n<a name=\"Circle+circumference\"></a>\n\n### circle.circumference \u21d2 <code>number</code>\nGet circumference of circle\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> - Circumference of circle  \n<a name=\"Circle+center\"></a>\n\n### circle.center \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance property of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Point</code> - Center point coordinates  \n<a name=\"Circle+_drawOptions\"></a>\n\n### circle.\\_drawOptions()\nDraws associated options\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n<a name=\"Circle+_drawAnchor\"></a>\n\n### circle.\\_drawAnchor()\nDraws anchor point\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n<a name=\"Circle+_setAnchorPoint\"></a>\n\n### circle.\\_setAnchorPoint()\nSets anchor's point against this object's point location\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n<a name=\"Circle+showCoordinates\"></a>\n\n### circle.showCoordinates([offset], [fontSize])\nShows coordinates of this object\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of coordinates y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Coordinates font size |\n\n<a name=\"Circle+move\"></a>\n\n### circle.move(degree, distance, [clear])\nMove this object\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Direction to move; in degrees |\n| distance | <code>number</code> |  | Distance to move |\n| [clear] | <code>boolean</code> | <code>true</code> | Clear canvas during each movement |\n\n<a name=\"Circle+rotate\"></a>\n\n### circle.rotate(degree, [clear])\nRotate this object\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"Circle+isThere\"></a>\n\n### circle.isThere(circle)\nCheck whether the passed object is already present\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| circle | [<code>Circle</code>](#Circle) | Object to validate |\n\n<a name=\"Circle+draw\"></a>\n\n### circle.draw(canvas)\nDraw this object\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n<a name=\"Circle+redraw\"></a>\n\n### circle.redraw(canvas, point, [clear])\nRedraw this object\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| canvas | <code>string</code> |  | Canvas Id |\n| point | <code>Point</code> |  | Point of new location |\n| [clear] | <code>boolean</code> | <code>true</code> | Clear canvas during each redraw |\n\n",
    "Line": "<a name=\"Line\"></a>\n\n## Line\n{Object} Line                               Line object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>Point</code> |  | X & Y axis coordinates (start) |\n| end | <code>Point</code> |  | X & Y axis coordinates (end) |\n| stroke | <code>Stroke</code> |  | Stroke properties |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n| [lineCap] | <code>string</code> | <code>&quot;&#x27;round&#x27;&quot;</code> | Shape of end points |\n| canvas | <code>HTMLCanvasElement</code> |  | 2D canvas context |\n\n\n* [Line](#Line)\n    * [new Line()](#new_Line_new)\n    * [.start](#Line+start)\n    * [.start](#Line+start) \u21d2 <code>Point</code>\n    * [.end](#Line+end)\n    * [.end](#Line+end) \u21d2 <code>Point</code>\n    * [.stroke](#Line+stroke) \u21d2 <code>Stroke</code>\n    * [.shadow](#Line+shadow) \u21d2 <code>Shadow</code>\n    * [.lineCap](#Line+lineCap)\n    * [.lineCap](#Line+lineCap) \u21d2 <code>string</code>\n    * [.canvas](#Line+canvas)\n    * [.canvas](#Line+canvas) \u21d2 <code>string</code>\n    * [.options](#Line+options) \u21d2 <code>Options</code>\n    * [.controlPoints](#Line+controlPoints) \u21d2 <code>ControlPoints</code>\n    * [.center](#Line+center) \u21d2 <code>Point</code>\n    * [._drawOptions()](#Line+_drawOptions)\n    * [.drawPoints([offset])](#Line+drawPoints)\n    * [.showCoordinates([offset], [fontSize])](#Line+showCoordinates)\n    * [.showControlPoints([offset], [fontSize])](#Line+showControlPoints)\n    * [.move(degree, distance, [clear])](#Line+move)\n    * [.rotate(degree, [anchor], [clear])](#Line+rotate)\n    * [.curve()](#Line+curve) : <code>Object</code>\n    * [.isThere(line)](#Line+isThere)\n    * [.draw(canvas)](#Line+draw)\n    * [.redraw(canvas, start, end, clear)](#Line+redraw)\n\n<a name=\"new_Line_new\"></a>\n\n### new Line()\nCreate a line\n\n<a name=\"Line+start\"></a>\n\n### line.start\nSet starting point\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Starting point |\n\n<a name=\"Line+start\"></a>\n\n### line.start \u21d2 <code>Point</code>\nSet starting point\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n**Returns**: <code>Point</code> - Starting point  \n<a name=\"Line+end\"></a>\n\n### line.end\nSet ending point\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Ending point |\n\n<a name=\"Line+end\"></a>\n\n### line.end \u21d2 <code>Point</code>\nSet ending point\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n**Returns**: <code>Point</code> - Ending point  \n<a name=\"Line+stroke\"></a>\n\n### line.stroke \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n<a name=\"Line+shadow\"></a>\n\n### line.shadow \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n<a name=\"Line+lineCap\"></a>\n\n### line.lineCap\nSet line cap\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Line cap |\n\n<a name=\"Line+lineCap\"></a>\n\n### line.lineCap \u21d2 <code>string</code>\nGet line cap\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n**Returns**: <code>string</code> - Line cap  \n<a name=\"Line+canvas\"></a>\n\n### line.canvas\nSet canvas value\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n**See**: [discrete.canvas](discrete.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Line+canvas\"></a>\n\n### line.canvas \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n**Returns**: <code>string</code> - Canvas id  \n**See**: [discrete.canvas](discrete.canvas)  \n<a name=\"Line+options\"></a>\n\n### line.options \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n**Returns**: <code>Options</code> - Options properties  \n<a name=\"Line+controlPoints\"></a>\n\n### line.controlPoints \u21d2 <code>ControlPoints</code>\nGet control point properties\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n**Returns**: <code>ControlPoints</code> - Control points properties  \n<a name=\"Line+center\"></a>\n\n### line.center \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance property of [<code>Line</code>](#Line)  \n**Returns**: <code>Point</code> - Center point coordinates  \n<a name=\"Line+_drawOptions\"></a>\n\n### line.\\_drawOptions()\nDraws associated options\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n<a name=\"Line+drawPoints\"></a>\n\n### line.drawPoints([offset])\nDraws associated options for start & end points\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of drawable options |\n\n<a name=\"Line+showCoordinates\"></a>\n\n### line.showCoordinates([offset], [fontSize])\nShows coordinates of this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of coordinates y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Coordinates font size |\n\n<a name=\"Line+showControlPoints\"></a>\n\n### line.showControlPoints([offset], [fontSize])\nShow control points for this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of control points y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Control points font size |\n\n<a name=\"Line+move\"></a>\n\n### line.move(degree, distance, [clear])\nMove this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Direction to move; in degrees |\n| distance | <code>number</code> |  | Distance to move |\n| [clear] | <code>boolean</code> | <code>true</code> | Clear canvas during each movement |\n\n<a name=\"Line+rotate\"></a>\n\n### line.rotate(degree, [anchor], [clear])\nRotate this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [anchor] | <code>string</code> | <code>&quot;&#x27;center&#x27;&quot;</code> | Anchoring point during rotation |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"Line+curve\"></a>\n\n### line.curve() : <code>Object</code>\n[one description]\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n<a name=\"Line+isThere\"></a>\n\n### line.isThere(line)\nCheck whether the passed object is already present\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| line | [<code>Line</code>](#Line) | Object to validate |\n\n<a name=\"Line+draw\"></a>\n\n### line.draw(canvas)\nDraw this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n<a name=\"Line+redraw\"></a>\n\n### line.redraw(canvas, start, end, clear)\nRedraw this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| canvas | <code>string</code> |  | Canvas Id |\n| start | <code>Point</code> |  | Point of new start location |\n| end | <code>Point</code> |  | Point of new end location |\n| clear | <code>boolean</code> | <code>true</code> | Clear canvas during each redraw |\n\n"
}