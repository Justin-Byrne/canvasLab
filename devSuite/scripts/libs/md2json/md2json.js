let md2json =
{
    "Texts": "<a name=\"Texts\"></a>\n\n## Texts\n{Array}             Texts                   Collection of Text objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| stroke | <code>StrokeCollection</code> | Stroke collection properties |\n| shadow | <code>ShadowCollection</code> | Shadow collection properties |\n| aspect | <code>Aspect</code> | Aspect properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n| template | <code>Template</code> | Canvas Lab Template object |\n| anchor | <code>Anchor</code> | Anchor properties |\n| options | <code>Options</code> | Options for this object |\n\n\n* [Texts](#Texts)\n    * [new Texts()](#new_Texts_new)\n    * [.point(value)](#Texts+point)\n    * [.point()](#Texts+point) \u21d2 <code>Point</code>\n    * [.x(value)](#Texts+x)\n    * [.x()](#Texts+x) \u21d2 <code>number</code>\n    * [.y(value)](#Texts+y)\n    * [.y()](#Texts+y) \u21d2 <code>number</code>\n    * [.stroke()](#Texts+stroke) \u21d2 <code>Stroke</code>\n    * [.shadow()](#Texts+shadow) \u21d2 <code>Shadow</code>\n    * [.aspect()](#Texts+aspect) \u21d2 <code>Aspect</code>\n    * [.width()](#Texts+width) \u21d2 <code>number</code>\n    * [.height()](#Texts+height) \u21d2 <code>number</code>\n    * [.canvas(value)](#Texts+canvas)\n    * [.canvas()](#Texts+canvas) \u21d2 <code>string</code>\n    * [.template(value)](#Texts+template)\n    * [.template()](#Texts+template) \u21d2 <code>Template</code>\n    * [.anchor(value)](#Texts+anchor)\n    * [.anchor()](#Texts+anchor) \u21d2 <code>Anchor</code>\n    * [.options()](#Texts+options) \u21d2 <code>Object</code>\n    * [.storageType()](#Texts+storageType) \u21d2 <code>clObject</code>\n    * [.area()](#Texts+area) \u21d2 <code>number</code>\n    * [.center()](#Texts+center) \u21d2 <code>Point</code>\n    * [.endPoint()](#Texts+endPoint) \u21d2 <code>Point</code>\n    * [.perimeter()](#Texts+perimeter) \u21d2 <code>number</code>\n    * [.getPoints(indexes, color)](#Texts+getPoints)\n    * [.push()](#Texts+push)\n    * [.draw(canvas)](#Texts+draw)\n\n<a name=\"new_Texts_new\"></a>\n\n### new Texts()\nCreate Texts object\n\n<a name=\"Texts+point\"></a>\n\n### texts.point(value)\nSet point\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Texts+point\"></a>\n\n### texts.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n<a name=\"Texts+x\"></a>\n\n### texts.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Texts+x\"></a>\n\n### texts.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n<a name=\"Texts+y\"></a>\n\n### texts.y(value)\nSet the y-axis value\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Texts+y\"></a>\n\n### texts.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n<a name=\"Texts+stroke\"></a>\n\n### texts.stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"Texts+shadow\"></a>\n\n### texts.shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"Texts+aspect\"></a>\n\n### texts.aspect() \u21d2 <code>Aspect</code>\nGet aspect properties\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>Aspect</code> - Aspect properties  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.aspect](PROPERTY_BLOCKS.collection.aspect)  \n<a name=\"Texts+width\"></a>\n\n### texts.width() \u21d2 <code>number</code>\nGet aspect with\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>number</code> - Width value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.aspectWidth](PROPERTY_BLOCKS.collection.aspectWidth)  \n<a name=\"Texts+height\"></a>\n\n### texts.height() \u21d2 <code>number</code>\nGet aspect height\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>number</code> - Height value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.aspectHeight](PROPERTY_BLOCKS.collection.aspectHeight)  \n<a name=\"Texts+canvas\"></a>\n\n### texts.canvas(value)\nSet canvas value\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.canvas](PROPERTY_BLOCKS.collection.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Texts+canvas\"></a>\n\n### texts.canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.canvas](PROPERTY_BLOCKS.collection.canvas)  \n<a name=\"Texts+template\"></a>\n\n### texts.template(value)\nSet template\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.template](PROPERTY_BLOCKS.collection.template)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Template</code> | Template object |\n\n<a name=\"Texts+template\"></a>\n\n### texts.template() \u21d2 <code>Template</code>\nGet template\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>Template</code> - Template object  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.template](PROPERTY_BLOCKS.collection.template)  \n<a name=\"Texts+anchor\"></a>\n\n### texts.anchor(value)\nSet anchor type\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.anchor](PROPERTY_BLOCKS.collection.anchor)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Anchor type |\n\n<a name=\"Texts+anchor\"></a>\n\n### texts.anchor() \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>Anchor</code> - Anchor properties  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.anchor](PROPERTY_BLOCKS.collection.anchor)  \n<a name=\"Texts+options\"></a>\n\n### texts.options() \u21d2 <code>Object</code>\nGet options\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>Object</code> - Options object  \n**Access**: public  \n<a name=\"Texts+storageType\"></a>\n\n### texts.storageType() \u21d2 <code>clObject</code>\nReturns this collection's storage type\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>clObject</code> - Canvas Lab object  \n**Access**: public  \n<a name=\"Texts+area\"></a>\n\n### texts.area() \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>number</code> - Area of rectangle  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.area](PROPERTY_BLOCKS.collection.area)  \n<a name=\"Texts+center\"></a>\n\n### texts.center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>Point</code> - Center point coordinates  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.center](PROPERTY_BLOCKS.collection.center)  \n<a name=\"Texts+endPoint\"></a>\n\n### texts.endPoint() \u21d2 <code>Point</code>\nReturns the last Point within this Array\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>Point</code> - Last Array element's X & Y Coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.endPoint](PROPERTY_BLOCKS.collection.endPoint)  \n<a name=\"Texts+perimeter\"></a>\n\n### texts.perimeter() \u21d2 <code>number</code>\nGet perimeter of this object\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Returns**: <code>number</code> - Perimeter of rectangle  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.perimeter](PROPERTY_BLOCKS.collection.perimeter)  \n<a name=\"Texts+getPoints\"></a>\n\n### texts.getPoints(indexes, color)\nGet all or specific points throughout this collection\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Access**: public  \n**See**: [UTILITIES.collection.getPoints](UTILITIES.collection.getPoints)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| indexes | <code>Array.&lt;number&gt;</code> | Indexes of points |\n| color | <code>Rgb</code> | Color to colorize objects selected points |\n\n<a name=\"Texts+push\"></a>\n\n### texts.push()\nPushes child object(s) into this collection\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Access**: public  \n**See**: [UTILITIES.collection.push](UTILITIES.collection.push)  \n<a name=\"Texts+draw\"></a>\n\n### texts.draw(canvas)\nDraw function for collections\n\n**Kind**: instance method of [<code>Texts</code>](#Texts)  \n**Access**: public  \n**See**: [UTILITIES.collection.draw](UTILITIES.collection.draw)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Text": "<a name=\"Text\"></a>\n\n## Text\n{Object}            Text                    Text element to render within a canvas element\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| text | <code>string</code> | Text to display |\n| stroke | <code>Stroke</code> | Stroke properties |\n| fill | <code>Fill</code> | Fill properties |\n| shadow | <code>Shadow</code> | Shadow properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n| options | <code>Options</code> | Options for this object |\n| position | <code>Position</code> | Position properties |\n\n\n* [Text](#Text)\n    * [new Text(point, text, type, size, weight, maxWidth, offset, stroke, fill, shadow, canvas)](#new_Text_new)\n    * [.point(value)](#Text+point)\n    * [.point()](#Text+point) \u21d2 <code>Point</code>\n    * [.x(value)](#Text+x)\n    * [.x()](#Text+x) \u21d2 <code>number</code>\n    * [.y(value)](#Text+y)\n    * [.y()](#Text+y) \u21d2 <code>number</code>\n    * [.text(value)](#Text+text)\n    * [.text()](#Text+text) \u21d2 <code>string</code>\n    * [.stroke()](#Text+stroke) \u21d2 <code>Stroke</code>\n    * [.stroke()](#Text+stroke) \u21d2 <code>Stroke</code>\n    * [.fill()](#Text+fill) \u21d2 <code>Fill</code>\n    * [.fill()](#Text+fill) \u21d2 <code>Fill</code>\n    * [.shadow()](#Text+shadow) \u21d2 <code>Shadow</code>\n    * [.canvas(value)](#Text+canvas)\n    * [.canvas()](#Text+canvas) \u21d2 <code>string</code>\n    * [.options()](#Text+options) \u21d2 <code>Options</code>\n    * [.position()](#Text+position) \u21d2 <code>Position</code>\n    * [.type(value)](#Text+type)\n    * [.type()](#Text+type) \u21d2 <code>string</code>\n    * [.size(value)](#Text+size)\n    * [.size()](#Text+size) \u21d2 <code>number</code>\n    * [.weight(value)](#Text+weight)\n    * [.weight()](#Text+weight) \u21d2 <code>string</code>\n    * [.maxWidth(value)](#Text+maxWidth)\n    * [.maxWidth()](#Text+maxWidth) \u21d2 <code>number</code>\n    * [.offset(value)](#Text+offset)\n    * [.offset()](#Text+offset) \u21d2 <code>Point</code>\n    * [.font()](#Text+font) \u21d2 <code>string</code>\n    * [.move(degree, distance, [draw], [clear])](#Text+move)\n    * [.rotate(degree, [anchor], [clear])](#Text+rotate)\n    * [.showCoordinates([offset], [fontSize])](#Text+showCoordinates)\n    * [.draw(canvas)](#Text+draw)\n\n<a name=\"new_Text_new\"></a>\n\n### new Text(point, text, type, size, weight, maxWidth, offset, stroke, fill, shadow, canvas)\nCreate a Text object\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| text | <code>string</code> | Text of text object |\n| type | <code>string</code> | Font type |\n| size | <code>number</code> | Font size |\n| weight | <code>string</code> | Font weight |\n| maxWidth | <code>number</code> | Font max width |\n| offset | <code>Point</code> | Text offset |\n| stroke | <code>Stroke</code> | Stroke properties |\n| fill | <code>Fill</code> | Fill Properties |\n| shadow | <code>Shadow</code> | Shadow properties |\n| canvas | <code>string</code> | Canvas Id |\n\n<a name=\"Text+point\"></a>\n\n### text.point(value)\nSet point\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Text+point\"></a>\n\n### text.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n<a name=\"Text+x\"></a>\n\n### text.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Text+x\"></a>\n\n### text.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n<a name=\"Text+y\"></a>\n\n### text.y(value)\nSet the y-axis value\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Text+y\"></a>\n\n### text.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n<a name=\"Text+text\"></a>\n\n### text.text(value)\nSet text\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Text of object |\n\n<a name=\"Text+text\"></a>\n\n### text.text() \u21d2 <code>string</code>\nGet text\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>string</code> - Text of object  \n**Read only**: true  \n<a name=\"Text+stroke\"></a>\n\n### text.stroke() \u21d2 <code>Stroke</code>\nSet stroke properties\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>Stroke</code> - value                              Stroke properties  \n**Access**: public  \n<a name=\"Text+stroke\"></a>\n\n### text.stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"Text+fill\"></a>\n\n### text.fill() \u21d2 <code>Fill</code>\nSet fill properties\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>Fill</code> - value                                Fill properties  \n**Access**: public  \n<a name=\"Text+fill\"></a>\n\n### text.fill() \u21d2 <code>Fill</code>\nGet fill properties\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>Fill</code> - Fill properties  \n**Access**: public  \n<a name=\"Text+shadow\"></a>\n\n### text.shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"Text+canvas\"></a>\n\n### text.canvas(value)\nSet canvas value\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.canvas](PROPERTY_BLOCKS.individual.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Text+canvas\"></a>\n\n### text.canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.canvas](PROPERTY_BLOCKS.individual.canvas)  \n<a name=\"Text+options\"></a>\n\n### text.options() \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>Options</code> - Options properties  \n**Access**: public  \n<a name=\"Text+position\"></a>\n\n### text.position() \u21d2 <code>Position</code>\nGet position properties\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>Position</code> - Position properties  \n**Access**: public  \n<a name=\"Text+type\"></a>\n\n### text.type(value)\nSet font's type\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Font's type |\n\n<a name=\"Text+type\"></a>\n\n### text.type() \u21d2 <code>string</code>\nGet font's type\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>string</code> - Font's type  \n**Read only**: true  \n<a name=\"Text+size\"></a>\n\n### text.size(value)\nSet font's size\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font's size |\n\n<a name=\"Text+size\"></a>\n\n### text.size() \u21d2 <code>number</code>\nGet font's size\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>number</code> - Font's size  \n**Read only**: true  \n<a name=\"Text+weight\"></a>\n\n### text.weight(value)\nSet font's weight\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Font's weight |\n\n<a name=\"Text+weight\"></a>\n\n### text.weight() \u21d2 <code>string</code>\nGet font's weight\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>string</code> - Font's weight  \n**Read only**: true  \n<a name=\"Text+maxWidth\"></a>\n\n### text.maxWidth(value)\nSet font's max width\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font's max width |\n\n<a name=\"Text+maxWidth\"></a>\n\n### text.maxWidth() \u21d2 <code>number</code>\nGet font's max width\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>number</code> - Font's max width  \n**Read only**: true  \n<a name=\"Text+offset\"></a>\n\n### text.offset(value)\nSet offset\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.offset](PROPERTY_BLOCKS.individual.offset)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Shadow offset |\n\n<a name=\"Text+offset\"></a>\n\n### text.offset() \u21d2 <code>Point</code>\nGet offset\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>Point</code> - Shadow offset  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.offset](PROPERTY_BLOCKS.individual.offset)  \n<a name=\"Text+font\"></a>\n\n### text.font() \u21d2 <code>string</code>\nGet font\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Returns**: <code>string</code> - CSS style font property syntax  \n**Access**: public  \n<a name=\"Text+move\"></a>\n\n### text.move(degree, distance, [draw], [clear])\nMove this object\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.move](UTILITIES.individual.misc.move)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Direction to move; in degrees |\n| distance | <code>number</code> |  | Distance to move |\n| [draw] | <code>boolean</code> | <code>false</code> | Draw post movement |\n| [clear] | <code>boolean</code> | <code>false</code> | Clear canvas during each movement |\n\n<a name=\"Text+rotate\"></a>\n\n### text.rotate(degree, [anchor], [clear])\nRotate this object\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.rotate](UTILITIES.individual.misc.rotate)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [anchor] | <code>string</code> | <code>&quot;&#x27;center&#x27;&quot;</code> | Anchoring point during rotation |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"Text+showCoordinates\"></a>\n\n### text.showCoordinates([offset], [fontSize])\nShows coordinates of this object\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.showCoordinates](UTILITIES.individual.misc.showCoordinates)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of coordinates y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Coordinates font size |\n\n<a name=\"Text+draw\"></a>\n\n### text.draw(canvas)\nDraw this object\n\n**Kind**: instance method of [<code>Text</code>](#Text)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Position": "<a name=\"Position\"></a>\n\n## Position\n{Object}            Position \t\t\t\tPosition object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| origin | <code>Point</code> | Origin X & Y coordinates for an object's position |\n| start | <code>Point</code> | Origin start X & Y coordinates for a Line object's position |\n| end | <code>Point</code> | Origin end X & Y coordinates for a Line object's position |\n| distance | <code>number</code> | Distance from origin to destination |\n| direction | <code>number</code> | Direction to move towards destination; in degrees |\n| rotation | <code>number</code> | Amount object (including canvas) has been rotated |\n| aspect | <code>Aspect</code> | Original aspect value(s) for a rectangular object |\n| controlPoints | <code>ControlPoints</code> | Original control point values for a Line object |\n| fontSize | <code>number</code> | Original fontSize value for a Text object |\n| master | <code>clObject</code> | Master object |\n\n\n* [Position](#Position)\n    * [new Position()](#new_Position_new)\n    * [.origin(value)](#Position+origin)\n    * [.origin()](#Position+origin) \u21d2 <code>Point</code>\n    * [.start(value)](#Position+start)\n    * [.start()](#Position+start) \u21d2 <code>number</code>\n    * [.end(value)](#Position+end)\n    * [.end()](#Position+end) \u21d2 <code>number</code>\n    * [.distance(value)](#Position+distance)\n    * [.distance()](#Position+distance) \u21d2 <code>number</code>\n    * [.startDistance(value)](#Position+startDistance)\n    * [.startDistance()](#Position+startDistance) \u21d2 <code>number</code>\n    * [.endDistance(value)](#Position+endDistance)\n    * [.endDistance()](#Position+endDistance) \u21d2 <code>number</code>\n    * [.direction(value)](#Position+direction)\n    * [.direction()](#Position+direction) \u21d2 <code>number</code>\n    * [.startDirection(value)](#Position+startDirection)\n    * [.startDirection()](#Position+startDirection) \u21d2 <code>number</code>\n    * [.endDirection(value)](#Position+endDirection)\n    * [.endDirection()](#Position+endDirection) \u21d2 <code>number</code>\n    * [.rotation(value)](#Position+rotation)\n    * [.rotation()](#Position+rotation) \u21d2 <code>number</code>\n    * [.aspect(value)](#Position+aspect)\n    * [.aspect()](#Position+aspect) \u21d2 <code>number</code>\n    * [.width(value)](#Position+width)\n    * [.width()](#Position+width) \u21d2 <code>number</code>\n    * [.height(value)](#Position+height)\n    * [.height()](#Position+height) \u21d2 <code>number</code>\n    * [.controlPoints(value)](#Position+controlPoints)\n    * [.controlPoints()](#Position+controlPoints) \u21d2 <code>Array.&lt;number&gt;</code>\n    * [.fontSize(value)](#Position+fontSize)\n    * [.fontSize()](#Position+fontSize) \u21d2 <code>number</code>\n    * [.master(value)](#Position+master)\n    * [.master()](#Position+master) \u21d2 <code>clObject</code>\n    * [.stroke(value)](#Position+stroke)\n    * [.stroke()](#Position+stroke) \u21d2 <code>number</code>\n    * [.fill(value)](#Position+fill)\n    * [.fill()](#Position+fill) \u21d2 <code>number</code>\n\n<a name=\"new_Position_new\"></a>\n\n### new Position()\nCreate a Position object\n\n<a name=\"Position+origin\"></a>\n\n### position.origin(value)\nSet origin\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Position+origin\"></a>\n\n### position.origin() \u21d2 <code>Point</code>\nGet origin\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n<a name=\"Position+start\"></a>\n\n### position.start(value)\nSet start\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Start of object |\n\n<a name=\"Position+start\"></a>\n\n### position.start() \u21d2 <code>number</code>\nGet start\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - Start of object  \n**Access**: public  \n<a name=\"Position+end\"></a>\n\n### position.end(value)\nSet end\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | End of object |\n\n<a name=\"Position+end\"></a>\n\n### position.end() \u21d2 <code>number</code>\nGet end\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - End of object  \n**Access**: public  \n<a name=\"Position+distance\"></a>\n\n### position.distance(value)\nSet distance\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Distance from origin to destination |\n\n<a name=\"Position+distance\"></a>\n\n### position.distance() \u21d2 <code>number</code>\nGet distance\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - Distance from origin to destination  \n**Access**: public  \n<a name=\"Position+startDistance\"></a>\n\n### position.startDistance(value)\nSet startDistance\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | StartDistance of object |\n\n<a name=\"Position+startDistance\"></a>\n\n### position.startDistance() \u21d2 <code>number</code>\nGet startDistance\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - StartDistance of object  \n**Access**: public  \n<a name=\"Position+endDistance\"></a>\n\n### position.endDistance(value)\nSet endDistance\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | EndDistance of object |\n\n<a name=\"Position+endDistance\"></a>\n\n### position.endDistance() \u21d2 <code>number</code>\nGet endDistance\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - EndDistance of object  \n**Access**: public  \n<a name=\"Position+direction\"></a>\n\n### position.direction(value)\nSet direction\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Direction in degrees |\n\n<a name=\"Position+direction\"></a>\n\n### position.direction() \u21d2 <code>number</code>\nGet direction\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - Direction in degrees  \n**Access**: public  \n<a name=\"Position+startDirection\"></a>\n\n### position.startDirection(value)\nSet startDirection\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | StartDirection of object |\n\n<a name=\"Position+startDirection\"></a>\n\n### position.startDirection() \u21d2 <code>number</code>\nGet startDirection\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - StartDirection of object  \n**Access**: public  \n<a name=\"Position+endDirection\"></a>\n\n### position.endDirection(value)\nSet endDirection\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | EndDirection of object |\n\n<a name=\"Position+endDirection\"></a>\n\n### position.endDirection() \u21d2 <code>number</code>\nGet endDirection\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - EndDirection of object  \n**Access**: public  \n<a name=\"Position+rotation\"></a>\n\n### position.rotation(value)\nSet rotation\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Direction in degrees |\n\n<a name=\"Position+rotation\"></a>\n\n### position.rotation() \u21d2 <code>number</code>\nGet rotation\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - Direction in degrees  \n**Access**: public  \n<a name=\"Position+aspect\"></a>\n\n### position.aspect(value)\nSet aspect\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Aspect of object |\n\n<a name=\"Position+aspect\"></a>\n\n### position.aspect() \u21d2 <code>number</code>\nGet aspect\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - Aspect of object  \n**Access**: public  \n<a name=\"Position+width\"></a>\n\n### position.width(value)\nSet width\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Width of object |\n\n<a name=\"Position+width\"></a>\n\n### position.width() \u21d2 <code>number</code>\nGet width\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - Width of object  \n**Access**: public  \n<a name=\"Position+height\"></a>\n\n### position.height(value)\nSet height\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Height of object |\n\n<a name=\"Position+height\"></a>\n\n### position.height() \u21d2 <code>number</code>\nGet height\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - Height of object  \n**Access**: public  \n<a name=\"Position+controlPoints\"></a>\n\n### position.controlPoints(value)\nSet controlPoints\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array.&lt;number&gt;</code> | ControlPoints of object |\n\n<a name=\"Position+controlPoints\"></a>\n\n### position.controlPoints() \u21d2 <code>Array.&lt;number&gt;</code>\nGet controlPoints\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>Array.&lt;number&gt;</code> - ControlPoints of object  \n**Access**: public  \n<a name=\"Position+fontSize\"></a>\n\n### position.fontSize(value)\nSet fontSize\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | FontSize of object |\n\n<a name=\"Position+fontSize\"></a>\n\n### position.fontSize() \u21d2 <code>number</code>\nGet fontSize\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - FontSize of object  \n**Access**: public  \n<a name=\"Position+master\"></a>\n\n### position.master(value)\nSet master object\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.master](PROPERTY_BLOCKS.individual.master)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>clObject</code> | Canvas Lab object |\n\n<a name=\"Position+master\"></a>\n\n### position.master() \u21d2 <code>clObject</code>\nGet master object\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>clObject</code> - Master Canvas Lab object  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.master](PROPERTY_BLOCKS.individual.master)  \n<a name=\"Position+stroke\"></a>\n\n### position.stroke(value)\nSet stroke\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Stroke of object |\n\n<a name=\"Position+stroke\"></a>\n\n### position.stroke() \u21d2 <code>number</code>\nGet stroke\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - Stroke of object  \n**Access**: public  \n<a name=\"Position+fill\"></a>\n\n### position.fill(value)\nSet fill\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Fill of object |\n\n<a name=\"Position+fill\"></a>\n\n### position.fill() \u21d2 <code>number</code>\nGet fill\n\n**Kind**: instance method of [<code>Position</code>](#Position)  \n**Returns**: <code>number</code> - Fill of object  \n**Access**: public  \n",
    "Rgb": "<a name=\"Rgb\"></a>\n\n## Rgb\n{Object} Rgb \t\t\t\t\t\t\t\tRGB color model\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [red] | <code>number</code> | <code>0</code> | Red value; 0 - 255 |\n| [green] | <code>number</code> | <code>0</code> | Green value; 0 - 255 |\n| [blue] | <code>number</code> | <code>0</code> | Blue value; 0 - 255 |\n| [alpha] | <code>number</code> | <code>1</code> | Alpha value; 0 - 1 (decimal) |\n\n\n* [Rgb](#Rgb)\n    * [new Rgb(red, green, blue, alpha)](#new_Rgb_new)\n    * [.red(red)](#Rgb+red)\n    * [.red()](#Rgb+red) \u21d2 <code>number</code>\n    * [.green(green)](#Rgb+green)\n    * [.green()](#Rgb+green) \u21d2 <code>number</code>\n    * [.blue(blue)](#Rgb+blue)\n    * [.blue()](#Rgb+blue) \u21d2 <code>number</code>\n    * [.alpha(value)](#Rgb+alpha)\n    * [.alpha()](#Rgb+alpha) \u21d2 <code>number</code>\n    * [.cycle(start, end, progress, max)](#Rgb+cycle)\n    * [.toCss()](#Rgb+toCss) \u21d2 <code>string</code>\n\n<a name=\"new_Rgb_new\"></a>\n\n### new Rgb(red, green, blue, alpha)\nCreate an RGB color model\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| red | <code>number</code> | Red value |\n| green | <code>number</code> | Green value |\n| blue | <code>number</code> | Blue value |\n| alpha | <code>number</code> | Alpha value |\n\n<a name=\"Rgb+red\"></a>\n\n### rgb.red(red)\nSets the red value\n\n**Kind**: instance method of [<code>Rgb</code>](#Rgb)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| red | <code>number</code> | Red value; 0 - 255 |\n\n<a name=\"Rgb+red\"></a>\n\n### rgb.red() \u21d2 <code>number</code>\nGets the red value\n\n**Kind**: instance method of [<code>Rgb</code>](#Rgb)  \n**Returns**: <code>number</code> - Red value; 0 - 255  \n**Read only**: true  \n<a name=\"Rgb+green\"></a>\n\n### rgb.green(green)\nSets the green value\n\n**Kind**: instance method of [<code>Rgb</code>](#Rgb)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| green | <code>number</code> | Green value; 0 - 255 |\n\n<a name=\"Rgb+green\"></a>\n\n### rgb.green() \u21d2 <code>number</code>\nGets the green value\n\n**Kind**: instance method of [<code>Rgb</code>](#Rgb)  \n**Returns**: <code>number</code> - Green value; 0 - 255  \n**Read only**: true  \n<a name=\"Rgb+blue\"></a>\n\n### rgb.blue(blue)\nSets the blue value\n\n**Kind**: instance method of [<code>Rgb</code>](#Rgb)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| blue | <code>number</code> | Blue value; 0 - 255 |\n\n<a name=\"Rgb+blue\"></a>\n\n### rgb.blue() \u21d2 <code>number</code>\nGets the blue value\n\n**Kind**: instance method of [<code>Rgb</code>](#Rgb)  \n**Returns**: <code>number</code> - Blue value; 0 - 255  \n**Read only**: true  \n<a name=\"Rgb+alpha\"></a>\n\n### rgb.alpha(value)\nSet alpha value\n\n**Kind**: instance method of [<code>Rgb</code>](#Rgb)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.alpha](PROPERTY_BLOCKS.individual.alpha)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Alpha value; 0 - 1 |\n\n<a name=\"Rgb+alpha\"></a>\n\n### rgb.alpha() \u21d2 <code>number</code>\nSet alpha value\n\n**Kind**: instance method of [<code>Rgb</code>](#Rgb)  \n**Returns**: <code>number</code> - Alpha value; 0 - 1  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.alpha](PROPERTY_BLOCKS.individual.alpha)  \n<a name=\"Rgb+cycle\"></a>\n\n### rgb.cycle(start, end, progress, max)\nColor cycling\n\n**Kind**: instance method of [<code>Rgb</code>](#Rgb)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| start | [<code>Rgb</code>](#Rgb) | Color model & values |\n| end | [<code>Rgb</code>](#Rgb) | Color model & values |\n| progress | <code>number</code> | Progress time unit; 0.00 - 1.00 |\n| max | <code>number</code> | Maximum number of steps between interpolation |\n\n<a name=\"Rgb+toCss\"></a>\n\n### rgb.toCss() \u21d2 <code>string</code>\nReturns a CSS compatible <color> string value\n\n**Kind**: instance method of [<code>Rgb</code>](#Rgb)  \n**Returns**: <code>string</code> - CSS <color> string  \n**Access**: public  \n",
    "Group": "<a name=\"Group\"></a>\n\n## Group\n{Array}             Group                   Collection of Line, Circle, Rectangle & Text objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| lines | <code>Array</code> | Collection of Line objects |\n| circles | <code>Array</code> | Collection of Circle objects |\n| ellipses | <code>Array</code> | Collection of Ellipse objects |\n| rectangles | <code>Array</code> | Collection of Rectangle objects |\n| roundedRectangles | <code>Array</code> | Collection of Rounded Rectangle objects |\n| text | <code>Array</code> | Collection of Text objects |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n| template | <code>Template</code> | Canvas Lab Template object |\n\n\n* [Group](#Group)\n    * [new Group()](#new_Group_new)\n    * [.point(value)](#Group+point)\n    * [.point()](#Group+point) \u21d2 <code>Point</code>\n    * [.x(value)](#Group+x)\n    * [.x()](#Group+x) \u21d2 <code>number</code>\n    * [.y(value)](#Group+y)\n    * [.y()](#Group+y) \u21d2 <code>number</code>\n    * [.lines()](#Group+lines) \u21d2 <code>Lines</code>\n    * [.circles()](#Group+circles) \u21d2 <code>Circles</code>\n    * [.ellipses()](#Group+ellipses) \u21d2 <code>Ellipses</code>\n    * [.rectangles()](#Group+rectangles) \u21d2 <code>Rectangles</code>\n    * [.roundedRectangles()](#Group+roundedRectangles) \u21d2 <code>RoundedRectangles</code>\n    * [.texts()](#Group+texts) \u21d2 <code>Texts</code>\n    * [.canvas(value)](#Group+canvas)\n    * [.canvas()](#Group+canvas) \u21d2 <code>string</code>\n    * [.template(value)](#Group+template)\n    * [.template()](#Group+template) \u21d2 <code>Template</code>\n    * [.push(object)](#Group+push)\n    * [.pop(object)](#Group+pop)\n    * [.draw(canvas)](#Group+draw)\n\n<a name=\"new_Group_new\"></a>\n\n### new Group()\nCreate Group object\n\n<a name=\"Group+point\"></a>\n\n### group.point(value)\nSet point\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Group+point\"></a>\n\n### group.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n<a name=\"Group+x\"></a>\n\n### group.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Group+x\"></a>\n\n### group.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n<a name=\"Group+y\"></a>\n\n### group.y(value)\nSet the y-axis value\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Group+y\"></a>\n\n### group.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n<a name=\"Group+lines\"></a>\n\n### group.lines() \u21d2 <code>Lines</code>\nGet's lines\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Returns**: <code>Lines</code> - Lines collection  \n**Read only**: true  \n<a name=\"Group+circles\"></a>\n\n### group.circles() \u21d2 <code>Circles</code>\nGet's circles\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Returns**: <code>Circles</code> - Circles collection  \n**Read only**: true  \n<a name=\"Group+ellipses\"></a>\n\n### group.ellipses() \u21d2 <code>Ellipses</code>\nGet's ellipses\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Returns**: <code>Ellipses</code> - Ellipses collection  \n**Read only**: true  \n<a name=\"Group+rectangles\"></a>\n\n### group.rectangles() \u21d2 <code>Rectangles</code>\nGet's rectangles\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Returns**: <code>Rectangles</code> - Rectangles collection  \n**Read only**: true  \n<a name=\"Group+roundedRectangles\"></a>\n\n### group.roundedRectangles() \u21d2 <code>RoundedRectangles</code>\nGet's rounded rectangles\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Returns**: <code>RoundedRectangles</code> - Rectangles collection  \n**Read only**: true  \n<a name=\"Group+texts\"></a>\n\n### group.texts() \u21d2 <code>Texts</code>\nGet's texts\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Returns**: <code>Texts</code> - Texts collection  \n**Read only**: true  \n<a name=\"Group+canvas\"></a>\n\n### group.canvas(value)\nSet canvas value\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Group+canvas\"></a>\n\n### group.canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n<a name=\"Group+template\"></a>\n\n### group.template(value)\nSet template\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.template](PROPERTY_BLOCKS.collection.template)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Template</code> | Template object |\n\n<a name=\"Group+template\"></a>\n\n### group.template() \u21d2 <code>Template</code>\nGet template\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Returns**: <code>Template</code> - Template object  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.template](PROPERTY_BLOCKS.collection.template)  \n<a name=\"Group+push\"></a>\n\n### group.push(object)\nPushes an object into this group\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| object | <code>Object</code> | Object; Line(s), Circle(s), Rectangle(S) |\n\n<a name=\"Group+pop\"></a>\n\n### group.pop(object)\nPops an object out of this group\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| object | <code>Object</code> | Object; Line(s), Circle(s), Rectangle(S) |\n\n<a name=\"Group+draw\"></a>\n\n### group.draw(canvas)\nDraw this group\n\n**Kind**: instance method of [<code>Group</code>](#Group)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Rectangle": "<a name=\"Rectangle\"></a>\n\n## Rectangle\n{Object}            Rectangle               Rectangle object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| aspect | <code>Aspect</code> | Aspect properties |\n| round | <code>Array</code> | Rounding properties |\n| stroke | <code>Stroke</code> | Stroke properties |\n| fill | <code>Fill</code> | Fill properties |\n| shadow | <code>Shadow</code> | Shadow properties |\n| anchor | <code>Anchor</code> | Anchor properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n| options | <code>Options</code> | Options for this object |\n| position | <code>Position</code> | Position properties |\n\n\n* [Rectangle](#Rectangle)\n    * [new Rectangle()](#new_Rectangle_new)\n    * [.point(value)](#Rectangle+point)\n    * [.point()](#Rectangle+point) \u21d2 <code>Point</code>\n    * [.x(value)](#Rectangle+x)\n    * [.x()](#Rectangle+x) \u21d2 <code>number</code>\n    * [.y(value)](#Rectangle+y)\n    * [.y()](#Rectangle+y) \u21d2 <code>number</code>\n    * [.aspect(value)](#Rectangle+aspect)\n    * [.aspect()](#Rectangle+aspect) \u21d2 <code>Aspect</code>\n    * [.width(value)](#Rectangle+width)\n    * [.width()](#Rectangle+width) \u21d2 <code>number</code>\n    * [.height(value)](#Rectangle+height)\n    * [.height()](#Rectangle+height) \u21d2 <code>number</code>\n    * [.round(value)](#Rectangle+round)\n    * [.round()](#Rectangle+round) \u21d2 <code>Array</code>\n    * [.stroke(value)](#Rectangle+stroke)\n    * [.stroke()](#Rectangle+stroke) \u21d2 <code>Stroke</code>\n    * [.fill(value)](#Rectangle+fill)\n    * [.fill()](#Rectangle+fill) \u21d2 <code>Fill</code>\n    * [.shadow()](#Rectangle+shadow) \u21d2 <code>Shadow</code>\n    * [.canvas(value)](#Rectangle+canvas)\n    * [.canvas()](#Rectangle+canvas) \u21d2 <code>string</code>\n    * [.anchor()](#Rectangle+anchor) \u21d2 <code>Anchor</code>\n    * [.options()](#Rectangle+options) \u21d2 <code>Options</code>\n    * [.isThere(rectangle)](#Rectangle+isThere)\n    * [.area()](#Rectangle+area) \u21d2 <code>number</code>\n    * [.center()](#Rectangle+center) \u21d2 <code>Point</code>\n    * [.fillColorCycle(progress, start, end, [max])](#Rectangle+fillColorCycle)\n    * [.gradientColorCycle(progress, start, end, stop, [max])](#Rectangle+gradientColorCycle)\n    * [.move(degree, distance, [draw], [clear])](#Rectangle+move)\n    * [.perimeter()](#Rectangle+perimeter) \u21d2 <code>number</code>\n    * [.rotate(degree, [anchor], [clear])](#Rectangle+rotate)\n    * [.showCoordinates([offset], [fontSize])](#Rectangle+showCoordinates)\n    * [.draw(canvas)](#Rectangle+draw)\n\n<a name=\"new_Rectangle_new\"></a>\n\n### new Rectangle()\nCreate a Rectangle object\n\n<a name=\"Rectangle+point\"></a>\n\n### rectangle.point(value)\nSet point\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Rectangle+point\"></a>\n\n### rectangle.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n<a name=\"Rectangle+x\"></a>\n\n### rectangle.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Rectangle+x\"></a>\n\n### rectangle.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n<a name=\"Rectangle+y\"></a>\n\n### rectangle.y(value)\nSet y-axis value\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Rectangle+y\"></a>\n\n### rectangle.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n<a name=\"Rectangle+aspect\"></a>\n\n### rectangle.aspect(value)\nSet aspect properties\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Aspect</code> | Aspect properties |\n\n<a name=\"Rectangle+aspect\"></a>\n\n### rectangle.aspect() \u21d2 <code>Aspect</code>\nGet aspect properties\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Aspect</code> - Aspect properties  \n**Read only**: true  \n<a name=\"Rectangle+width\"></a>\n\n### rectangle.width(value)\nSet aspect width\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Width value |\n\n<a name=\"Rectangle+width\"></a>\n\n### rectangle.width() \u21d2 <code>number</code>\nGet aspect with\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - Width value  \n**Read only**: true  \n<a name=\"Rectangle+height\"></a>\n\n### rectangle.height(value)\nSet aspect height\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Height value |\n\n<a name=\"Rectangle+height\"></a>\n\n### rectangle.height() \u21d2 <code>number</code>\nGet aspect height\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - Height value  \n**Read only**: true  \n<a name=\"Rectangle+round\"></a>\n\n### rectangle.round(value)\nSet round properties\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array</code> | Radii properties |\n\n<a name=\"Rectangle+round\"></a>\n\n### rectangle.round() \u21d2 <code>Array</code>\nGet round properties\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Array</code> - Radii properties  \n**Read only**: true  \n<a name=\"Rectangle+stroke\"></a>\n\n### rectangle.stroke(value)\nSet stroke properties\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Stroke</code> | Stroke properties |\n\n<a name=\"Rectangle+stroke\"></a>\n\n### rectangle.stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"Rectangle+fill\"></a>\n\n### rectangle.fill(value)\nGet fill properties\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Fill</code> | Fill properties |\n\n<a name=\"Rectangle+fill\"></a>\n\n### rectangle.fill() \u21d2 <code>Fill</code>\nGet fill properties\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Fill</code> - Fill properties  \n**Access**: public  \n<a name=\"Rectangle+shadow\"></a>\n\n### rectangle.shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"Rectangle+canvas\"></a>\n\n### rectangle.canvas(value)\nSet canvas value\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.canvas](PROPERTY_BLOCKS.individual.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Rectangle+canvas\"></a>\n\n### rectangle.canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.canvas](PROPERTY_BLOCKS.individual.canvas)  \n<a name=\"Rectangle+anchor\"></a>\n\n### rectangle.anchor() \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Anchor</code> - Anchor properties  \n**Access**: public  \n<a name=\"Rectangle+options\"></a>\n\n### rectangle.options() \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Options</code> - Options properties  \n**Access**: public  \n<a name=\"Rectangle+isThere\"></a>\n\n### rectangle.isThere(rectangle)\nCheck whether the passed object is already present\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| rectangle | [<code>Rectangle</code>](#Rectangle) | Object to validate |\n\n<a name=\"Rectangle+area\"></a>\n\n### rectangle.area() \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - Area of this object  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.area](PROPERTY_BLOCKS.individual.area)  \n<a name=\"Rectangle+center\"></a>\n\n### rectangle.center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>Point</code> - Center point coordinates  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.center](PROPERTY_BLOCKS.individual.center)  \n<a name=\"Rectangle+fillColorCycle\"></a>\n\n### rectangle.fillColorCycle(progress, start, end, [max])\nCycle colors for fill\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n**See**: [UTILITIES.individual.color.cycle.fill](UTILITIES.individual.color.cycle.fill)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| progress | <code>number</code> |  | Progress time unit between; 0.00 - 1.00 |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"Rectangle+gradientColorCycle\"></a>\n\n### rectangle.gradientColorCycle(progress, start, end, stop, [max])\nCycle colors for gradient\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n**See**: [UTILITIES.individual.color.cycle.gradient](UTILITIES.individual.color.cycle.gradient)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| progress | <code>number</code> |  | Progress time unit between; 0.00 - 1.00 |\n| start | <code>Rgb</code> |  | Starting RGB value |\n| end | <code>Rgb</code> |  | Ending RGB value |\n| stop | <code>number</code> |  | Gradient color stop |\n| [max] | <code>number</code> | <code>1</code> | Maximum increments |\n\n<a name=\"Rectangle+move\"></a>\n\n### rectangle.move(degree, distance, [draw], [clear])\nMove this object\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.move](UTILITIES.individual.misc.move)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Direction to move; in degrees |\n| distance | <code>number</code> |  | Distance to move |\n| [draw] | <code>boolean</code> | <code>false</code> | Draw post movement |\n| [clear] | <code>boolean</code> | <code>false</code> | Clear canvas during each movement |\n\n<a name=\"Rectangle+perimeter\"></a>\n\n### rectangle.perimeter() \u21d2 <code>number</code>\nGet perimeter\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Returns**: <code>number</code> - Perimeter of rectangle  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.center](PROPERTY_BLOCKS.individual.center)  \n<a name=\"Rectangle+rotate\"></a>\n\n### rectangle.rotate(degree, [anchor], [clear])\nRotate this object\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.rotate](UTILITIES.individual.misc.rotate)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [anchor] | <code>string</code> | <code>&quot;&#x27;center&#x27;&quot;</code> | Anchoring point during rotation |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"Rectangle+showCoordinates\"></a>\n\n### rectangle.showCoordinates([offset], [fontSize])\nShows coordinates of this object\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.showCoordinates](UTILITIES.individual.misc.showCoordinates)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of coordinates y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Coordinates font size |\n\n<a name=\"Rectangle+draw\"></a>\n\n### rectangle.draw(canvas)\nDraw this object\n\n**Kind**: instance method of [<code>Rectangle</code>](#Rectangle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "RoundedRectangle": "<a name=\"RoundedRectangle\"></a>\n\n## RoundedRectangle \u21d0 <code>Rectangle</code>\n{Object}            RoundingRectangle \t\tRoundingRectangle object\n\n**Kind**: global class  \n**Extends**: <code>Rectangle</code>  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| point | <code>Point</code> |  | X & Y axis coordinates |\n| aspect | <code>Aspect</code> |  | Aspect properties |\n| [round] | <code>Array</code> | <code>[5, 5, 5, 5]</code> | Rounding properties |\n| stroke | <code>Stroke</code> |  | Stroke properties |\n| fill | <code>Fill</code> |  | Fill properties |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n| anchor | <code>Anchor</code> |  | Anchor properties |\n| canvas | <code>HTMLCanvasElement</code> |  | 2D canvas context |\n| options | <code>Options</code> |  | Options for this object |\n| position | <code>Position</code> |  | Position properties |\n\n",
    "Application": "## Classes\n\n<dl>\n<dt><a href=\"#Application\">Application</a></dt>\n<dd><p>{Object}   Application                      Application handler</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#initCanvasLab\">initCanvasLab([canvas])</a></dt>\n<dd><p>Initiates canvasLab</p>\n</dd>\n</dl>\n\n<a name=\"Application\"></a>\n\n## Application\n{Object}   Application                      Application handler\n\n**Kind**: global class  \n\n* [Application](#Application)\n    * [new Application()](#new_Application_new)\n    * [.animation](#Application+animation)\n    * [.animation()](#Application+animation) \u21d2 <code>Animation</code>\n    * [.canvas(value)](#Application+canvas)\n    * [.canvas()](#Application+canvas) \u21d2 <code>HTMLCanvasElement</code>\n    * [.about()](#Application+about) \u21d2 <code>Object</code>\n    * [.dom()](#Application+dom) \u21d2 <code>Object</code>\n\n<a name=\"new_Application_new\"></a>\n\n### new Application()\nCreates an application handler\n\n<a name=\"Application+animation\"></a>\n\n### application.animation\nCreates a new animation instance\n\n**Kind**: instance property of [<code>Application</code>](#Application)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| transition | <code>Transition</code> \\| <code>Queue</code> | Contains timing, draw, & duration values & functions |\n| transition.object | <code>number</code> | CanvasLab Object |\n| transition.timing | <code>function</code> | Timing function |\n| transition.period | <code>number</code> | Period of time |\n| transition.change | <code>clChange</code> | Changes to object |\n\n<a name=\"Application+animation\"></a>\n\n### application.animation() \u21d2 <code>Animation</code>\nGet animation\n\n**Kind**: instance method of [<code>Application</code>](#Application)  \n**Returns**: <code>Animation</code> - Animation object  \n**Read only**: true  \n<a name=\"Application+canvas\"></a>\n\n### application.canvas(value)\nSet canvas element\n\n**Kind**: instance method of [<code>Application</code>](#Application)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Element Id |\n\n<a name=\"Application+canvas\"></a>\n\n### application.canvas() \u21d2 <code>HTMLCanvasElement</code>\nGet canvas element\n\n**Kind**: instance method of [<code>Application</code>](#Application)  \n**Returns**: <code>HTMLCanvasElement</code> - Canvas context  \n**Access**: public  \n<a name=\"Application+about\"></a>\n\n### application.about() \u21d2 <code>Object</code>\nGet application details\n\n**Kind**: instance method of [<code>Application</code>](#Application)  \n**Returns**: <code>Object</code> - Application details  \n**Read only**: true  \n<a name=\"Application+dom\"></a>\n\n### application.dom() \u21d2 <code>Object</code>\nGet dom details\n\n**Kind**: instance method of [<code>Application</code>](#Application)  \n**Returns**: <code>Object</code> - DOM details  \n**Read only**: true  \n<a name=\"initCanvasLab\"></a>\n\n## initCanvasLab([canvas])\nInitiates canvasLab\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [canvas] | <code>string</code> | Canvas identifier |\n\n",
    "Point": "<a name=\"Point\"></a>\n\n## Point\n{Object}  Point                             X & Y coordinates for an object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [x] | <code>number</code> | <code>0</code> | X - x-axis coordinate |\n| [y] | <code>number</code> | <code>0</code> | Y - y-axis coordinate |\n| options | <code>Options</code> |  | Ancillary properties |\n\n\n* [Point](#Point)\n    * [new Point(x, y)](#new_Point_new)\n    * [.x(value)](#Point+x)\n    * [.x()](#Point+x) \u21d2 <code>number</code>\n    * [.y(value)](#Point+y)\n    * [.y()](#Point+y) \u21d2 <code>number</code>\n    * [.canvas(value)](#Point+canvas)\n    * [.canvas()](#Point+canvas) \u21d2 <code>string</code>\n    * [.options()](#Point+options) \u21d2 <code>Options</code>\n    * [.center()](#Point+center) \u21d2 [<code>Point</code>](#Point)\n    * [.drawOptions(offset)](#Point+drawOptions)\n    * [.invert()](#Point+invert)\n    * [.move(degree, distance)](#Point+move)\n\n<a name=\"new_Point_new\"></a>\n\n### new Point(x, y)\nCreate a point\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| x | <code>number</code> | X coordinate value |\n| y | <code>number</code> | Y coordinate value |\n\n<a name=\"Point+x\"></a>\n\n### point.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Point+x\"></a>\n\n### point.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"Point+y\"></a>\n\n### point.y(value)\nSet the y-axis value\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Point+y\"></a>\n\n### point.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n<a name=\"Point+canvas\"></a>\n\n### point.canvas(value)\nSet canvas value\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.canvas](PROPERTY_BLOCKS.individual.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Point+canvas\"></a>\n\n### point.canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.canvas](PROPERTY_BLOCKS.individual.canvas)  \n<a name=\"Point+options\"></a>\n\n### point.options() \u21d2 <code>Options</code>\nGet options\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n**Returns**: <code>Options</code> - Options object  \n**Access**: public  \n<a name=\"Point+center\"></a>\n\n### point.center() \u21d2 [<code>Point</code>](#Point)\nGet center of this object\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n**Returns**: [<code>Point</code>](#Point) - Center point coordinates  \n**Read only**: true  \n<a name=\"Point+drawOptions\"></a>\n\n### point.drawOptions(offset)\nDraws associated options\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| offset | <code>number</code> | <code>20</code> | Offset of drawable options |\n\n<a name=\"Point+invert\"></a>\n\n### point.invert()\nInvert x & y coordinate values\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n**Access**: public  \n<a name=\"Point+move\"></a>\n\n### point.move(degree, distance)\nMove this object\n\n**Kind**: instance method of [<code>Point</code>](#Point)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| degree | <code>number</code> | Direction to move; in degrees |\n| distance | <code>number</code> | Distance to move |\n\n",
    "Animation": "<a name=\"Animation\"></a>\n\n## Animation\n{Object}          Animation                 Animation handler; for drawing a single object in one instance\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| object | <code>clObject</code> | CanvasLab object |\n| timing | <code>string</code> \\| <code>function</code> | Timing function |\n| period | <code>number</code> | Period of time |\n| change | <code>Object</code> | Change to object |\n| options | <code>Object</code> | Options for this object |\n\n\n* [Animation](#Animation)\n    * [new Animation(object, timing, period, change)](#new_Animation_new)\n    * [.object(value)](#Animation+object)\n    * [.object()](#Animation+object) \u21d2 <code>clObject</code>\n    * [.timing(value)](#Animation+timing)\n    * [.timing()](#Animation+timing) \u21d2 <code>function</code>\n    * [.period(value)](#Animation+period)\n    * [.period()](#Animation+period) \u21d2 <code>number</code>\n    * [.change(value)](#Animation+change)\n    * [.change()](#Animation+change) \u21d2 <code>clChange</code>\n    * [.cache(value)](#Animation+cache)\n    * [.cache()](#Animation+cache) \u21d2 <code>boolean</code>\n    * [.queue(value)](#Animation+queue)\n    * [.queue()](#Animation+queue) \u21d2 <code>Queue</code>\n    * [.cancel()](#Animation+cancel)\n    * [.animate()](#Animation+animate)\n\n<a name=\"new_Animation_new\"></a>\n\n### new Animation(object, timing, period, change)\nCreates an animation instance\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| object | <code>clObject</code> | Canvas Lab object |\n| timing | <code>string</code> \\| <code>function</code> | Timing function |\n| period | <code>number</code> | Period of time |\n| change | <code>Object</code> | Change to object |\n\n<a name=\"Animation+object\"></a>\n\n### animation.object(value)\nSet object to animate\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>clObject</code> | Canvas Lab object |\n\n<a name=\"Animation+object\"></a>\n\n### animation.object() \u21d2 <code>clObject</code>\nGet object\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Returns**: <code>clObject</code> - Canvas Lab object  \n**Read only**: true  \n<a name=\"Animation+timing\"></a>\n\n### animation.timing(value)\nSet timing\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> \\| <code>function</code> | Timing function |\n\n<a name=\"Animation+timing\"></a>\n\n### animation.timing() \u21d2 <code>function</code>\nGet timing\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Returns**: <code>function</code> - Timing function  \n**Read only**: true  \n<a name=\"Animation+period\"></a>\n\n### animation.period(value)\nSet period of animation\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.animation.period](PROPERTY_BLOCKS.animation.period)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Period of animation-time |\n\n<a name=\"Animation+period\"></a>\n\n### animation.period() \u21d2 <code>number</code>\nGet period of animation\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Returns**: <code>number</code> - Period of animation-time  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.animation.period](PROPERTY_BLOCKS.animation.period)  \n<a name=\"Animation+change\"></a>\n\n### animation.change(value)\nSet change\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>clChange</code> | Canvas Lab change object |\n\n<a name=\"Animation+change\"></a>\n\n### animation.change() \u21d2 <code>clChange</code>\nGet change\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Returns**: <code>clChange</code> - Canvas Lab change object  \n**Read only**: true  \n<a name=\"Animation+cache\"></a>\n\n### animation.cache(value)\nSet cache\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.animation.cache](PROPERTY_BLOCKS.animation.cache)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | True || False |\n\n<a name=\"Animation+cache\"></a>\n\n### animation.cache() \u21d2 <code>boolean</code>\nGet cache\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Returns**: <code>boolean</code> - True || False  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.animation.cache](PROPERTY_BLOCKS.animation.cache)  \n<a name=\"Animation+queue\"></a>\n\n### animation.queue(value)\nSet queue\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.animation.queue](PROPERTY_BLOCKS.animation.queue)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Queue</code> | Queue object |\n\n<a name=\"Animation+queue\"></a>\n\n### animation.queue() \u21d2 <code>Queue</code>\nGet queue\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Returns**: <code>Queue</code> - Queue object  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.animation.queue](PROPERTY_BLOCKS.animation.queue)  \n<a name=\"Animation+cancel\"></a>\n\n### animation.cancel()\nCancels animation\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.animation.cancel](PROPERTY_BLOCKS.animation.cancel)  \n<a name=\"Animation+animate\"></a>\n\n### animation.animate()\nInitiates animation\n\n**Kind**: instance method of [<code>Animation</code>](#Animation)  \n**Access**: public  \n",
    "Lines": "<a name=\"Lines\"></a>\n\n## Lines\n{Array}             Lines                   Collection of Line objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| stroke | <code>StrokeCollection</code> | Stroke collection properties |\n| shadow | <code>ShadowCollection</code> | Shadow collection properties |\n| lineCap | <code>string</code> | Shape of end points |\n| aspect | <code>Aspect</code> | Aspect properties |\n| anchor | <code>Anchor</code> | Anchor properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n| template | <code>Template</code> | Canvas Lab Template object |\n\n\n* [Lines](#Lines)\n    * [new Lines()](#new_Lines_new)\n    * [.point(value)](#Lines+point)\n    * [.point()](#Lines+point) \u21d2 <code>Point</code>\n    * [.x(value)](#Lines+x)\n    * [.x()](#Lines+x) \u21d2 <code>number</code>\n    * [.y(value)](#Lines+y)\n    * [.y()](#Lines+y) \u21d2 <code>number</code>\n    * [.stroke()](#Lines+stroke) \u21d2 <code>Stroke</code>\n    * [.shadow()](#Lines+shadow) \u21d2 <code>Shadow</code>\n    * [.lineCap(value)](#Lines+lineCap)\n    * [.lineCap()](#Lines+lineCap) \u21d2 <code>string</code>\n    * [.aspect()](#Lines+aspect) \u21d2 <code>Aspect</code>\n    * [.width()](#Lines+width) \u21d2 <code>number</code>\n    * [.height()](#Lines+height) \u21d2 <code>number</code>\n    * [.anchor(value)](#Lines+anchor)\n    * [.anchor()](#Lines+anchor) \u21d2 <code>Anchor</code>\n    * [.canvas(value)](#Lines+canvas)\n    * [.canvas()](#Lines+canvas) \u21d2 <code>string</code>\n    * [.template(value)](#Lines+template)\n    * [.template()](#Lines+template) \u21d2 <code>Template</code>\n    * [.options()](#Lines+options) \u21d2 <code>Object</code>\n    * [.storageType()](#Lines+storageType) \u21d2 <code>clObject</code>\n    * [.area()](#Lines+area) \u21d2 <code>number</code>\n    * [.center()](#Lines+center) \u21d2 <code>Point</code>\n    * [.endPoint()](#Lines+endPoint) \u21d2 <code>Point</code>\n    * [.perimeter()](#Lines+perimeter) \u21d2 <code>number</code>\n    * [.getPoints(indexes, color)](#Lines+getPoints)\n    * [.push()](#Lines+push)\n    * [.draw(canvas)](#Lines+draw)\n\n<a name=\"new_Lines_new\"></a>\n\n### new Lines()\nCreate a Lines object\n\n<a name=\"Lines+point\"></a>\n\n### lines.point(value)\nSet point\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Lines+point\"></a>\n\n### lines.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n<a name=\"Lines+x\"></a>\n\n### lines.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Lines+x\"></a>\n\n### lines.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n<a name=\"Lines+y\"></a>\n\n### lines.y(value)\nSet the y-axis value\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Lines+y\"></a>\n\n### lines.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n<a name=\"Lines+stroke\"></a>\n\n### lines.stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"Lines+shadow\"></a>\n\n### lines.shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"Lines+lineCap\"></a>\n\n### lines.lineCap(value)\nSet line cap\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Line cap |\n\n<a name=\"Lines+lineCap\"></a>\n\n### lines.lineCap() \u21d2 <code>string</code>\nGet line cap\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>string</code> - Line cap  \n**Read only**: true  \n<a name=\"Lines+aspect\"></a>\n\n### lines.aspect() \u21d2 <code>Aspect</code>\nGet aspect properties\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Aspect</code> - Aspect properties  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.aspect](PROPERTY_BLOCKS.collection.aspect)  \n<a name=\"Lines+width\"></a>\n\n### lines.width() \u21d2 <code>number</code>\nGet aspect with\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - Width value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.aspectWidth](PROPERTY_BLOCKS.collection.aspectWidth)  \n<a name=\"Lines+height\"></a>\n\n### lines.height() \u21d2 <code>number</code>\nGet aspect height\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - Height value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.aspectHeight](PROPERTY_BLOCKS.collection.aspectHeight)  \n<a name=\"Lines+anchor\"></a>\n\n### lines.anchor(value)\nSet anchor type\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.anchor](PROPERTY_BLOCKS.collection.anchor)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Anchor type |\n\n<a name=\"Lines+anchor\"></a>\n\n### lines.anchor() \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Anchor</code> - Anchor properties  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.anchor](PROPERTY_BLOCKS.collection.anchor)  \n<a name=\"Lines+canvas\"></a>\n\n### lines.canvas(value)\nSet canvas value\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.canvas](PROPERTY_BLOCKS.collection.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Lines+canvas\"></a>\n\n### lines.canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.canvas](PROPERTY_BLOCKS.collection.canvas)  \n<a name=\"Lines+template\"></a>\n\n### lines.template(value)\nSet template\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.template](PROPERTY_BLOCKS.collection.template)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Template</code> | Template object |\n\n<a name=\"Lines+template\"></a>\n\n### lines.template() \u21d2 <code>Template</code>\nGet template\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Template</code> - Template object  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.template](PROPERTY_BLOCKS.collection.template)  \n<a name=\"Lines+options\"></a>\n\n### lines.options() \u21d2 <code>Object</code>\nGet options\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Object</code> - Options object  \n**Access**: public  \n<a name=\"Lines+storageType\"></a>\n\n### lines.storageType() \u21d2 <code>clObject</code>\nReturns this collection's storage type\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>clObject</code> - Canvas Lab object  \n**Access**: public  \n<a name=\"Lines+area\"></a>\n\n### lines.area() \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - Area of rectangle  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.area](PROPERTY_BLOCKS.collection.area)  \n<a name=\"Lines+center\"></a>\n\n### lines.center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Point</code> - Center point coordinates  \n**Read only**: true  \n<a name=\"Lines+endPoint\"></a>\n\n### lines.endPoint() \u21d2 <code>Point</code>\nReturns the last Point within this Array\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>Point</code> - Last Array element's X & Y Coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.endPoint](PROPERTY_BLOCKS.collection.endPoint)  \n<a name=\"Lines+perimeter\"></a>\n\n### lines.perimeter() \u21d2 <code>number</code>\nGet perimeter of this object\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Returns**: <code>number</code> - Perimeter of rectangle  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.perimeter](PROPERTY_BLOCKS.collection.perimeter)  \n<a name=\"Lines+getPoints\"></a>\n\n### lines.getPoints(indexes, color)\nGet all or specific points throughout this collection\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Access**: public  \n**See**: [UTILITIES.collection.getPoints](UTILITIES.collection.getPoints)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| indexes | <code>Array.&lt;number&gt;</code> | Indexes of points |\n| color | <code>Rgb</code> | Color to colorize objects selected points |\n\n<a name=\"Lines+push\"></a>\n\n### lines.push()\nPushes child object(s) into this collection\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Access**: public  \n**See**: [UTILITIES.collection.push](UTILITIES.collection.push)  \n<a name=\"Lines+draw\"></a>\n\n### lines.draw(canvas)\nDraw function for collections\n\n**Kind**: instance method of [<code>Lines</code>](#Lines)  \n**Access**: public  \n**See**: [UTILITIES.collection.draw](UTILITIES.collection.draw)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "myTransitions": "<a name=\"myTransitions\"></a>\n\n## myTransitions\n**Kind**: global class  \n\n* [myTransitions](#myTransitions)\n    * [new myTransitions()](#new_myTransitions_new)\n    * [.transitions()](#myTransitions+transitions) \u21d2 <code>number</code>\n    * [.template(value)](#myTransitions+template)\n    * [.template()](#myTransitions+template) \u21d2 <code>Template</code>\n    * [._getShapeLineData()](#myTransitions+_getShapeLineData)\n    * [.skip(object, collection, timing, period)](#myTransitions+skip)\n    * [.hop(object, collection, timing, period)](#myTransitions+hop)\n    * [.bloom(collection, timing, period, out)](#myTransitions+bloom)\n    * [.shape(shape, collection, timing, period, clClass)](#myTransitions+shape)\n\n<a name=\"new_myTransitions_new\"></a>\n\n### new myTransitions()\nCreate myTransitions object\n\n<a name=\"myTransitions+transitions\"></a>\n\n### myTransitions.transitions() \u21d2 <code>number</code>\nGet transitions\n\n**Kind**: instance method of [<code>myTransitions</code>](#myTransitions)  \n**Returns**: <code>number</code> - Transitions of object  \n**Access**: public  \n<a name=\"myTransitions+template\"></a>\n\n### myTransitions.template(value)\nSet template\n\n**Kind**: instance method of [<code>myTransitions</code>](#myTransitions)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.template](PROPERTY_BLOCKS.individual.template)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Template</code> | Template object |\n\n<a name=\"myTransitions+template\"></a>\n\n### myTransitions.template() \u21d2 <code>Template</code>\nGet template\n\n**Kind**: instance method of [<code>myTransitions</code>](#myTransitions)  \n**Returns**: <code>Template</code> - Template object  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.template](PROPERTY_BLOCKS.individual.template)  \n<a name=\"myTransitions+_getShapeLineData\"></a>\n\n### myTransitions.\\_getShapeLineData()\nReturns an array of lines & changes linking the objects & collections together\n\n**Kind**: instance method of [<code>myTransitions</code>](#myTransitions)  \n<a name=\"myTransitions+skip\"></a>\n\n### myTransitions.skip(object, collection, timing, period)\nReturns transitions for skip animation\n\n**Kind**: instance method of [<code>myTransitions</code>](#myTransitions)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| object | <code>clObject</code> | Canvas Lab object |\n| collection | <code>ClCollection</code> | Canvas Lab collection |\n| timing | <code>string</code> \\| <code>function</code> | Timing function |\n| period | <code>number</code> | Period of timer |\n\n<a name=\"myTransitions+hop\"></a>\n\n### myTransitions.hop(object, collection, timing, period)\nReturns transitions for hop animation\n\n**Kind**: instance method of [<code>myTransitions</code>](#myTransitions)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| object | <code>clObject</code> | Canvas Lab object |\n| collection | <code>ClCollection</code> | Canvas Lab collection |\n| timing | <code>string</code> \\| <code>function</code> | Timing function |\n| period | <code>number</code> | Period of timer |\n\n<a name=\"myTransitions+bloom\"></a>\n\n### myTransitions.bloom(collection, timing, period, out)\nReturns transitions for bloom animation\n\n**Kind**: instance method of [<code>myTransitions</code>](#myTransitions)  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| collection | <code>ClCollection</code> |  | Canvas Lab collection |\n| timing | <code>string</code> \\| <code>function</code> |  | Timing function |\n| period | <code>number</code> |  | Period of timer |\n| out | <code>boolean</code> | <code>true</code> | Whether to bloom out, or in |\n\n<a name=\"myTransitions+shape\"></a>\n\n### myTransitions.shape(shape, collection, timing, period, clClass)\nCreates shape from array of numbers\n\n**Kind**: instance method of [<code>myTransitions</code>](#myTransitions)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| shape | <code>Array</code> | Array of collection indexes |\n| collection | <code>ClCollection</code> | Canvas Lab collection |\n| timing | <code>string</code> \\| <code>function</code> | Timing function |\n| period | <code>number</code> | Period of timer |\n| clClass | <code>object</code> | Canvas Lab object class |\n\n",
    "ControlPoints": "<a name=\"ControlPoints\"></a>\n\n## ControlPoints\n{Object} ControlPoints                      Defines the shape of a bezier curve\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| p0 | <code>number</code> | Control point one |\n| p1 | <code>number</code> | Control point two |\n| p2 | <code>number</code> | Control point three |\n| p3 | <code>number</code> | Control point four |\n\n\n* [ControlPoints](#ControlPoints)\n    * [new ControlPoints(p0, p1, p2, p3)](#new_ControlPoints_new)\n    * [.p0(value)](#ControlPoints+p0)\n    * [.p0()](#ControlPoints+p0) \u21d2 <code>number</code>\n    * [.p1(value)](#ControlPoints+p1)\n    * [.p1()](#ControlPoints+p1) \u21d2 <code>number</code>\n    * [.p2(value)](#ControlPoints+p2)\n    * [.p2()](#ControlPoints+p2) \u21d2 <code>number</code>\n    * [.p3(value)](#ControlPoints+p3)\n    * [.p3()](#ControlPoints+p3) \u21d2 <code>number</code>\n    * [.points(value)](#ControlPoints+points)\n    * [.points()](#ControlPoints+points) \u21d2 <code>number</code>\n\n<a name=\"new_ControlPoints_new\"></a>\n\n### new ControlPoints(p0, p1, p2, p3)\nCreate control points\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| p0 | <code>number</code> | Control point one |\n| p1 | <code>number</code> | Control point two |\n| p2 | <code>number</code> | Control point three |\n| p3 | <code>number</code> | Control point four |\n\n<a name=\"ControlPoints+p0\"></a>\n\n### controlPoints.p0(value)\nSet control point one\n\n**Kind**: instance method of [<code>ControlPoints</code>](#ControlPoints)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Control point one |\n\n<a name=\"ControlPoints+p0\"></a>\n\n### controlPoints.p0() \u21d2 <code>number</code>\nGet control point one\n\n**Kind**: instance method of [<code>ControlPoints</code>](#ControlPoints)  \n**Returns**: <code>number</code> - Control point one  \n**Read only**: true  \n<a name=\"ControlPoints+p1\"></a>\n\n### controlPoints.p1(value)\nSet control point one\n\n**Kind**: instance method of [<code>ControlPoints</code>](#ControlPoints)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Control point two |\n\n<a name=\"ControlPoints+p1\"></a>\n\n### controlPoints.p1() \u21d2 <code>number</code>\nGet control point one\n\n**Kind**: instance method of [<code>ControlPoints</code>](#ControlPoints)  \n**Returns**: <code>number</code> - Control point two  \n**Read only**: true  \n<a name=\"ControlPoints+p2\"></a>\n\n### controlPoints.p2(value)\nSet control point one\n\n**Kind**: instance method of [<code>ControlPoints</code>](#ControlPoints)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Control point three |\n\n<a name=\"ControlPoints+p2\"></a>\n\n### controlPoints.p2() \u21d2 <code>number</code>\nGet control point one\n\n**Kind**: instance method of [<code>ControlPoints</code>](#ControlPoints)  \n**Returns**: <code>number</code> - Control point three  \n**Read only**: true  \n<a name=\"ControlPoints+p3\"></a>\n\n### controlPoints.p3(value)\nSet control point one\n\n**Kind**: instance method of [<code>ControlPoints</code>](#ControlPoints)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Control point four |\n\n<a name=\"ControlPoints+p3\"></a>\n\n### controlPoints.p3() \u21d2 <code>number</code>\nGet control point one\n\n**Kind**: instance method of [<code>ControlPoints</code>](#ControlPoints)  \n**Returns**: <code>number</code> - Control point four  \n**Read only**: true  \n<a name=\"ControlPoints+points\"></a>\n\n### controlPoints.points(value)\nSet points\n\n**Kind**: instance method of [<code>ControlPoints</code>](#ControlPoints)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Points of object |\n\n<a name=\"ControlPoints+points\"></a>\n\n### controlPoints.points() \u21d2 <code>number</code>\nGet points\n\n**Kind**: instance method of [<code>ControlPoints</code>](#ControlPoints)  \n**Returns**: <code>number</code> - Points of object  \n**Access**: public  \n",
    "Ellipse": "<a name=\"Ellipse\"></a>\n\n## Ellipse \u21d0 <code>Circle</code>\n{Object}            Ellipse                 Ellipse object\n\n**Kind**: global class  \n**Extends**: <code>Circle</code>  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| point | <code>Point</code> |  | X & Y axis coordinates |\n| [radius] | <code>Point</code> | <code>&lt;Point&lt;20, 30&gt;</code> | Radius of ellipse |\n| angle | <code>Angle</code> |  | Angle properties |\n| stroke | <code>Stroke</code> |  | Stroke properties |\n| fill | <code>Fill</code> |  | Fill properties |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n| canvas | <code>HTMLCanvasElement</code> |  | 2D canvas context |\n| anchor | <code>Anchor</code> |  | Anchor properties |\n| options | <code>Options</code> |  | Options for this object |\n| position | <code>Position</code> |  | Position properties |\n\n\n* [Ellipse](#Ellipse) \u21d0 <code>Circle</code>\n    * [.radius(value)](#Ellipse+radius)\n    * [.radius()](#Ellipse+radius) \u21d2 <code>Point</code>\n\n<a name=\"Ellipse+radius\"></a>\n\n### ellipse.radius(value)\nSet radius value\n\n**Kind**: instance method of [<code>Ellipse</code>](#Ellipse)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Radius of circle |\n\n<a name=\"Ellipse+radius\"></a>\n\n### ellipse.radius() \u21d2 <code>Point</code>\nGet radius value\n\n**Kind**: instance method of [<code>Ellipse</code>](#Ellipse)  \n**Returns**: <code>Point</code> - Radius of circle  \n**Read only**: true  \n",
    "ShadowCollection": "<a name=\"ShadowCollection\"></a>\n\n## ShadowCollection\n{Object} ShadowCollection                   Shadow of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| blur | <code>number</code> |  | Blur strength |\n| offset | <code>Point</code> |  | Point offset coordinates |\n\n\n* [ShadowCollection](#ShadowCollection)\n    * [new ShadowCollection()](#new_ShadowCollection_new)\n    * [.color(value)](#ShadowCollection+color)\n    * [.color()](#ShadowCollection+color) \u21d2 <code>string</code>\n    * [.blur(blur)](#ShadowCollection+blur)\n    * [.blur()](#ShadowCollection+blur) \u21d2 <code>number</code>\n    * [.offset(value)](#ShadowCollection+offset)\n    * [.offset()](#ShadowCollection+offset) \u21d2 <code>Point</code>\n    * [.x(value)](#ShadowCollection+x)\n    * [.x()](#ShadowCollection+x) \u21d2 <code>number</code>\n    * [.y(value)](#ShadowCollection+y)\n    * [.y()](#ShadowCollection+y) \u21d2 <code>number</code>\n\n<a name=\"new_ShadowCollection_new\"></a>\n\n### new ShadowCollection()\nCreate a shadow collection\n\n<a name=\"ShadowCollection+color\"></a>\n\n### shadowCollection.color(value)\nSet color value\n\n**Kind**: instance method of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | RGB color value |\n\n<a name=\"ShadowCollection+color\"></a>\n\n### shadowCollection.color() \u21d2 <code>string</code>\nGet color value\n\n**Kind**: instance method of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Returns**: <code>string</code> - RGB color value  \n**Access**: public  \n<a name=\"ShadowCollection+blur\"></a>\n\n### shadowCollection.blur(blur)\nSet blur value\n\n**Kind**: instance method of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| blur | <code>number</code> | Blur value |\n\n<a name=\"ShadowCollection+blur\"></a>\n\n### shadowCollection.blur() \u21d2 <code>number</code>\nGet blur value\n\n**Kind**: instance method of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Returns**: <code>number</code> - Blur value  \n**Read only**: true  \n<a name=\"ShadowCollection+offset\"></a>\n\n### shadowCollection.offset(value)\nSet offset\n\n**Kind**: instance method of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Shadow offset |\n\n<a name=\"ShadowCollection+offset\"></a>\n\n### shadowCollection.offset() \u21d2 <code>Point</code>\nGet offset\n\n**Kind**: instance method of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Returns**: <code>Point</code> - Shadow offset  \n**Access**: public  \n<a name=\"ShadowCollection+x\"></a>\n\n### shadowCollection.x(value)\nSet x-axis offset value\n\n**Kind**: instance method of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"ShadowCollection+x\"></a>\n\n### shadowCollection.x() \u21d2 <code>number</code>\nGet x-axis offset value\n\n**Kind**: instance method of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"ShadowCollection+y\"></a>\n\n### shadowCollection.y(value)\nSet the y-axis offset value\n\n**Kind**: instance method of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"ShadowCollection+y\"></a>\n\n### shadowCollection.y() \u21d2 <code>number</code>\nGet y-axis offset value\n\n**Kind**: instance method of [<code>ShadowCollection</code>](#ShadowCollection)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n",
    "Shadow": "<a name=\"Shadow\"></a>\n\n## Shadow\n{Object} Shadow                             Shadow of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | RGB color value; r, g, b |\n| [blur] | <code>number</code> | <code>3</code> | Blur strength |\n| offset | <code>Point</code> |  | Point offset coordinates |\n\n\n* [Shadow](#Shadow)\n    * [new Shadow(color, blur, offset)](#new_Shadow_new)\n    * [.color(value)](#Shadow+color)\n    * [.color()](#Shadow+color) \u21d2 <code>Object</code>\n    * [.blur(blur)](#Shadow+blur)\n    * [.blur()](#Shadow+blur) \u21d2 <code>number</code>\n    * [.offset(value)](#Shadow+offset)\n    * [.offset()](#Shadow+offset) \u21d2 <code>Point</code>\n    * [.x(value)](#Shadow+x)\n    * [.x()](#Shadow+x) \u21d2 <code>number</code>\n    * [.y(value)](#Shadow+y)\n    * [.y()](#Shadow+y) \u21d2 <code>number</code>\n\n<a name=\"new_Shadow_new\"></a>\n\n### new Shadow(color, blur, offset)\nCreate a shadow\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| color | <code>Object</code> | RGB color value |\n| blur | <code>number</code> | Shadow blur value |\n| offset | <code>Point</code> | Shadow offset |\n\n<a name=\"Shadow+color\"></a>\n\n### shadow.color(value)\nSet color value\n\n**Kind**: instance method of [<code>Shadow</code>](#Shadow)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | Color model; Rgb, Hsl, Hwb |\n\n<a name=\"Shadow+color\"></a>\n\n### shadow.color() \u21d2 <code>Object</code>\nGet color value\n\n**Kind**: instance method of [<code>Shadow</code>](#Shadow)  \n**Returns**: <code>Object</code> - Color model; Rgb, Hsl, Hwb  \n**Access**: public  \n<a name=\"Shadow+blur\"></a>\n\n### shadow.blur(blur)\nSet blur value\n\n**Kind**: instance method of [<code>Shadow</code>](#Shadow)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| blur | <code>number</code> | Blur value |\n\n<a name=\"Shadow+blur\"></a>\n\n### shadow.blur() \u21d2 <code>number</code>\nGet blur value\n\n**Kind**: instance method of [<code>Shadow</code>](#Shadow)  \n**Returns**: <code>number</code> - Blur value  \n**Read only**: true  \n<a name=\"Shadow+offset\"></a>\n\n### shadow.offset(value)\nSet offset\n\n**Kind**: instance method of [<code>Shadow</code>](#Shadow)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.offset](PROPERTY_BLOCKS.individual.offset)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Shadow offset |\n\n<a name=\"Shadow+offset\"></a>\n\n### shadow.offset() \u21d2 <code>Point</code>\nGet offset\n\n**Kind**: instance method of [<code>Shadow</code>](#Shadow)  \n**Returns**: <code>Point</code> - Shadow offset  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.offset](PROPERTY_BLOCKS.individual.offset)  \n<a name=\"Shadow+x\"></a>\n\n### shadow.x(value)\nSet x-axis offset value\n\n**Kind**: instance method of [<code>Shadow</code>](#Shadow)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.offsetX](PROPERTY_BLOCKS.individual.offsetX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Shadow+x\"></a>\n\n### shadow.x() \u21d2 <code>number</code>\nGet x-axis offset value\n\n**Kind**: instance method of [<code>Shadow</code>](#Shadow)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.offsetX](PROPERTY_BLOCKS.individual.offsetX)  \n<a name=\"Shadow+y\"></a>\n\n### shadow.y(value)\nSet the y-axis offset value\n\n**Kind**: instance method of [<code>Shadow</code>](#Shadow)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.offsetY](PROPERTY_BLOCKS.individual.offsetY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Shadow+y\"></a>\n\n### shadow.y() \u21d2 <code>number</code>\nGet y-axis offset value\n\n**Kind**: instance method of [<code>Shadow</code>](#Shadow)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.offsetY](PROPERTY_BLOCKS.individual.offsetY)  \n",
    "Rectangles": "<a name=\"Rectangles\"></a>\n\n## Rectangles\n{Array}             Rectangles              Collection of Rectangle objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| stroke | <code>StrokeCollection</code> | Stroke collection properties |\n| shadow | <code>ShadowCollection</code> | Shadow collection properties |\n| aspect | <code>Aspect</code> | Aspect properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n| template | <code>Template</code> | Canvas Lab Template object |\n| anchor | <code>Anchor</code> | Anchor properties |\n| options | <code>Options</code> | Options for this object |\n\n\n* [Rectangles](#Rectangles)\n    * [new Rectangles()](#new_Rectangles_new)\n    * [.point(value)](#Rectangles+point)\n    * [.point()](#Rectangles+point) \u21d2 <code>Point</code>\n    * [.x(value)](#Rectangles+x)\n    * [.x()](#Rectangles+x) \u21d2 <code>number</code>\n    * [.y(value)](#Rectangles+y)\n    * [.y()](#Rectangles+y) \u21d2 <code>number</code>\n    * [.stroke()](#Rectangles+stroke) \u21d2 <code>Stroke</code>\n    * [.shadow()](#Rectangles+shadow) \u21d2 <code>Shadow</code>\n    * [.aspect()](#Rectangles+aspect) \u21d2 <code>Aspect</code>\n    * [.width()](#Rectangles+width) \u21d2 <code>number</code>\n    * [.height()](#Rectangles+height) \u21d2 <code>number</code>\n    * [.canvas(value)](#Rectangles+canvas)\n    * [.canvas()](#Rectangles+canvas) \u21d2 <code>string</code>\n    * [.template(value)](#Rectangles+template)\n    * [.template()](#Rectangles+template) \u21d2 <code>Template</code>\n    * [.anchor(value)](#Rectangles+anchor)\n    * [.anchor()](#Rectangles+anchor) \u21d2 <code>Anchor</code>\n    * [.options()](#Rectangles+options) \u21d2 <code>Object</code>\n    * [.storageType()](#Rectangles+storageType) \u21d2 <code>clObject</code>\n    * [.area()](#Rectangles+area) \u21d2 <code>number</code>\n    * [.center()](#Rectangles+center) \u21d2 <code>Point</code>\n    * [.endPoint()](#Rectangles+endPoint) \u21d2 <code>Point</code>\n    * [.perimeter()](#Rectangles+perimeter) \u21d2 <code>number</code>\n    * [.getPoints(indexes, color)](#Rectangles+getPoints)\n    * [.push()](#Rectangles+push)\n    * [.draw(canvas)](#Rectangles+draw)\n\n<a name=\"new_Rectangles_new\"></a>\n\n### new Rectangles()\nCreate Rectangles object\n\n<a name=\"Rectangles+point\"></a>\n\n### rectangles.point(value)\nSet point\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Rectangles+point\"></a>\n\n### rectangles.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n<a name=\"Rectangles+x\"></a>\n\n### rectangles.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Rectangles+x\"></a>\n\n### rectangles.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n<a name=\"Rectangles+y\"></a>\n\n### rectangles.y(value)\nSet the y-axis value\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Rectangles+y\"></a>\n\n### rectangles.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n<a name=\"Rectangles+stroke\"></a>\n\n### rectangles.stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"Rectangles+shadow\"></a>\n\n### rectangles.shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"Rectangles+aspect\"></a>\n\n### rectangles.aspect() \u21d2 <code>Aspect</code>\nGet aspect properties\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>Aspect</code> - Aspect properties  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.aspect](PROPERTY_BLOCKS.collection.aspect)  \n<a name=\"Rectangles+width\"></a>\n\n### rectangles.width() \u21d2 <code>number</code>\nGet aspect with\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>number</code> - Width value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.aspectWidth](PROPERTY_BLOCKS.collection.aspectWidth)  \n<a name=\"Rectangles+height\"></a>\n\n### rectangles.height() \u21d2 <code>number</code>\nGet aspect height\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>number</code> - Height value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.aspectHeight](PROPERTY_BLOCKS.collection.aspectHeight)  \n<a name=\"Rectangles+canvas\"></a>\n\n### rectangles.canvas(value)\nSet canvas value\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.canvas](PROPERTY_BLOCKS.collection.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Rectangles+canvas\"></a>\n\n### rectangles.canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.canvas](PROPERTY_BLOCKS.collection.canvas)  \n<a name=\"Rectangles+template\"></a>\n\n### rectangles.template(value)\nSet template\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.template](PROPERTY_BLOCKS.collection.template)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Template</code> | Template object |\n\n<a name=\"Rectangles+template\"></a>\n\n### rectangles.template() \u21d2 <code>Template</code>\nGet template\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>Template</code> - Template object  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.template](PROPERTY_BLOCKS.collection.template)  \n<a name=\"Rectangles+anchor\"></a>\n\n### rectangles.anchor(value)\nSet anchor type\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.anchor](PROPERTY_BLOCKS.collection.anchor)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Anchor type |\n\n<a name=\"Rectangles+anchor\"></a>\n\n### rectangles.anchor() \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>Anchor</code> - Anchor properties  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.anchor](PROPERTY_BLOCKS.collection.anchor)  \n<a name=\"Rectangles+options\"></a>\n\n### rectangles.options() \u21d2 <code>Object</code>\nGet options\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>Object</code> - Options object  \n**Access**: public  \n<a name=\"Rectangles+storageType\"></a>\n\n### rectangles.storageType() \u21d2 <code>clObject</code>\nReturns this collection's storage type\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>clObject</code> - Canvas Lab object  \n**Access**: public  \n<a name=\"Rectangles+area\"></a>\n\n### rectangles.area() \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>number</code> - Area of rectangle  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.area](PROPERTY_BLOCKS.collection.area)  \n<a name=\"Rectangles+center\"></a>\n\n### rectangles.center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>Point</code> - Center point coordinates  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.center](PROPERTY_BLOCKS.collection.center)  \n<a name=\"Rectangles+endPoint\"></a>\n\n### rectangles.endPoint() \u21d2 <code>Point</code>\nReturns the last Point within this Array\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>Point</code> - Last Array element's X & Y Coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.endPoint](PROPERTY_BLOCKS.collection.endPoint)  \n<a name=\"Rectangles+perimeter\"></a>\n\n### rectangles.perimeter() \u21d2 <code>number</code>\nGet perimeter of this object\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Returns**: <code>number</code> - Perimeter of rectangle  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.perimeter](PROPERTY_BLOCKS.collection.perimeter)  \n<a name=\"Rectangles+getPoints\"></a>\n\n### rectangles.getPoints(indexes, color)\nGet all or specific points throughout this collection\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Access**: public  \n**See**: [UTILITIES.collection.getPoints](UTILITIES.collection.getPoints)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| indexes | <code>Array.&lt;number&gt;</code> | Indexes of points |\n| color | <code>Rgb</code> | Color to colorize objects selected points |\n\n<a name=\"Rectangles+push\"></a>\n\n### rectangles.push()\nPushes child object(s) into this collection\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Access**: public  \n**See**: [UTILITIES.collection.push](UTILITIES.collection.push)  \n<a name=\"Rectangles+draw\"></a>\n\n### rectangles.draw(canvas)\nDraw function for collections\n\n**Kind**: instance method of [<code>Rectangles</code>](#Rectangles)  \n**Access**: public  \n**See**: [UTILITIES.collection.draw](UTILITIES.collection.draw)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Circles": "<a name=\"Circles\"></a>\n\n## Circles\n{Array}             Circles                 Collection of circle elements within an array\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| stroke | <code>StrokeCollection</code> | Stroke collection properties |\n| shadow | <code>ShadowCollection</code> | Shadow collection properties |\n| aspect | <code>Aspect</code> | Aspect properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n| template | <code>Template</code> | Canvas Lab Template object |\n| anchor | <code>Anchor</code> | Anchor properties |\n| options | <code>Options</code> | Options for this object |\n\n\n* [Circles](#Circles)\n    * [new Circles()](#new_Circles_new)\n    * [.point(value)](#Circles+point)\n    * [.point()](#Circles+point) \u21d2 <code>Point</code>\n    * [.x(value)](#Circles+x)\n    * [.x()](#Circles+x) \u21d2 <code>number</code>\n    * [.y(value)](#Circles+y)\n    * [.y()](#Circles+y) \u21d2 <code>number</code>\n    * [.stroke()](#Circles+stroke) \u21d2 <code>Stroke</code>\n    * [.shadow()](#Circles+shadow) \u21d2 <code>Shadow</code>\n    * [.aspect()](#Circles+aspect) \u21d2 <code>Aspect</code>\n    * [.width()](#Circles+width) \u21d2 <code>number</code>\n    * [.height()](#Circles+height) \u21d2 <code>number</code>\n    * [.canvas(value)](#Circles+canvas)\n    * [.canvas()](#Circles+canvas) \u21d2 <code>string</code>\n    * [.template(value)](#Circles+template)\n    * [.template()](#Circles+template) \u21d2 <code>Template</code>\n    * [.anchor(value)](#Circles+anchor)\n    * [.anchor()](#Circles+anchor) \u21d2 <code>Anchor</code>\n    * [.options()](#Circles+options) \u21d2 <code>Object</code>\n    * [.storageType()](#Circles+storageType) \u21d2 <code>clObject</code>\n    * [.area()](#Circles+area) \u21d2 <code>number</code>\n    * [.center()](#Circles+center) \u21d2 <code>Point</code>\n    * [.endPoint()](#Circles+endPoint) \u21d2 <code>Point</code>\n    * [.perimeter()](#Circles+perimeter) \u21d2 <code>number</code>\n    * [.getPoints(indexes, color)](#Circles+getPoints)\n    * [.push()](#Circles+push)\n    * [.draw(canvas)](#Circles+draw)\n\n<a name=\"new_Circles_new\"></a>\n\n### new Circles()\nCreate Circles object\n\n<a name=\"Circles+point\"></a>\n\n### circles.point(value)\nSet point\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Circles+point\"></a>\n\n### circles.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n<a name=\"Circles+x\"></a>\n\n### circles.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Circles+x\"></a>\n\n### circles.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n<a name=\"Circles+y\"></a>\n\n### circles.y(value)\nSet the y-axis value\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Circles+y\"></a>\n\n### circles.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n<a name=\"Circles+stroke\"></a>\n\n### circles.stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"Circles+shadow\"></a>\n\n### circles.shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"Circles+aspect\"></a>\n\n### circles.aspect() \u21d2 <code>Aspect</code>\nGet aspect properties\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>Aspect</code> - Aspect properties  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.aspect](PROPERTY_BLOCKS.collection.aspect)  \n<a name=\"Circles+width\"></a>\n\n### circles.width() \u21d2 <code>number</code>\nGet aspect with\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>number</code> - Width value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.aspectWidth](PROPERTY_BLOCKS.collection.aspectWidth)  \n<a name=\"Circles+height\"></a>\n\n### circles.height() \u21d2 <code>number</code>\nGet aspect height\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>number</code> - Height value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.aspectHeight](PROPERTY_BLOCKS.collection.aspectHeight)  \n<a name=\"Circles+canvas\"></a>\n\n### circles.canvas(value)\nSet canvas value\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.canvas](PROPERTY_BLOCKS.collection.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Circles+canvas\"></a>\n\n### circles.canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.canvas](PROPERTY_BLOCKS.collection.canvas)  \n<a name=\"Circles+template\"></a>\n\n### circles.template(value)\nSet template\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.template](PROPERTY_BLOCKS.collection.template)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Template</code> | Template object |\n\n<a name=\"Circles+template\"></a>\n\n### circles.template() \u21d2 <code>Template</code>\nGet template\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>Template</code> - Template object  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.template](PROPERTY_BLOCKS.collection.template)  \n<a name=\"Circles+anchor\"></a>\n\n### circles.anchor(value)\nSet anchor type\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.anchor](PROPERTY_BLOCKS.collection.anchor)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Anchor type |\n\n<a name=\"Circles+anchor\"></a>\n\n### circles.anchor() \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>Anchor</code> - Anchor properties  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.anchor](PROPERTY_BLOCKS.collection.anchor)  \n<a name=\"Circles+options\"></a>\n\n### circles.options() \u21d2 <code>Object</code>\nGet options\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>Object</code> - Options object  \n**Access**: public  \n<a name=\"Circles+storageType\"></a>\n\n### circles.storageType() \u21d2 <code>clObject</code>\nReturns this collection's storage type\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>clObject</code> - Canvas Lab object  \n**Access**: public  \n<a name=\"Circles+area\"></a>\n\n### circles.area() \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>number</code> - Area of rectangle  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.area](PROPERTY_BLOCKS.collection.area)  \n<a name=\"Circles+center\"></a>\n\n### circles.center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>Point</code> - Center point coordinates  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.center](PROPERTY_BLOCKS.collection.center)  \n<a name=\"Circles+endPoint\"></a>\n\n### circles.endPoint() \u21d2 <code>Point</code>\nReturns the last Point within this Array\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>Point</code> - Last Array element's X & Y Coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.collection.endPoint](PROPERTY_BLOCKS.collection.endPoint)  \n<a name=\"Circles+perimeter\"></a>\n\n### circles.perimeter() \u21d2 <code>number</code>\nGet perimeter of this object\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Returns**: <code>number</code> - Perimeter of rectangle  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.collection.perimeter](PROPERTY_BLOCKS.collection.perimeter)  \n<a name=\"Circles+getPoints\"></a>\n\n### circles.getPoints(indexes, color)\nGet all or specific points throughout this collection\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Access**: public  \n**See**: [UTILITIES.collection.getPoints](UTILITIES.collection.getPoints)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| indexes | <code>Array.&lt;number&gt;</code> | Indexes of points |\n| color | <code>Rgb</code> | Color to colorize objects selected points |\n\n<a name=\"Circles+push\"></a>\n\n### circles.push()\nPushes child object(s) into this collection\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Access**: public  \n**See**: [UTILITIES.collection.push](UTILITIES.collection.push)  \n<a name=\"Circles+draw\"></a>\n\n### circles.draw(canvas)\nDraw function for collections\n\n**Kind**: instance method of [<code>Circles</code>](#Circles)  \n**Access**: public  \n**See**: [UTILITIES.collection.draw](UTILITIES.collection.draw)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Anchor": "<a name=\"Anchor\"></a>\n\n## Anchor\n{Object} Anchor                             Anchor object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| align | <code>string</code> | Anchor alignment |\n\n\n* [Anchor](#Anchor)\n    * [.point(point)](#Anchor+point)\n    * [.point()](#Anchor+point) \u21d2 <code>Point</code>\n    * [.x(value)](#Anchor+x)\n    * [.x()](#Anchor+x) \u21d2 <code>number</code>\n    * [.y(value)](#Anchor+y)\n    * [.y()](#Anchor+y) \u21d2 <code>number</code>\n    * [.align(value)](#Anchor+align)\n    * [.align()](#Anchor+align) \u21d2 <code>string</code>\n\n<a name=\"Anchor+point\"></a>\n\n### anchor.point(point)\nSet point\n\n**Kind**: instance method of [<code>Anchor</code>](#Anchor)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n\n<a name=\"Anchor+point\"></a>\n\n### anchor.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>Anchor</code>](#Anchor)  \n**Returns**: <code>Point</code> - X & Y axis coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n<a name=\"Anchor+x\"></a>\n\n### anchor.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>Anchor</code>](#Anchor)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Anchor+x\"></a>\n\n### anchor.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>Anchor</code>](#Anchor)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n<a name=\"Anchor+y\"></a>\n\n### anchor.y(value)\nSet y-axis value\n\n**Kind**: instance method of [<code>Anchor</code>](#Anchor)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Anchor+y\"></a>\n\n### anchor.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>Anchor</code>](#Anchor)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n<a name=\"Anchor+align\"></a>\n\n### anchor.align(value)\nSet anchor alignment\n\n**Kind**: instance method of [<code>Anchor</code>](#Anchor)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Anchor alignment |\n\n<a name=\"Anchor+align\"></a>\n\n### anchor.align() \u21d2 <code>string</code>\nGet anchor alignment\n\n**Kind**: instance method of [<code>Anchor</code>](#Anchor)  \n**Returns**: <code>string</code> - Anchor alignment  \n**Read only**: true  \n",
    "Fill": "<a name=\"Fill\"></a>\n\n## Fill\n{Object}  Fill                              Fill container for various fill types\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| [type] | <code>string</code> | <code>&quot;&#x27;solid&#x27;&quot;</code> | Fill type; solid | linear | radial | conic | pattern |\n| gradient | <code>Object</code> |  | Gradient object; Linear | Radial | Conic |\n| pattern | <code>Pattern</code> |  | Pattern fill object |\n\n\n* [Fill](#Fill)\n    * [new Fill([color], [type], gradient)](#new_Fill_new)\n    * [.color(value)](#Fill+color)\n    * [.color()](#Fill+color) \u21d2 <code>Object</code>\n    * [.type(value)](#Fill+type)\n    * [.type()](#Fill+type) \u21d2 <code>string</code>\n    * [.gradient(value)](#Fill+gradient)\n    * [.gradient()](#Fill+gradient) \u21d2 <code>Object</code>\n    * [.pattern(value)](#Fill+pattern)\n    * [.pattern()](#Fill+pattern) \u21d2 <code>Pattern</code>\n    * [.repetition(value)](#Fill+repetition)\n    * [.repetition()](#Fill+repetition) \u21d2 <code>string</code>\n\n<a name=\"new_Fill_new\"></a>\n\n### new Fill([color], [type], gradient)\nCreate a fill type\n\n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| [type] | <code>string</code> | <code>&quot;&#x27;solid&#x27;&quot;</code> | Fill type |\n| gradient | <code>Object</code> |  | Gradient object |\n\n<a name=\"Fill+color\"></a>\n\n### fill.color(value)\nSet color type\n\n**Kind**: instance method of [<code>Fill</code>](#Fill)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | Color model; Rgb |\n\n<a name=\"Fill+color\"></a>\n\n### fill.color() \u21d2 <code>Object</code>\nGet color type\n\n**Kind**: instance method of [<code>Fill</code>](#Fill)  \n**Returns**: <code>Object</code> - Color model; Rgb  \n**Read only**: true  \n<a name=\"Fill+type\"></a>\n\n### fill.type(value)\nSet type value\n\n**Kind**: instance method of [<code>Fill</code>](#Fill)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Fill type value |\n\n<a name=\"Fill+type\"></a>\n\n### fill.type() \u21d2 <code>string</code>\nGet type value\n\n**Kind**: instance method of [<code>Fill</code>](#Fill)  \n**Returns**: <code>string</code> - Fill type value  \n**Read only**: true  \n<a name=\"Fill+gradient\"></a>\n\n### fill.gradient(value)\nSet gradient gradient properties\n\n**Kind**: instance method of [<code>Fill</code>](#Fill)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | Gradient object & properties |\n\n<a name=\"Fill+gradient\"></a>\n\n### fill.gradient() \u21d2 <code>Object</code>\nGet gradient gradient properties\n\n**Kind**: instance method of [<code>Fill</code>](#Fill)  \n**Returns**: <code>Object</code> - Gradient object & properties  \n**Read only**: true  \n<a name=\"Fill+pattern\"></a>\n\n### fill.pattern(value)\nSets pattern property value\n\n**Kind**: instance method of [<code>Fill</code>](#Fill)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Path of image to pattern |\n\n<a name=\"Fill+pattern\"></a>\n\n### fill.pattern() \u21d2 <code>Pattern</code>\nGets pattern property value\n\n**Kind**: instance method of [<code>Fill</code>](#Fill)  \n**Returns**: <code>Pattern</code> - Pattern fill object  \n**Read only**: true  \n<a name=\"Fill+repetition\"></a>\n\n### fill.repetition(value)\nSets repetition property value\n\n**Kind**: instance method of [<code>Fill</code>](#Fill)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Repetition property value |\n\n<a name=\"Fill+repetition\"></a>\n\n### fill.repetition() \u21d2 <code>string</code>\nGets repetition property value\n\n**Kind**: instance method of [<code>Fill</code>](#Fill)  \n**Returns**: <code>string</code> - Repetition property value  \n**Read only**: true  \n",
    "Options": "<a name=\"Options\"></a>\n\n## Options\n{Object}  Options                           Options for collections\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [anchor] | <code>boolean</code> | <code>false</code> | Show anchor |\n| [axis] | <code>boolean</code> | <code>false</code> | Show axis |\n| [border] | <code>boolean</code> | <code>false</code> | Show border |\n| [coordinates] | <code>boolean</code> | <code>false</code> | Show coordinates |\n| [controlPoints] | <code>boolean</code> | <code>false</code> | Show control points |\n| [points] | <code>boolean</code> | <code>false</code> | Show points |\n| [shadow] | <code>boolean</code> | <code>false</code> | Show shadow |\n| master | <code>Object</code> |  | Master object |\n\n\n* [Options](#Options)\n    * [new Options(anchor, axis, border, coordinates, controlPoints, points, shadow)](#new_Options_new)\n    * [.anchor(value)](#Options+anchor)\n    * [.anchor()](#Options+anchor) \u21d2 <code>boolean</code>\n    * [.axis(value)](#Options+axis)\n    * [.axis()](#Options+axis) \u21d2 <code>boolean</code>\n    * [.border(value)](#Options+border)\n    * [.border()](#Options+border) \u21d2 <code>boolean</code>\n    * [.coordinates(value)](#Options+coordinates)\n    * [.coordinates()](#Options+coordinates) \u21d2 <code>boolean</code>\n    * [.controlPoints(value)](#Options+controlPoints)\n    * [.controlPoints()](#Options+controlPoints) \u21d2 <code>boolean</code>\n    * [.shadow(value)](#Options+shadow)\n    * [.shadow()](#Options+shadow) \u21d2 <code>boolean</code>\n    * [.master(value)](#Options+master)\n    * [.master()](#Options+master) \u21d2 <code>clObject</code>\n\n<a name=\"new_Options_new\"></a>\n\n### new Options(anchor, axis, border, coordinates, controlPoints, points, shadow)\nCreate an options object\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| anchor | <code>boolean</code> | Show anchor |\n| axis | <code>boolean</code> | Show axis |\n| border | <code>boolean</code> | Show border |\n| coordinates | <code>boolean</code> | Show coordinates |\n| controlPoints | <code>boolean</code> | Show control points |\n| points | <code>boolean</code> | Show points |\n| shadow | <code>boolean</code> | Show shadow |\n\n<a name=\"Options+anchor\"></a>\n\n### options.anchor(value)\nSet anchor value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Anchor; true | false |\n\n<a name=\"Options+anchor\"></a>\n\n### options.anchor() \u21d2 <code>boolean</code>\nGet anchor value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Anchor; true | false  \n**Read only**: true  \n<a name=\"Options+axis\"></a>\n\n### options.axis(value)\nSet axis value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Axis; true | false |\n\n<a name=\"Options+axis\"></a>\n\n### options.axis() \u21d2 <code>boolean</code>\nGet axis value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Axis; true | false  \n**Read only**: true  \n<a name=\"Options+border\"></a>\n\n### options.border(value)\nSet border value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Border; true | false |\n\n<a name=\"Options+border\"></a>\n\n### options.border() \u21d2 <code>boolean</code>\nGet border value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Border; true | false  \n**Read only**: true  \n<a name=\"Options+coordinates\"></a>\n\n### options.coordinates(value)\nSet coordinates value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Coordinates; true | false |\n\n<a name=\"Options+coordinates\"></a>\n\n### options.coordinates() \u21d2 <code>boolean</code>\nGet coordinates value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Coordinates; true | false  \n**Read only**: true  \n<a name=\"Options+controlPoints\"></a>\n\n### options.controlPoints(value)\nSet control points value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Control points; true | false |\n\n<a name=\"Options+controlPoints\"></a>\n\n### options.controlPoints() \u21d2 <code>boolean</code>\nGet control points value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Control points; true | false  \n**Read only**: true  \n<a name=\"Options+shadow\"></a>\n\n### options.shadow(value)\nSet shadow value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Shadow; true | false |\n\n<a name=\"Options+shadow\"></a>\n\n### options.shadow() \u21d2 <code>boolean</code>\nGet shadow value\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Returns**: <code>boolean</code> - Shadow; true | false  \n**Access**: public  \n<a name=\"Options+master\"></a>\n\n### options.master(value)\nSet master object\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.master](PROPERTY_BLOCKS.individual.master)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>clObject</code> | Canvas Lab object |\n\n<a name=\"Options+master\"></a>\n\n### options.master() \u21d2 <code>clObject</code>\nGet master object\n\n**Kind**: instance method of [<code>Options</code>](#Options)  \n**Returns**: <code>clObject</code> - Master Canvas Lab object  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.master](PROPERTY_BLOCKS.individual.master)  \n",
    "Animations": "<a name=\"Animations\"></a>\n\n## Animations\n{Object}                  Animations        Animations handler; for drawing multiple objects in one instance\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| objects | <code>Array.&lt;clObject&gt;</code> | CanvasLab objects |\n| timings | <code>Array.&lt;(string\\|function())&gt;</code> | Timing functions |\n| periods | <code>number</code> | Period of time |\n| changes | <code>Array.&lt;Object&gt;</code> | Changes an object |\n| options | <code>Object</code> | Options for this object |\n\n\n* [Animations](#Animations)\n    * [new Animations()](#new_Animations_new)\n    * [.objects(value)](#Animations+objects)\n    * [.objects()](#Animations+objects) \u21d2 <code>clObject</code>\n    * [.timings(value)](#Animations+timings)\n    * [.timings()](#Animations+timings) \u21d2 <code>function</code>\n    * [.period(value)](#Animations+period)\n    * [.period()](#Animations+period) \u21d2 <code>number</code>\n    * [.changes(value)](#Animations+changes)\n    * [.changes()](#Animations+changes) \u21d2 <code>clChange</code>\n    * [.cache(value)](#Animations+cache)\n    * [.cache()](#Animations+cache) \u21d2 <code>boolean</code>\n    * [.queue(value)](#Animations+queue)\n    * [.queue()](#Animations+queue) \u21d2 <code>Queue</code>\n    * [.cancel()](#Animations+cancel)\n    * [.animate()](#Animations+animate)\n\n<a name=\"new_Animations_new\"></a>\n\n### new Animations()\nCreates an animation instance\n\n<a name=\"Animations+objects\"></a>\n\n### animations.objects(value)\nSet objects to animate\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>clObject</code> | Canvas Lab objects |\n\n<a name=\"Animations+objects\"></a>\n\n### animations.objects() \u21d2 <code>clObject</code>\nGet objects\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Returns**: <code>clObject</code> - Canvas Lab objects  \n**Read only**: true  \n<a name=\"Animations+timings\"></a>\n\n### animations.timings(value)\nSet timings\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> \\| <code>function</code> | Timing function |\n\n<a name=\"Animations+timings\"></a>\n\n### animations.timings() \u21d2 <code>function</code>\nGet timing\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Returns**: <code>function</code> - Timing function  \n**Read only**: true  \n<a name=\"Animations+period\"></a>\n\n### animations.period(value)\nSet period of animation\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.animation.period](PROPERTY_BLOCKS.animation.period)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Period of animation-time |\n\n<a name=\"Animations+period\"></a>\n\n### animations.period() \u21d2 <code>number</code>\nGet period of animation\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Returns**: <code>number</code> - Period of animation-time  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.animation.period](PROPERTY_BLOCKS.animation.period)  \n<a name=\"Animations+changes\"></a>\n\n### animations.changes(value)\nSet changes\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>clChange</code> | Canvas Lab changes object |\n\n<a name=\"Animations+changes\"></a>\n\n### animations.changes() \u21d2 <code>clChange</code>\nGet changes\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Returns**: <code>clChange</code> - Canvas Lab changes object  \n**Read only**: true  \n<a name=\"Animations+cache\"></a>\n\n### animations.cache(value)\nSet cache\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.animation.cache](PROPERTY_BLOCKS.animation.cache)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | True || False |\n\n<a name=\"Animations+cache\"></a>\n\n### animations.cache() \u21d2 <code>boolean</code>\nGet cache\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Returns**: <code>boolean</code> - True || False  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.animation.cache](PROPERTY_BLOCKS.animation.cache)  \n<a name=\"Animations+queue\"></a>\n\n### animations.queue(value)\nSet queue\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.animation.queue](PROPERTY_BLOCKS.animation.queue)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Queue</code> | Queue object |\n\n<a name=\"Animations+queue\"></a>\n\n### animations.queue() \u21d2 <code>Queue</code>\nGet queue\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Returns**: <code>Queue</code> - Queue object  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.animation.queue](PROPERTY_BLOCKS.animation.queue)  \n<a name=\"Animations+cancel\"></a>\n\n### animations.cancel()\nCancels animation\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.animation.cancel](PROPERTY_BLOCKS.animation.cancel)  \n<a name=\"Animations+animate\"></a>\n\n### animations.animate()\nInitiates animation\n\n**Kind**: instance method of [<code>Animations</code>](#Animations)  \n**Access**: public  \n",
    "Queue": "<a name=\"Queue\"></a>\n\n## Queue\n{Object} Queue                              Queue object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| entries | <code>Array</code> |  | Array of entries |\n| [index] | <code>number</code> | <code>0</code> | Current index |\n| entry | <code>Object</code> |  | Current entry |\n\n\n* [Queue](#Queue)\n    * [new Queue()](#new_Queue_new)\n    * [.entries(value)](#Queue+entries)\n    * [.entries()](#Queue+entries) \u21d2 <code>Array</code>\n    * [.index()](#Queue+index) \u21d2 <code>number</code>\n    * [.entry()](#Queue+entry)\n    * [.entry()](#Queue+entry) \u21d2 <code>Object</code>\n    * [.isEnd()](#Queue+isEnd) \u21d2 <code>boolean</code>\n    * [.isLast()](#Queue+isLast) \u21d2 <code>boolean</code>\n    * [.isSet()](#Queue+isSet) \u21d2 <code>boolean</code>\n    * [.next()](#Queue+next) \u21d2 <code>Object</code>\n    * [.reset()](#Queue+reset)\n\n<a name=\"new_Queue_new\"></a>\n\n### new Queue()\nCreate a Queue object\n\n<a name=\"Queue+entries\"></a>\n\n### queue.entries(value)\nSet entries\n\n**Kind**: instance method of [<code>Queue</code>](#Queue)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array</code> | Array of entries |\n\n<a name=\"Queue+entries\"></a>\n\n### queue.entries() \u21d2 <code>Array</code>\nGet entries\n\n**Kind**: instance method of [<code>Queue</code>](#Queue)  \n**Returns**: <code>Array</code> - Array of entries  \n**Access**: public  \n<a name=\"Queue+index\"></a>\n\n### queue.index() \u21d2 <code>number</code>\nGet index\n\n**Kind**: instance method of [<code>Queue</code>](#Queue)  \n**Returns**: <code>number</code> - Current index value  \n**Read only**: true  \n<a name=\"Queue+entry\"></a>\n\n### queue.entry()\nPushes in an entry\n\n**Kind**: instance method of [<code>Queue</code>](#Queue)  \n**Access**: public  \n<a name=\"Queue+entry\"></a>\n\n### queue.entry() \u21d2 <code>Object</code>\nGet current entry\n\n**Kind**: instance method of [<code>Queue</code>](#Queue)  \n**Returns**: <code>Object</code> - Current entry  \n**Access**: public  \n<a name=\"Queue+isEnd\"></a>\n\n### queue.isEnd() \u21d2 <code>boolean</code>\nReturns whether this queue is at its end\n\n**Kind**: instance method of [<code>Queue</code>](#Queue)  \n**Returns**: <code>boolean</code> - True || False  \n**Access**: public  \n<a name=\"Queue+isLast\"></a>\n\n### queue.isLast() \u21d2 <code>boolean</code>\nReturns whether this queue is on its last element\n\n**Kind**: instance method of [<code>Queue</code>](#Queue)  \n**Returns**: <code>boolean</code> - True || False  \n**Access**: public  \n<a name=\"Queue+isSet\"></a>\n\n### queue.isSet() \u21d2 <code>boolean</code>\nReturns whether this queue is set, or populated\n\n**Kind**: instance method of [<code>Queue</code>](#Queue)  \n**Returns**: <code>boolean</code> - True || False  \n**Access**: public  \n<a name=\"Queue+next\"></a>\n\n### queue.next() \u21d2 <code>Object</code>\nReturns next entry; begins with [ 0 ], or first entry\n\n**Kind**: instance method of [<code>Queue</code>](#Queue)  \n**Returns**: <code>Object</code> - Next entry  \n**Access**: public  \n<a name=\"Queue+reset\"></a>\n\n### queue.reset()\nResets index to 0\n\n**Kind**: instance method of [<code>Queue</code>](#Queue)  \n**Access**: public  \n",
    "Aspect": "<a name=\"Aspect\"></a>\n\n## Aspect\n{Object} Aspect                             Aspect dimensions of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [width] | <code>number</code> | <code>0</code> | Width |\n| [height] | <code>number</code> | <code>0</code> | Height |\n\n\n* [Aspect](#Aspect)\n    * [new Aspect(width, height)](#new_Aspect_new)\n    * [.width(value)](#Aspect+width)\n    * [.width()](#Aspect+width) \u21d2 <code>number</code>\n    * [.height(value)](#Aspect+height)\n    * [.height()](#Aspect+height) \u21d2 <code>number</code>\n    * [.offset()](#Aspect+offset) \u21d2 <code>Point</code>\n    * [.center()](#Aspect+center) \u21d2 <code>Point</code>\n    * [.heightCenter()](#Aspect+heightCenter) \u21d2 <code>number</code>\n    * [.widthCenter()](#Aspect+widthCenter) \u21d2 <code>number</code>\n\n<a name=\"new_Aspect_new\"></a>\n\n### new Aspect(width, height)\nCreate an aspect\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| width | <code>number</code> | Width of aspect |\n| height | <code>number</code> | Height of aspect |\n\n<a name=\"Aspect+width\"></a>\n\n### aspect.width(value)\nSet width\n\n**Kind**: instance method of [<code>Aspect</code>](#Aspect)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Width value |\n\n<a name=\"Aspect+width\"></a>\n\n### aspect.width() \u21d2 <code>number</code>\nGet width\n\n**Kind**: instance method of [<code>Aspect</code>](#Aspect)  \n**Returns**: <code>number</code> - Width value  \n**Read only**: true  \n<a name=\"Aspect+height\"></a>\n\n### aspect.height(value)\nSet height\n\n**Kind**: instance method of [<code>Aspect</code>](#Aspect)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Height value |\n\n<a name=\"Aspect+height\"></a>\n\n### aspect.height() \u21d2 <code>number</code>\nGet height\n\n**Kind**: instance method of [<code>Aspect</code>](#Aspect)  \n**Returns**: <code>number</code> - Height value  \n**Read only**: true  \n<a name=\"Aspect+offset\"></a>\n\n### aspect.offset() \u21d2 <code>Point</code>\nGet offset\n\n**Kind**: instance method of [<code>Aspect</code>](#Aspect)  \n**Returns**: <code>Point</code> - Aspect offset  \n**Read only**: true  \n<a name=\"Aspect+center\"></a>\n\n### aspect.center() \u21d2 <code>Point</code>\nGet center of aspect\n\n**Kind**: instance method of [<code>Aspect</code>](#Aspect)  \n**Returns**: <code>Point</code> - Center point of this aspect  \n**Read only**: true  \n<a name=\"Aspect+heightCenter\"></a>\n\n### aspect.heightCenter() \u21d2 <code>number</code>\nGet center of height\n\n**Kind**: instance method of [<code>Aspect</code>](#Aspect)  \n**Returns**: <code>number</code> - Center of height  \n**Read only**: true  \n<a name=\"Aspect+widthCenter\"></a>\n\n### aspect.widthCenter() \u21d2 <code>number</code>\nGet center of width\n\n**Kind**: instance method of [<code>Aspect</code>](#Aspect)  \n**Returns**: <code>number</code> - Center of with  \n**Read only**: true  \n",
    "PointCollection": "<a name=\"PointCollection\"></a>\n\n## PointCollection\n{Object}            PointCollection         X & Y coordinates for an object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [x] | <code>number</code> | <code>0</code> | X - x-axis coordinate |\n| [y] | <code>number</code> | <code>0</code> | Y - y-axis coordinate |\n| options | <code>OptionsCollection</code> |  | Ancillary properties |\n\n\n* [PointCollection](#PointCollection)\n    * [new PointCollection()](#new_PointCollection_new)\n    * [.x(value)](#PointCollection+x)\n    * [.x()](#PointCollection+x) \u21d2 <code>number</code>\n    * [.y(value)](#PointCollection+y)\n    * [.y()](#PointCollection+y) \u21d2 <code>number</code>\n    * [.options()](#PointCollection+options) \u21d2 <code>OptionsCollection</code>\n    * [.invert()](#PointCollection+invert)\n\n<a name=\"new_PointCollection_new\"></a>\n\n### new PointCollection()\nCreate a point collection\n\n<a name=\"PointCollection+x\"></a>\n\n### pointCollection.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>PointCollection</code>](#PointCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"PointCollection+x\"></a>\n\n### pointCollection.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>PointCollection</code>](#PointCollection)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"PointCollection+y\"></a>\n\n### pointCollection.y(value)\nSet the y-axis value\n\n**Kind**: instance method of [<code>PointCollection</code>](#PointCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"PointCollection+y\"></a>\n\n### pointCollection.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>PointCollection</code>](#PointCollection)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n<a name=\"PointCollection+options\"></a>\n\n### pointCollection.options() \u21d2 <code>OptionsCollection</code>\nGet options\n\n**Kind**: instance method of [<code>PointCollection</code>](#PointCollection)  \n**Returns**: <code>OptionsCollection</code> - Options collection object  \n**Access**: public  \n<a name=\"PointCollection+invert\"></a>\n\n### pointCollection.invert()\nInvert x & y coordinate values\n\n**Kind**: instance method of [<code>PointCollection</code>](#PointCollection)  \n**Access**: public  \n",
    "cImage": "<a name=\"cImage\"></a>\n\n## cImage\n{Object}            cImage                  cImage object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| source | <code>string</code> | Source path of image file |\n| primary | <code>Object</code> | Primary set of coordinates |\n| secondary | <code>Object</code> | Secondary set of coordinates |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n| anchor | <code>Anchor</code> | Anchor properties |\n| options | <code>Options</code> | Options for this object |\n| position | <code>Position</code> | Position properties |\n\n\n* [cImage](#cImage)\n    * [new cImage()](#new_cImage_new)\n    * [.source(value)](#cImage+source)\n    * [.source()](#cImage+source) \u21d2 <code>Image</code>\n    * [.point(value)](#cImage+point)\n    * [.point()](#cImage+point) \u21d2 <code>Point</code>\n    * [.x(value)](#cImage+x)\n    * [.x()](#cImage+x) \u21d2 <code>number</code>\n    * [.y(value)](#cImage+y)\n    * [.y()](#cImage+y) \u21d2 <code>number</code>\n    * [.aspect(value)](#cImage+aspect)\n    * [.aspect()](#cImage+aspect) \u21d2 <code>Aspect</code>\n    * [.width()](#cImage+width) \u21d2 <code>number</code>\n    * [.height()](#cImage+height) \u21d2 <code>number</code>\n    * [.primary(value)](#cImage+primary)\n    * [.primary()](#cImage+primary) \u21d2 <code>Image</code>\n    * [.secondary(value)](#cImage+secondary)\n    * [.secondary()](#cImage+secondary) \u21d2 <code>Image</code>\n    * [.canvas(value)](#cImage+canvas)\n    * [.canvas()](#cImage+canvas) \u21d2 <code>string</code>\n    * [.anchor()](#cImage+anchor) \u21d2 <code>Anchor</code>\n    * [.options()](#cImage+options) \u21d2 <code>Options</code>\n    * [.position()](#cImage+position) \u21d2 <code>Position</code>\n    * [.area()](#cImage+area) \u21d2 <code>number</code>\n    * [.center()](#cImage+center) \u21d2 <code>Point</code>\n    * [.perimeter()](#cImage+perimeter) \u21d2 <code>number</code>\n    * [.move(degree, distance, [draw], [clear])](#cImage+move)\n    * [.rotate(degree, [anchor], [clear])](#cImage+rotate)\n    * [.showCoordinates([offset], [fontSize])](#cImage+showCoordinates)\n    * [.draw(canvas)](#cImage+draw)\n\n<a name=\"new_cImage_new\"></a>\n\n### new cImage()\nCreate a cImage object\n\n<a name=\"cImage+source\"></a>\n\n### cImage.source(value)\nSets source property value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Path of image source |\n\n<a name=\"cImage+source\"></a>\n\n### cImage.source() \u21d2 <code>Image</code>\nGets source property value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>Image</code> - Image source  \n**Read only**: true  \n<a name=\"cImage+point\"></a>\n\n### cImage.point(value)\nSet point\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"cImage+point\"></a>\n\n### cImage.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n<a name=\"cImage+x\"></a>\n\n### cImage.x(value)\nSet primary x-axis value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"cImage+x\"></a>\n\n### cImage.x() \u21d2 <code>number</code>\nGet primary x-axis value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"cImage+y\"></a>\n\n### cImage.y(value)\nSet primary y-axis value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"cImage+y\"></a>\n\n### cImage.y() \u21d2 <code>number</code>\nGet primary y-axis value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n<a name=\"cImage+aspect\"></a>\n\n### cImage.aspect(value)\nSet aspect properties\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Aspect</code> | Aspect properties |\n\n<a name=\"cImage+aspect\"></a>\n\n### cImage.aspect() \u21d2 <code>Aspect</code>\nGet aspect properties\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>Aspect</code> - Aspect properties  \n**Read only**: true  \n<a name=\"cImage+width\"></a>\n\n### cImage.width() \u21d2 <code>number</code>\nGet aspect with\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>number</code> - Width value  \n**Read only**: true  \n<a name=\"cImage+height\"></a>\n\n### cImage.height() \u21d2 <code>number</code>\nGet aspect height\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>number</code> - Height value  \n**Read only**: true  \n<a name=\"cImage+primary\"></a>\n\n### cImage.primary(value)\nSets primary property value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Path of image |\n\n<a name=\"cImage+primary\"></a>\n\n### cImage.primary() \u21d2 <code>Image</code>\nGets primary property value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>Image</code> - Image object  \n**Read only**: true  \n<a name=\"cImage+secondary\"></a>\n\n### cImage.secondary(value)\nSets secondary property value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Path of image |\n\n<a name=\"cImage+secondary\"></a>\n\n### cImage.secondary() \u21d2 <code>Image</code>\nGets secondary property value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>Image</code> - Image object  \n**Read only**: true  \n<a name=\"cImage+canvas\"></a>\n\n### cImage.canvas(value)\nSet canvas value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n**See**: [individual.canvas](individual.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"cImage+canvas\"></a>\n\n### cImage.canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [individual.canvas](individual.canvas)  \n<a name=\"cImage+anchor\"></a>\n\n### cImage.anchor() \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>Anchor</code> - Anchor properties  \n**Access**: public  \n<a name=\"cImage+options\"></a>\n\n### cImage.options() \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>Options</code> - Options properties  \n**Access**: public  \n<a name=\"cImage+position\"></a>\n\n### cImage.position() \u21d2 <code>Position</code>\nGet position properties\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>Position</code> - Position properties  \n**Access**: public  \n<a name=\"cImage+area\"></a>\n\n### cImage.area() \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>number</code> - Area of this object  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.area](PROPERTY_BLOCKS.individual.area)  \n<a name=\"cImage+center\"></a>\n\n### cImage.center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>Point</code> - Center point coordinates  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.center](PROPERTY_BLOCKS.individual.center)  \n<a name=\"cImage+perimeter\"></a>\n\n### cImage.perimeter() \u21d2 <code>number</code>\nGet perimeter of this object\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Returns**: <code>number</code> - Perimeter of rectangle  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.center](PROPERTY_BLOCKS.individual.center)  \n<a name=\"cImage+move\"></a>\n\n### cImage.move(degree, distance, [draw], [clear])\nMove this object\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.move](UTILITIES.individual.misc.move)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Direction to move; in degrees |\n| distance | <code>number</code> |  | Distance to move |\n| [draw] | <code>boolean</code> | <code>false</code> | Draw post movement |\n| [clear] | <code>boolean</code> | <code>false</code> | Clear canvas during each movement |\n\n<a name=\"cImage+rotate\"></a>\n\n### cImage.rotate(degree, [anchor], [clear])\nRotate this object\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.rotate](UTILITIES.individual.misc.rotate)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [anchor] | <code>string</code> | <code>&quot;&#x27;center&#x27;&quot;</code> | Anchoring point during rotation |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"cImage+showCoordinates\"></a>\n\n### cImage.showCoordinates([offset], [fontSize])\nShows coordinates of this object\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.showCoordinates](UTILITIES.individual.misc.showCoordinates)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of coordinates y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Coordinates font size |\n\n<a name=\"cImage+draw\"></a>\n\n### cImage.draw(canvas)\nDraw this object\n\n**Kind**: instance method of [<code>cImage</code>](#cImage)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "StrokeCollection": "<a name=\"StrokeCollection\"></a>\n\n## StrokeCollection\n{Object}   StrokeCollection                 Stroke properties of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| [type] | <code>string</code> | <code>&quot;&#x27;solid&#x27;&quot;</code> | Stroke type; solid | dashed |\n| [segments] | <code>Array.&lt;number&gt;</code> | <code>[5, 5]</code> | Dashed line segment distance(s) |\n| [alpha] | <code>number</code> | <code>1</code> | Alpha (transparency); number/decimal |\n| [width] | <code>number</code> | <code>2</code> | Thickness of stroke |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n\n\n* [StrokeCollection](#StrokeCollection)\n    * [new StrokeCollection()](#new_StrokeCollection_new)\n    * [.color(value)](#StrokeCollection+color)\n    * [.color()](#StrokeCollection+color) \u21d2 <code>string</code>\n    * [.type(value)](#StrokeCollection+type)\n    * [.type()](#StrokeCollection+type) \u21d2 <code>number</code>\n    * [.segments(value)](#StrokeCollection+segments)\n    * [.segments()](#StrokeCollection+segments) \u21d2 <code>Array</code>\n    * [.width(value)](#StrokeCollection+width)\n    * [.width()](#StrokeCollection+width) \u21d2 <code>number</code>\n    * [.master(value)](#StrokeCollection+master)\n    * [.master()](#StrokeCollection+master) \u21d2 <code>clObject</code>\n\n<a name=\"new_StrokeCollection_new\"></a>\n\n### new StrokeCollection()\nCreate a stroke collection\n\n<a name=\"StrokeCollection+color\"></a>\n\n### strokeCollection.color(value)\nSet color value\n\n**Kind**: instance method of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | RGB color value |\n\n<a name=\"StrokeCollection+color\"></a>\n\n### strokeCollection.color() \u21d2 <code>string</code>\nGet color value\n\n**Kind**: instance method of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Returns**: <code>string</code> - RGB color value  \n**Access**: public  \n<a name=\"StrokeCollection+type\"></a>\n\n### strokeCollection.type(value)\nSet type\n\n**Kind**: instance method of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Type: (0) Solid or (1) Dashed |\n\n<a name=\"StrokeCollection+type\"></a>\n\n### strokeCollection.type() \u21d2 <code>number</code>\nGet type\n\n**Kind**: instance method of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Returns**: <code>number</code> - Type: (0) Solid or (1) Dashed  \n**Read only**: true  \n<a name=\"StrokeCollection+segments\"></a>\n\n### strokeCollection.segments(value)\nSet segment value\n\n**Kind**: instance method of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array</code> | Dashed line segment distance(s) |\n\n<a name=\"StrokeCollection+segments\"></a>\n\n### strokeCollection.segments() \u21d2 <code>Array</code>\nGet segment value\n\n**Kind**: instance method of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Returns**: <code>Array</code> - Dashed line segment distance(s)  \n**Read only**: true  \n<a name=\"StrokeCollection+width\"></a>\n\n### strokeCollection.width(value)\nSet width value\n\n**Kind**: instance method of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Thickness of stroke |\n\n<a name=\"StrokeCollection+width\"></a>\n\n### strokeCollection.width() \u21d2 <code>number</code>\nGet width value\n\n**Kind**: instance method of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Returns**: <code>number</code> - Thickness of stroke  \n**Read only**: true  \n<a name=\"StrokeCollection+master\"></a>\n\n### strokeCollection.master(value)\nSet master object\n\n**Kind**: instance method of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.master](PROPERTY_BLOCKS.individual.master)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>clObject</code> | Canvas Lab object |\n\n<a name=\"StrokeCollection+master\"></a>\n\n### strokeCollection.master() \u21d2 <code>clObject</code>\nGet master object\n\n**Kind**: instance method of [<code>StrokeCollection</code>](#StrokeCollection)  \n**Returns**: <code>clObject</code> - Master Canvas Lab object  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.master](PROPERTY_BLOCKS.individual.master)  \n",
    "Conic": "<a name=\"Conic\"></a>\n\n## Conic\n{Object}       Conic                        Conic gradient object type and properties\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| angle | <code>number</code> | Angle in radians |\n| stops | <code>Array.&lt;Stop&gt;</code> | Array of color stops |\n\n\n* [Conic](#Conic)\n    * [new Conic()](#new_Conic_new)\n    * [.angle(value)](#Conic+angle)\n    * [.angle()](#Conic+angle) \u21d2 <code>Angle</code>\n    * [.point(value)](#Conic+point)\n    * [.point()](#Conic+point) \u21d2 <code>Point</code>\n    * [.stops(values)](#Conic+stops)\n    * [.stops()](#Conic+stops) \u21d2 <code>Array.&lt;Stop&gt;</code>\n\n<a name=\"new_Conic_new\"></a>\n\n### new Conic()\nCreate a Conic gradient object type\n\n<a name=\"Conic+angle\"></a>\n\n### conic.angle(value)\nSet angle property\n\n**Kind**: instance method of [<code>Conic</code>](#Conic)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Angle</code> | Angle object |\n\n<a name=\"Conic+angle\"></a>\n\n### conic.angle() \u21d2 <code>Angle</code>\nSet angle property\n\n**Kind**: instance method of [<code>Conic</code>](#Conic)  \n**Returns**: <code>Angle</code> - Angle object  \n**Read only**: true  \n<a name=\"Conic+point\"></a>\n\n### conic.point(value)\nSet point\n\n**Kind**: instance method of [<code>Conic</code>](#Conic)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Point |\n\n<a name=\"Conic+point\"></a>\n\n### conic.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>Conic</code>](#Conic)  \n**Returns**: <code>Point</code> - Point  \n**Read only**: true  \n<a name=\"Conic+stops\"></a>\n\n### conic.stops(values)\nSet color stops\n\n**Kind**: instance method of [<code>Conic</code>](#Conic)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| values | <code>Array.&lt;Stop&gt;</code> | Color stops |\n\n<a name=\"Conic+stops\"></a>\n\n### conic.stops() \u21d2 <code>Array.&lt;Stop&gt;</code>\nGet color stops\n\n**Kind**: instance method of [<code>Conic</code>](#Conic)  \n**Returns**: <code>Array.&lt;Stop&gt;</code> - Color stops  \n**Read only**: true  \n",
    "OptionsCollection": "<a name=\"OptionsCollection\"></a>\n\n## OptionsCollection\n{Object}  OptionsCollection                 Options for shapes, lines, and groups\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [shadow] | <code>boolean</code> | <code>false</code> | Display shadow |\n| [border] | <code>boolean</code> | <code>false</code> | Display border |\n| [axis] | <code>boolean</code> | <code>false</code> | Display axis |\n| [points] | <code>boolean</code> | <code>false</code> | Display points |\n| [coordinates] | <code>boolean</code> | <code>false</code> | Display coordinates |\n| [controlPoints] | <code>boolean</code> | <code>false</code> | Display control points |\n| [shadow] | <code>boolean</code> | <code>false</code> | Display shadow |\n\n\n* [OptionsCollection](#OptionsCollection)\n    * [new OptionsCollection(shadow, border, axis, points, coordinates)](#new_OptionsCollection_new)\n    * [.shadow(value)](#OptionsCollection+shadow)\n    * [.shadow()](#OptionsCollection+shadow) \u21d2 <code>boolean</code>\n    * [.border(value)](#OptionsCollection+border)\n    * [.border()](#OptionsCollection+border) \u21d2 <code>boolean</code>\n    * [.axis(value)](#OptionsCollection+axis)\n    * [.axis()](#OptionsCollection+axis) \u21d2 <code>boolean</code>\n    * [.points(value)](#OptionsCollection+points)\n    * [.points()](#OptionsCollection+points) \u21d2 <code>boolean</code>\n    * [.coordinates(value)](#OptionsCollection+coordinates)\n    * [.coordinates()](#OptionsCollection+coordinates) \u21d2 <code>boolean</code>\n    * [.controlPoints(value)](#OptionsCollection+controlPoints)\n    * [.controlPoints()](#OptionsCollection+controlPoints) \u21d2 <code>boolean</code>\n\n<a name=\"new_OptionsCollection_new\"></a>\n\n### new OptionsCollection(shadow, border, axis, points, coordinates)\nCreate an options collection\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| shadow | <code>boolean</code> | Show shadow |\n| border | <code>boolean</code> | Show border |\n| axis | <code>boolean</code> | Show axis |\n| points | <code>boolean</code> | Show points |\n| coordinates | <code>boolean</code> | Show coordinates |\n\n<a name=\"OptionsCollection+shadow\"></a>\n\n### optionsCollection.shadow(value)\nSet shadow value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Shadow; true | false |\n\n<a name=\"OptionsCollection+shadow\"></a>\n\n### optionsCollection.shadow() \u21d2 <code>boolean</code>\nGet shadow value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Returns**: <code>boolean</code> - Shadow; true | false  \n**Read only**: true  \n<a name=\"OptionsCollection+border\"></a>\n\n### optionsCollection.border(value)\nSet border value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Border; true | false |\n\n<a name=\"OptionsCollection+border\"></a>\n\n### optionsCollection.border() \u21d2 <code>boolean</code>\nGet border value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Returns**: <code>boolean</code> - Border; true | false  \n**Read only**: true  \n<a name=\"OptionsCollection+axis\"></a>\n\n### optionsCollection.axis(value)\nSet axis value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Axis; true | false |\n\n<a name=\"OptionsCollection+axis\"></a>\n\n### optionsCollection.axis() \u21d2 <code>boolean</code>\nGet axis value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Returns**: <code>boolean</code> - Axis; true | false  \n**Read only**: true  \n<a name=\"OptionsCollection+points\"></a>\n\n### optionsCollection.points(value)\nSet points value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Points; true | false |\n\n<a name=\"OptionsCollection+points\"></a>\n\n### optionsCollection.points() \u21d2 <code>boolean</code>\nGet points value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Returns**: <code>boolean</code> - Points; true | false  \n**Read only**: true  \n<a name=\"OptionsCollection+coordinates\"></a>\n\n### optionsCollection.coordinates(value)\nSet coordinates value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Coordinates; true | false |\n\n<a name=\"OptionsCollection+coordinates\"></a>\n\n### optionsCollection.coordinates() \u21d2 <code>boolean</code>\nGet coordinates value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Returns**: <code>boolean</code> - Coordinates; true | false  \n**Read only**: true  \n<a name=\"OptionsCollection+controlPoints\"></a>\n\n### optionsCollection.controlPoints(value)\nSet control points value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Control points; true | false |\n\n<a name=\"OptionsCollection+controlPoints\"></a>\n\n### optionsCollection.controlPoints() \u21d2 <code>boolean</code>\nGet control points value\n\n**Kind**: instance method of [<code>OptionsCollection</code>](#OptionsCollection)  \n**Returns**: <code>boolean</code> - Control points; true | false  \n**Read only**: true  \n",
    "Stroke": "<a name=\"Stroke\"></a>\n\n## Stroke\n{Object}   Stroke                           Stroke properties of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>Object</code> | <code>&lt;Rgb&gt;</code> | Color model & value |\n| [type] | <code>string</code> | <code>&quot;&#x27;solid&#x27;&quot;</code> | Stroke type; 'solid' || 'dashed' |\n| [segments] | <code>Array.&lt;number&gt;</code> | <code>[5, 5]</code> | Dashed line segment distance(s) |\n| [width] | <code>number</code> | <code>2</code> | Thickness of stroke |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n\n\n* [Stroke](#Stroke)\n    * [new Stroke(color, type, segments, alpha, width)](#new_Stroke_new)\n    * [.type(value)](#Stroke+type)\n    * [.type()](#Stroke+type) \u21d2 <code>string</code>\n    * [.segments(value)](#Stroke+segments)\n    * [.segments()](#Stroke+segments) \u21d2 <code>Array.&lt;number&gt;</code>\n    * [.color(value)](#Stroke+color)\n    * [.color()](#Stroke+color) \u21d2 <code>Rgb</code>\n    * [.width(value)](#Stroke+width)\n    * [.width()](#Stroke+width) \u21d2 <code>number</code>\n\n<a name=\"new_Stroke_new\"></a>\n\n### new Stroke(color, type, segments, alpha, width)\nCreate a stroke\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| color | <code>Object</code> | RGB color value |\n| type | <code>string</code> | Stroke type |\n| segments | <code>Array.&lt;number&gt;</code> | Dashed line segment distance(s) |\n| alpha | <code>number</code> | Alpha value; number/decimal |\n| width | <code>number</code> | Thickness of stroke |\n\n<a name=\"Stroke+type\"></a>\n\n### stroke.type(value)\nSet type\n\n**Kind**: instance method of [<code>Stroke</code>](#Stroke)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Stroke type: 'solid' || 'dashed' |\n\n<a name=\"Stroke+type\"></a>\n\n### stroke.type() \u21d2 <code>string</code>\nGet type\n\n**Kind**: instance method of [<code>Stroke</code>](#Stroke)  \n**Returns**: <code>string</code> - Stroke type: 'solid' || 'dashed'  \n**Read only**: true  \n<a name=\"Stroke+segments\"></a>\n\n### stroke.segments(value)\nSet segment value\n\n**Kind**: instance method of [<code>Stroke</code>](#Stroke)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array.&lt;number&gt;</code> | Dashed line segment distance(s) |\n\n<a name=\"Stroke+segments\"></a>\n\n### stroke.segments() \u21d2 <code>Array.&lt;number&gt;</code>\nGet segment value\n\n**Kind**: instance method of [<code>Stroke</code>](#Stroke)  \n**Returns**: <code>Array.&lt;number&gt;</code> - Dashed line segment distance(s)  \n**Read only**: true  \n<a name=\"Stroke+color\"></a>\n\n### stroke.color(value)\nSet color value\n\n**Kind**: instance method of [<code>Stroke</code>](#Stroke)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Rgb</code> | Color model |\n\n<a name=\"Stroke+color\"></a>\n\n### stroke.color() \u21d2 <code>Rgb</code>\nGet color value\n\n**Kind**: instance method of [<code>Stroke</code>](#Stroke)  \n**Returns**: <code>Rgb</code> - Color model  \n**Access**: public  \n<a name=\"Stroke+width\"></a>\n\n### stroke.width(value)\nSet width value\n\n**Kind**: instance method of [<code>Stroke</code>](#Stroke)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Thickness of stroke |\n\n<a name=\"Stroke+width\"></a>\n\n### stroke.width() \u21d2 <code>number</code>\nGet width value\n\n**Kind**: instance method of [<code>Stroke</code>](#Stroke)  \n**Returns**: <code>number</code> - Thickness of stroke  \n**Read only**: true  \n",
    "Font": "<a name=\"Font\"></a>\n\n## Font\n{Object} Font                               Font base class for text objects\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| type | <code>string</code> |  | Font type or face; typography name |\n| [size] | <code>number</code> | <code>24</code> | Size of font; in pixels |\n| [weight] | <code>string</code> | <code>&quot;&#x27;normal&#x27;&quot;</code> | Weight of font |\n| maxWidth | <code>number</code> |  | Font's maximum width |\n| offset | <code>Point</code> |  | Point offset coordinates |\n\n\n* [Font](#Font)\n    * [.type(value)](#Font+type)\n    * [.type()](#Font+type) \u21d2 <code>string</code>\n    * [.size(value)](#Font+size)\n    * [.size()](#Font+size) \u21d2 <code>number</code>\n    * [.weight(value)](#Font+weight)\n    * [.weight()](#Font+weight) \u21d2 <code>number</code>\n    * [.maxWidth(value)](#Font+maxWidth)\n    * [.maxWidth()](#Font+maxWidth) \u21d2 <code>number</code>\n    * [.offset()](#Font+offset) \u21d2 <code>Point</code>\n    * [.font(value)](#Font+font)\n    * [.font()](#Font+font) \u21d2 <code>string</code>\n\n<a name=\"Font+type\"></a>\n\n### font.type(value)\nSet font type\n\n**Kind**: instance method of [<code>Font</code>](#Font)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Type face; typography name |\n\n<a name=\"Font+type\"></a>\n\n### font.type() \u21d2 <code>string</code>\nGet type\n\n**Kind**: instance method of [<code>Font</code>](#Font)  \n**Returns**: <code>string</code> - Type face; typography name  \n**Read only**: true  \n<a name=\"Font+size\"></a>\n\n### font.size(value)\nSet font size\n\n**Kind**: instance method of [<code>Font</code>](#Font)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font size |\n\n<a name=\"Font+size\"></a>\n\n### font.size() \u21d2 <code>number</code>\nGet font size\n\n**Kind**: instance method of [<code>Font</code>](#Font)  \n**Returns**: <code>number</code> - Font size  \n**Read only**: true  \n<a name=\"Font+weight\"></a>\n\n### font.weight(value)\nSet font weight\n\n**Kind**: instance method of [<code>Font</code>](#Font)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Font weight |\n\n<a name=\"Font+weight\"></a>\n\n### font.weight() \u21d2 <code>number</code>\nGet font weight\n\n**Kind**: instance method of [<code>Font</code>](#Font)  \n**Returns**: <code>number</code> - Font weight  \n**Read only**: true  \n<a name=\"Font+maxWidth\"></a>\n\n### font.maxWidth(value)\nSet font's max width\n\n**Kind**: instance method of [<code>Font</code>](#Font)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Max width |\n\n<a name=\"Font+maxWidth\"></a>\n\n### font.maxWidth() \u21d2 <code>number</code>\nGet font's max width\n\n**Kind**: instance method of [<code>Font</code>](#Font)  \n**Returns**: <code>number</code> - Max width  \n**Read only**: true  \n<a name=\"Font+offset\"></a>\n\n### font.offset() \u21d2 <code>Point</code>\nGet font's offset\n\n**Kind**: instance method of [<code>Font</code>](#Font)  \n**Returns**: <code>Point</code> - Font's offset; ( x, y )  \n**Access**: public  \n<a name=\"Font+font\"></a>\n\n### font.font(value)\nSet font\n\n**Kind**: instance method of [<code>Font</code>](#Font)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | CSS style font property syntax |\n\n<a name=\"Font+font\"></a>\n\n### font.font() \u21d2 <code>string</code>\nGet font\n\n**Kind**: instance method of [<code>Font</code>](#Font)  \n**Returns**: <code>string</code> - CSS style font property syntax  \n**Read only**: true  \n",
    "Ellipses": "<a name=\"Ellipses\"></a>\n\n## Ellipses \u21d0 <code>Circles</code>\n{Array}             Ellipses                Collection of circle elements within an array\n\n**Kind**: global class  \n**Extends**: <code>Circles</code>  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| stroke | <code>StrokeCollection</code> | Stroke collection properties |\n| shadow | <code>ShadowCollection</code> | Shadow collection properties |\n| aspect | <code>Aspect</code> | Aspect properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n| template | <code>Template</code> | Canvas Lab Template object |\n| anchor | <code>Anchor</code> | Anchor properties |\n| options | <code>Options</code> | Options for this object |\n\n<a name=\"Ellipses+options\"></a>\n\n### ellipses.options() \u21d2 <code>Object</code>\nGet options\n\n**Kind**: instance method of [<code>Ellipses</code>](#Ellipses)  \n**Returns**: <code>Object</code> - Options object  \n**Access**: public  \n",
    "RoundedRectangles": "<a name=\"RoundedRectangles\"></a>\n\n## RoundedRectangles \u21d0 <code>Rectangles</code>\n{Array}             RoundedRectangles       Collection of Rounded Rectangle objects\n\n**Kind**: global class  \n**Extends**: <code>Rectangles</code>  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| point | <code>Point</code> | X & Y axis coordinates |\n| stroke | <code>StrokeCollection</code> | Stroke collection properties |\n| shadow | <code>ShadowCollection</code> | Shadow collection properties |\n| aspect | <code>Aspect</code> | Aspect properties |\n| canvas | <code>HTMLCanvasElement</code> | 2D canvas context |\n| template | <code>Template</code> | Canvas Lab Template object |\n| anchor | <code>Anchor</code> | Anchor properties |\n| options | <code>Options</code> | Options for this object |\n\n<a name=\"RoundedRectangles+options\"></a>\n\n### roundedRectangles.options() \u21d2 <code>Object</code>\nGet options\n\n**Kind**: instance method of [<code>RoundedRectangles</code>](#RoundedRectangles)  \n**Returns**: <code>Object</code> - Options object  \n**Access**: public  \n",
    "SacredCircles": "<a name=\"SacredCircles\"></a>\n\n## SacredCircles\n{Object}           SacredCircles            SacredCircles template\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| point | <code>Point</code> |  | X & Y axis coordinates |\n| [radius] | <code>number</code> | <code>25</code> | Radius of circle |\n| iterations | <code>number</code> |  | Amount of iterations |\n| strokes | <code>Rgb</code> \\| <code>Stroke</code> \\| <code>Queue</code> |  | Stroke colors |\n| fills | <code>Rgb</code> \\| <code>Fill</code> \\| <code>Queue</code> |  | Fill colors |\n| degrees | <code>Queue</code> |  | Degrees for generation |\n| master | <code>Object</code> |  | Master object |\n\n\n* [SacredCircles](#SacredCircles)\n    * [new SacredCircles()](#new_SacredCircles_new)\n    * [.point(value)](#SacredCircles+point)\n    * [.point()](#SacredCircles+point) \u21d2 <code>Point</code>\n    * [.radius(value)](#SacredCircles+radius)\n    * [.radius()](#SacredCircles+radius) \u21d2 <code>number</code>\n    * [.iterations(value)](#SacredCircles+iterations)\n    * [.iterations()](#SacredCircles+iterations) \u21d2 <code>number</code>\n    * [.degrees(value)](#SacredCircles+degrees)\n    * [.degrees()](#SacredCircles+degrees) \u21d2 <code>Queue</code>\n    * [.strokes(value)](#SacredCircles+strokes)\n    * [.strokes()](#SacredCircles+strokes) \u21d2 <code>Queue</code>\n    * [.fills(value)](#SacredCircles+fills)\n    * [.fills()](#SacredCircles+fills) \u21d2 <code>Queue</code>\n    * [.transitions(value)](#SacredCircles+transitions)\n    * [.transitions()](#SacredCircles+transitions) \u21d2 <code>Transitions</code>\n    * [.master(value)](#SacredCircles+master)\n    * [.master()](#SacredCircles+master) \u21d2 <code>clObject</code>\n    * [.totalObjects()](#SacredCircles+totalObjects) \u21d2 <code>number</code>\n    * [.init()](#SacredCircles+init)\n\n<a name=\"new_SacredCircles_new\"></a>\n\n### new SacredCircles()\nCreate a SacredCircles template\n\n<a name=\"SacredCircles+point\"></a>\n\n### sacredCircles.point(value)\nSet point\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"SacredCircles+point\"></a>\n\n### sacredCircles.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n<a name=\"SacredCircles+radius\"></a>\n\n### sacredCircles.radius(value)\nSet radius\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.radius](PROPERTY_BLOCKS.individual.radius)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Radius of circle |\n\n<a name=\"SacredCircles+radius\"></a>\n\n### sacredCircles.radius() \u21d2 <code>number</code>\nGet radius\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Returns**: <code>number</code> - Radius of circle  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.radius](PROPERTY_BLOCKS.individual.radius)  \n<a name=\"SacredCircles+iterations\"></a>\n\n### sacredCircles.iterations(value)\nSet iterations value\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Number of iterations |\n\n<a name=\"SacredCircles+iterations\"></a>\n\n### sacredCircles.iterations() \u21d2 <code>number</code>\nGet iterations value\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Returns**: <code>number</code> - Number of iterations  \n**Read only**: true  \n<a name=\"SacredCircles+degrees\"></a>\n\n### sacredCircles.degrees(value)\nSet degrees value\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array</code> | Array of degrees |\n\n<a name=\"SacredCircles+degrees\"></a>\n\n### sacredCircles.degrees() \u21d2 <code>Queue</code>\nGet degrees value\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Returns**: <code>Queue</code> - Queue of degrees  \n**Read only**: true  \n<a name=\"SacredCircles+strokes\"></a>\n\n### sacredCircles.strokes(value)\nSet strokes value\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array</code> | Array of strokes |\n\n<a name=\"SacredCircles+strokes\"></a>\n\n### sacredCircles.strokes() \u21d2 <code>Queue</code>\nGet strokes value\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Returns**: <code>Queue</code> - Queue of strokes  \n**Read only**: true  \n<a name=\"SacredCircles+fills\"></a>\n\n### sacredCircles.fills(value)\nSet fills value\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array</code> | Array of fills |\n\n<a name=\"SacredCircles+fills\"></a>\n\n### sacredCircles.fills() \u21d2 <code>Queue</code>\nGet fills value\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Returns**: <code>Queue</code> - Queue of fills  \n**Read only**: true  \n<a name=\"SacredCircles+transitions\"></a>\n\n### sacredCircles.transitions(value)\nSet transitions\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.transitions](PROPERTY_BLOCKS.individual.transitions)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Transitions</code> | Transitions object |\n\n<a name=\"SacredCircles+transitions\"></a>\n\n### sacredCircles.transitions() \u21d2 <code>Transitions</code>\nGet transitions\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Returns**: <code>Transitions</code> - Transitions object  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.transitions](PROPERTY_BLOCKS.individual.transitions)  \n<a name=\"SacredCircles+master\"></a>\n\n### sacredCircles.master(value)\nSet master object\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.master](PROPERTY_BLOCKS.individual.master)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>clObject</code> | Canvas Lab object |\n\n<a name=\"SacredCircles+master\"></a>\n\n### sacredCircles.master() \u21d2 <code>clObject</code>\nGet master object\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Returns**: <code>clObject</code> - Master Canvas Lab object  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.master](PROPERTY_BLOCKS.individual.master)  \n<a name=\"SacredCircles+totalObjects\"></a>\n\n### sacredCircles.totalObjects() \u21d2 <code>number</code>\nGet number of total objects\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Returns**: <code>number</code> - Number of total objects  \n**Access**: public  \n<a name=\"SacredCircles+init\"></a>\n\n### sacredCircles.init()\nSets this template\n\n**Kind**: instance method of [<code>SacredCircles</code>](#SacredCircles)  \n**Access**: public  \n",
    "Linear": "<a name=\"Linear\"></a>\n\n## Linear\n{Object}       Linear                       Linear gradient object type and properties\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| start | <code>Point</code> | Start X & Y axis coordinates |\n| end | <code>Point</code> | End X & Y axis coordinates |\n| stops | <code>Array.&lt;Stop&gt;</code> | Array of color stops |\n\n\n* [Linear](#Linear)\n    * [new Linear()](#new_Linear_new)\n    * [.start(value)](#Linear+start)\n    * [.start()](#Linear+start) \u21d2 <code>Point</code>\n    * [.end(value)](#Linear+end)\n    * [.end()](#Linear+end) \u21d2 <code>Point</code>\n    * [.stops(values)](#Linear+stops)\n    * [.stops()](#Linear+stops) \u21d2 <code>Array.&lt;Stop&gt;</code>\n\n<a name=\"new_Linear_new\"></a>\n\n### new Linear()\nCreate a Linear gradient object type\n\n<a name=\"Linear+start\"></a>\n\n### linear.start(value)\nSet starting point\n\n**Kind**: instance method of [<code>Linear</code>](#Linear)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Starting point |\n\n<a name=\"Linear+start\"></a>\n\n### linear.start() \u21d2 <code>Point</code>\nSet starting point\n\n**Kind**: instance method of [<code>Linear</code>](#Linear)  \n**Returns**: <code>Point</code> - Starting point  \n**Read only**: true  \n<a name=\"Linear+end\"></a>\n\n### linear.end(value)\nSet ending point\n\n**Kind**: instance method of [<code>Linear</code>](#Linear)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Ending point |\n\n<a name=\"Linear+end\"></a>\n\n### linear.end() \u21d2 <code>Point</code>\nSet ending point\n\n**Kind**: instance method of [<code>Linear</code>](#Linear)  \n**Returns**: <code>Point</code> - Ending point  \n**Read only**: true  \n<a name=\"Linear+stops\"></a>\n\n### linear.stops(values)\nSet color stops\n\n**Kind**: instance method of [<code>Linear</code>](#Linear)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| values | <code>Array.&lt;Stop&gt;</code> | Color stops |\n\n<a name=\"Linear+stops\"></a>\n\n### linear.stops() \u21d2 <code>Array.&lt;Stop&gt;</code>\nGet color stops\n\n**Kind**: instance method of [<code>Linear</code>](#Linear)  \n**Returns**: <code>Array.&lt;Stop&gt;</code> - Color stops  \n**Read only**: true  \n",
    "Angle": "<a name=\"Angle\"></a>\n\n## Angle\n{Object}  Angle                             Angle properties of associated object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [start] | <code>number</code> | <code>0</code> | The start of the angle, in radians; measured from the positive x-axis |\n| [end] | <code>number</code> | <code>360</code> | The end of the angle, in radians; measured from the positive x-axis |\n| [clockwise] | <code>boolean</code> | <code>true</code> | Path arc clockwise |\n\n\n* [Angle](#Angle)\n    * [new Angle(start, end, clockwise)](#new_Angle_new)\n    * [.start(value)](#Angle+start)\n    * [.start()](#Angle+start) \u21d2 <code>number</code>\n    * [.end(value)](#Angle+end)\n    * [.end()](#Angle+end) \u21d2 <code>number</code>\n    * [.clockwise(value)](#Angle+clockwise)\n    * [.clockwise()](#Angle+clockwise) \u21d2 <code>boolean</code>\n    * [.startInRadians()](#Angle+startInRadians) \u21d2 <code>number</code>\n    * [.endInRadians()](#Angle+endInRadians) \u21d2 <code>number</code>\n\n<a name=\"new_Angle_new\"></a>\n\n### new Angle(start, end, clockwise)\nCreate an angle\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| start | <code>number</code> | The angle at which the arc starts in degrees, measured from the positive x-axis |\n| end | <code>number</code> | The angle at which the arc ends in degrees, measured from the positive x-axis |\n| clockwise | <code>boolean</code> | Draws the arc clockwise between the start and end angles |\n\n<a name=\"Angle+start\"></a>\n\n### angle.start(value)\nSet start angle\n\n**Kind**: instance method of [<code>Angle</code>](#Angle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Start angle; in degrees |\n\n<a name=\"Angle+start\"></a>\n\n### angle.start() \u21d2 <code>number</code>\nGet start angle\n\n**Kind**: instance method of [<code>Angle</code>](#Angle)  \n**Returns**: <code>number</code> - Start value; in degrees  \n**Read only**: true  \n<a name=\"Angle+end\"></a>\n\n### angle.end(value)\nSet end angle\n\n**Kind**: instance method of [<code>Angle</code>](#Angle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | End angle; in degrees |\n\n<a name=\"Angle+end\"></a>\n\n### angle.end() \u21d2 <code>number</code>\nGet end angle\n\n**Kind**: instance method of [<code>Angle</code>](#Angle)  \n**Returns**: <code>number</code> - End angle; in degrees  \n**Read only**: true  \n<a name=\"Angle+clockwise\"></a>\n\n### angle.clockwise(value)\nSet clockwise\n\n**Kind**: instance method of [<code>Angle</code>](#Angle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>boolean</code> | Clockwise; true | false |\n\n<a name=\"Angle+clockwise\"></a>\n\n### angle.clockwise() \u21d2 <code>boolean</code>\nGet clockwise\n\n**Kind**: instance method of [<code>Angle</code>](#Angle)  \n**Returns**: <code>boolean</code> - Clockwise; true | false  \n**Read only**: true  \n<a name=\"Angle+startInRadians\"></a>\n\n### angle.startInRadians() \u21d2 <code>number</code>\nGet start angle in radians\n\n**Kind**: instance method of [<code>Angle</code>](#Angle)  \n**Returns**: <code>number</code> - Start value; to radians  \n**Read only**: true  \n<a name=\"Angle+endInRadians\"></a>\n\n### angle.endInRadians() \u21d2 <code>number</code>\nGet end angle in radians\n\n**Kind**: instance method of [<code>Angle</code>](#Angle)  \n**Returns**: <code>number</code> - End value; in radians  \n**Read only**: true  \n",
    "Circle": "<a name=\"Circle\"></a>\n\n## Circle\n{Object}            Circle                  Circle object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| point | <code>Point</code> |  | X & Y axis coordinates |\n| [radius] | <code>number</code> \\| <code>Point</code> | <code>25</code> | Radius of circle |\n| angle | <code>Angle</code> |  | Angle properties |\n| stroke | <code>Stroke</code> |  | Stroke properties |\n| fill | <code>Fill</code> |  | Fill properties |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n| canvas | <code>HTMLCanvasElement</code> |  | 2D canvas context |\n| anchor | <code>Anchor</code> |  | Anchor properties |\n| options | <code>Options</code> |  | Options for this object |\n| position | <code>Position</code> |  | Position properties |\n\n\n* [Circle](#Circle)\n    * [new Circle()](#new_Circle_new)\n    * [.point(value)](#Circle+point)\n    * [.point()](#Circle+point) \u21d2 <code>Point</code>\n    * [.x(value)](#Circle+x)\n    * [.x()](#Circle+x) \u21d2 <code>number</code>\n    * [.y(value)](#Circle+y)\n    * [.y()](#Circle+y) \u21d2 <code>number</code>\n    * [.radius(value)](#Circle+radius)\n    * [.radius()](#Circle+radius) \u21d2 <code>number</code> \\| <code>Point</code>\n    * [.angle()](#Circle+angle) \u21d2 <code>Angle</code>\n    * [.stroke(value)](#Circle+stroke)\n    * [.stroke()](#Circle+stroke) \u21d2 <code>Stroke</code>\n    * [.fill(value)](#Circle+fill)\n    * [.fill()](#Circle+fill) \u21d2 <code>Fill</code>\n    * [.shadow()](#Circle+shadow) \u21d2 <code>Shadow</code>\n    * [.canvas(value)](#Circle+canvas)\n    * [.canvas()](#Circle+canvas) \u21d2 <code>string</code>\n    * [.anchor()](#Circle+anchor) \u21d2 <code>Anchor</code>\n    * [.options()](#Circle+options) \u21d2 <code>Options</code>\n    * [.position()](#Circle+position) \u21d2 <code>Position</code>\n    * [.isThere(circle)](#Circle+isThere) \u21d2 <code>boolean</code>\n    * [.area()](#Circle+area) \u21d2 <code>number</code>\n    * [.diameter()](#Circle+diameter) \u21d2 <code>number</code>\n    * [.center()](#Circle+center) \u21d2 <code>Point</code>\n    * [.circumference()](#Circle+circumference) \u21d2 <code>number</code>\n    * [.move(degree, distance)](#Circle+move)\n    * [.rotate(degree, [anchor], [clear])](#Circle+rotate)\n    * [.showCoordinates([offset], [fontSize])](#Circle+showCoordinates)\n    * [.draw(canvas)](#Circle+draw)\n\n<a name=\"new_Circle_new\"></a>\n\n### new Circle()\nCreate a Circle object\n\n<a name=\"Circle+point\"></a>\n\n### circle.point(value)\nSet point\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Circle+point\"></a>\n\n### circle.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.point](PROPERTY_BLOCKS.individual.point)  \n<a name=\"Circle+x\"></a>\n\n### circle.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Circle+x\"></a>\n\n### circle.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointX](PROPERTY_BLOCKS.individual.pointX)  \n<a name=\"Circle+y\"></a>\n\n### circle.y(value)\nSet y-axis value\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Circle+y\"></a>\n\n### circle.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.pointY](PROPERTY_BLOCKS.individual.pointY)  \n<a name=\"Circle+radius\"></a>\n\n### circle.radius(value)\nSet radius value\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> \\| <code>Point</code> | Radius of circle |\n\n<a name=\"Circle+radius\"></a>\n\n### circle.radius() \u21d2 <code>number</code> \\| <code>Point</code>\nGet radius value\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> \\| <code>Point</code> - Radius of circle  \n**Read only**: true  \n<a name=\"Circle+angle\"></a>\n\n### circle.angle() \u21d2 <code>Angle</code>\nGet angle properties\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Angle</code> - Angle properties  \n**Access**: public  \n<a name=\"Circle+stroke\"></a>\n\n### circle.stroke(value)\nSet stroke properties\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Stroke</code> | Stroke properties |\n\n<a name=\"Circle+stroke\"></a>\n\n### circle.stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"Circle+fill\"></a>\n\n### circle.fill(value)\nSet fill properties\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Fill</code> | Fill properties |\n\n<a name=\"Circle+fill\"></a>\n\n### circle.fill() \u21d2 <code>Fill</code>\nGet fill properties\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Fill</code> - Fill properties  \n**Access**: public  \n<a name=\"Circle+shadow\"></a>\n\n### circle.shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"Circle+canvas\"></a>\n\n### circle.canvas(value)\nSet canvas value\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Access**: public  \n**See**: [individual.canvas](individual.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Circle+canvas\"></a>\n\n### circle.canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [individual.canvas](individual.canvas)  \n<a name=\"Circle+anchor\"></a>\n\n### circle.anchor() \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Anchor</code> - Anchor properties  \n**Access**: public  \n<a name=\"Circle+options\"></a>\n\n### circle.options() \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Options</code> - Options properties  \n**Access**: public  \n<a name=\"Circle+position\"></a>\n\n### circle.position() \u21d2 <code>Position</code>\nGet position properties\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Position</code> - Position properties  \n**Access**: public  \n<a name=\"Circle+isThere\"></a>\n\n### circle.isThere(circle) \u21d2 <code>boolean</code>\nCheck whether the passed object is already present\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>boolean</code> - True || False  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| circle | [<code>Circle</code>](#Circle) | Object to validate |\n\n<a name=\"Circle+area\"></a>\n\n### circle.area() \u21d2 <code>number</code>\nGet area of this object\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> - Area of this object  \n**Read only**: true  \n<a name=\"Circle+diameter\"></a>\n\n### circle.diameter() \u21d2 <code>number</code>\nGet diameter of circle\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> - Diameter of circle  \n**Read only**: true  \n<a name=\"Circle+center\"></a>\n\n### circle.center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>Point</code> - Point coordinates  \n**Read only**: true  \n<a name=\"Circle+circumference\"></a>\n\n### circle.circumference() \u21d2 <code>number</code>\nGet circumference of circle\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Returns**: <code>number</code> - Circumference of circle  \n**Read only**: true  \n<a name=\"Circle+move\"></a>\n\n### circle.move(degree, distance)\nMove this object\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.move](UTILITIES.individual.misc.move)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| degree | <code>number</code> | Direction to move; in degrees |\n| distance | <code>number</code> | Distance to move |\n\n<a name=\"Circle+rotate\"></a>\n\n### circle.rotate(degree, [anchor], [clear])\nRotate this object\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.rotate](UTILITIES.individual.misc.rotate)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [anchor] | <code>string</code> | <code>&quot;&#x27;center&#x27;&quot;</code> | Anchoring point during rotation |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"Circle+showCoordinates\"></a>\n\n### circle.showCoordinates([offset], [fontSize])\nShows coordinates of this object\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.showCoordinates](UTILITIES.individual.misc.showCoordinates)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of coordinates y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Coordinates font size |\n\n<a name=\"Circle+draw\"></a>\n\n### circle.draw(canvas)\nDraw this object\n\n**Kind**: instance method of [<code>Circle</code>](#Circle)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n",
    "Stop": "<a name=\"Stop\"></a>\n\n## Stop\n{Object} Stop                               Color stop properties for associated array(s)\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| [color] | <code>string</code> | <code>&quot;&lt;Rgb&gt;&quot;</code> | Color model & value |\n| offset | <code>number</code> |  | Representation of the color stop position; 0 = start, & 1 = end |\n\n\n* [Stop](#Stop)\n    * [new Stop()](#new_Stop_new)\n    * [.color(value)](#Stop+color)\n    * [.color()](#Stop+color) \u21d2 <code>Object</code>\n    * [.offset(value)](#Stop+offset)\n    * [.offset()](#Stop+offset) \u21d2 <code>number</code>\n\n<a name=\"new_Stop_new\"></a>\n\n### new Stop()\nCreate a color stop\n\n<a name=\"Stop+color\"></a>\n\n### stop.color(value)\nSet color value\n\n**Kind**: instance method of [<code>Stop</code>](#Stop)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Object</code> | Color model; Rgb, Hsl, Hwb |\n\n<a name=\"Stop+color\"></a>\n\n### stop.color() \u21d2 <code>Object</code>\nGet color value\n\n**Kind**: instance method of [<code>Stop</code>](#Stop)  \n**Returns**: <code>Object</code> - Color model; Rgb, Hsl, Hwb  \n**Access**: public  \n<a name=\"Stop+offset\"></a>\n\n### stop.offset(value)\nSet offset value\n\n**Kind**: instance method of [<code>Stop</code>](#Stop)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Offset value |\n\n<a name=\"Stop+offset\"></a>\n\n### stop.offset() \u21d2 <code>number</code>\nGet offset value\n\n**Kind**: instance method of [<code>Stop</code>](#Stop)  \n**Returns**: <code>number</code> - Offset value  \n**Read only**: true  \n",
    "Radial": "<a name=\"Radial\"></a>\n\n## Radial\n{Object}       Radial                       Radial gradient object type and properties\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| start | <code>Point</code> | Start X & Y axis coordinates |\n| startRadius | <code>Number</code> | Starting radius of linear gradient |\n| end | <code>Point</code> | End X & Y axis coordinates |\n| endRadius | <code>Number</code> | Ending radius of linear gradient gradient |\n| stops | <code>Array.&lt;Stop&gt;</code> | Array of color stops |\n\n\n* [Radial](#Radial)\n    * [new Radial()](#new_Radial_new)\n    * [.start(value)](#Radial+start)\n    * [.start()](#Radial+start) \u21d2 <code>Point</code>\n    * [.startRadius(value)](#Radial+startRadius)\n    * [.startRadius()](#Radial+startRadius) \u21d2 <code>Number</code>\n    * [.end(value)](#Radial+end)\n    * [.end()](#Radial+end) \u21d2 <code>Point</code>\n    * [.endRadius(value)](#Radial+endRadius)\n    * [.endRadius()](#Radial+endRadius) \u21d2 <code>Number</code>\n    * [.stops(value)](#Radial+stops)\n    * [.stops()](#Radial+stops) \u21d2 <code>Array.&lt;Stop&gt;</code>\n\n<a name=\"new_Radial_new\"></a>\n\n### new Radial()\nCreate a Radial gradient object type and properties\n\n<a name=\"Radial+start\"></a>\n\n### radial.start(value)\nSet starting point\n\n**Kind**: instance method of [<code>Radial</code>](#Radial)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Starting point |\n\n<a name=\"Radial+start\"></a>\n\n### radial.start() \u21d2 <code>Point</code>\nSet starting point\n\n**Kind**: instance method of [<code>Radial</code>](#Radial)  \n**Returns**: <code>Point</code> - Starting point  \n**Read only**: true  \n<a name=\"Radial+startRadius\"></a>\n\n### radial.startRadius(value)\nSet starting radius\n\n**Kind**: instance method of [<code>Radial</code>](#Radial)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Number</code> | Starting radius |\n\n<a name=\"Radial+startRadius\"></a>\n\n### radial.startRadius() \u21d2 <code>Number</code>\nSet starting radius\n\n**Kind**: instance method of [<code>Radial</code>](#Radial)  \n**Returns**: <code>Number</code> - Starting radius  \n**Read only**: true  \n<a name=\"Radial+end\"></a>\n\n### radial.end(value)\nSet ending point\n\n**Kind**: instance method of [<code>Radial</code>](#Radial)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Ending point |\n\n<a name=\"Radial+end\"></a>\n\n### radial.end() \u21d2 <code>Point</code>\nSet ending point\n\n**Kind**: instance method of [<code>Radial</code>](#Radial)  \n**Returns**: <code>Point</code> - Ending point  \n**Read only**: true  \n<a name=\"Radial+endRadius\"></a>\n\n### radial.endRadius(value)\nSet ending radius\n\n**Kind**: instance method of [<code>Radial</code>](#Radial)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Number</code> | Ending radius |\n\n<a name=\"Radial+endRadius\"></a>\n\n### radial.endRadius() \u21d2 <code>Number</code>\nSet ending radius\n\n**Kind**: instance method of [<code>Radial</code>](#Radial)  \n**Returns**: <code>Number</code> - Ending radius  \n**Read only**: true  \n<a name=\"Radial+stops\"></a>\n\n### radial.stops(value)\nSet color stops\n\n**Kind**: instance method of [<code>Radial</code>](#Radial)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Array.&lt;Stop&gt;</code> | Color stops |\n\n<a name=\"Radial+stops\"></a>\n\n### radial.stops() \u21d2 <code>Array.&lt;Stop&gt;</code>\nGet color stops\n\n**Kind**: instance method of [<code>Radial</code>](#Radial)  \n**Returns**: <code>Array.&lt;Stop&gt;</code> - Color stops  \n**Read only**: true  \n",
    "Line": "<a name=\"Line\"></a>\n\n## Line\n{Object}            Line                    Line object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>Point</code> |  | Start X & Y axis coordinates |\n| end | <code>Point</code> |  | End X & Y axis coordinates |\n| stroke | <code>Stroke</code> |  | Stroke properties |\n| shadow | <code>Shadow</code> |  | Shadow properties |\n| [lineCap] | <code>string</code> | <code>&quot;&#x27;round&#x27;&quot;</code> | Line cap's end points shape |\n| canvas | <code>HTMLCanvasElement</code> |  | 2D canvas context |\n| controlPoints | <code>ControlPoints</code> |  | Control point properties |\n| options | <code>Options</code> |  | Options for this object |\n| position | <code>Position</code> |  | Position properties |\n\n\n* [Line](#Line)\n    * [new Line()](#new_Line_new)\n    * [.start(value)](#Line+start)\n    * [.start()](#Line+start) \u21d2 <code>Point</code>\n    * [.end(value)](#Line+end)\n    * [.end()](#Line+end) \u21d2 <code>Point</code>\n    * [.stroke(value)](#Line+stroke)\n    * [.stroke()](#Line+stroke) \u21d2 <code>Stroke</code>\n    * [.shadow()](#Line+shadow) \u21d2 <code>Shadow</code>\n    * [.lineCap(value)](#Line+lineCap)\n    * [.lineCap()](#Line+lineCap) \u21d2 <code>string</code>\n    * [.canvas(value)](#Line+canvas)\n    * [.canvas()](#Line+canvas) \u21d2 <code>string</code>\n    * [.anchor()](#Line+anchor) \u21d2 <code>Anchor</code>\n    * [.options()](#Line+options) \u21d2 <code>Options</code>\n    * [.position()](#Line+position) \u21d2 <code>Position</code>\n    * [.controlPoints()](#Line+controlPoints) \u21d2 <code>ControlPoints</code>\n    * [.point(value)](#Line+point)\n    * [.point()](#Line+point) \u21d2 <code>Point</code>\n    * [.x(value)](#Line+x)\n    * [.x()](#Line+x) \u21d2 <code>number</code>\n    * [.y(value)](#Line+y)\n    * [.y()](#Line+y) \u21d2 <code>number</code>\n    * [.isThere(line)](#Line+isThere)\n    * [.center()](#Line+center) \u21d2 <code>Point</code>\n    * [.curve(p0, p1, p2, p3)](#Line+curve)\n    * [.drawPoints()](#Line+drawPoints)\n    * [.move(degree, distance)](#Line+move)\n    * [.rotate(degree, [anchor], [clear])](#Line+rotate)\n    * [.showControlPoints([offset], [fontSize])](#Line+showControlPoints)\n    * [.showCoordinates([offset], [fontSize])](#Line+showCoordinates)\n    * [.draw(canvas)](#Line+draw)\n\n<a name=\"new_Line_new\"></a>\n\n### new Line()\nCreate a Line object\n\n<a name=\"Line+start\"></a>\n\n### line.start(value)\nSet starting point\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Starting point |\n\n<a name=\"Line+start\"></a>\n\n### line.start() \u21d2 <code>Point</code>\nSet starting point\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>Point</code> - Starting point  \n**Access**: public  \n<a name=\"Line+end\"></a>\n\n### line.end(value)\nSet ending point\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | Ending point |\n\n<a name=\"Line+end\"></a>\n\n### line.end() \u21d2 <code>Point</code>\nSet ending point\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>Point</code> - Ending point  \n**Access**: public  \n<a name=\"Line+stroke\"></a>\n\n### line.stroke(value)\nSet stroke properties\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Stroke</code> | Stroke properties |\n\n<a name=\"Line+stroke\"></a>\n\n### line.stroke() \u21d2 <code>Stroke</code>\nGet stroke properties\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>Stroke</code> - Stroke properties  \n**Access**: public  \n<a name=\"Line+shadow\"></a>\n\n### line.shadow() \u21d2 <code>Shadow</code>\nGet shadow properties\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>Shadow</code> - Shadow properties  \n**Access**: public  \n<a name=\"Line+lineCap\"></a>\n\n### line.lineCap(value)\nSet line cap\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Line cap |\n\n<a name=\"Line+lineCap\"></a>\n\n### line.lineCap() \u21d2 <code>string</code>\nGet line cap\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>string</code> - Line cap  \n**Read only**: true  \n<a name=\"Line+canvas\"></a>\n\n### line.canvas(value)\nSet canvas value\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n**See**: [PROPERTY_BLOCKS.individual.canvas](PROPERTY_BLOCKS.individual.canvas)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>string</code> | Canvas id |\n\n<a name=\"Line+canvas\"></a>\n\n### line.canvas() \u21d2 <code>string</code>\nGet canvas value\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>string</code> - Canvas id  \n**Read only**: true  \n**See**: [PROPERTY_BLOCKS.individual.canvas](PROPERTY_BLOCKS.individual.canvas)  \n<a name=\"Line+anchor\"></a>\n\n### line.anchor() \u21d2 <code>Anchor</code>\nGet anchor\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>Anchor</code> - Anchor properties  \n**Access**: public  \n<a name=\"Line+options\"></a>\n\n### line.options() \u21d2 <code>Options</code>\nGet options properties\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>Options</code> - Options properties  \n**Access**: public  \n<a name=\"Line+position\"></a>\n\n### line.position() \u21d2 <code>Position</code>\nGet position properties\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>Position</code> - Position properties  \n**Access**: public  \n<a name=\"Line+controlPoints\"></a>\n\n### line.controlPoints() \u21d2 <code>ControlPoints</code>\nGet control point properties\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>ControlPoints</code> - Control points properties  \n**Access**: public  \n<a name=\"Line+point\"></a>\n\n### line.point(value)\nSet point\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Point</code> | X & Y coordinates |\n\n<a name=\"Line+point\"></a>\n\n### line.point() \u21d2 <code>Point</code>\nGet point\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>Point</code> - X & Y coordinates  \n**Access**: public  \n<a name=\"Line+x\"></a>\n\n### line.x(value)\nSet x-axis value\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | X coordinate value |\n\n<a name=\"Line+x\"></a>\n\n### line.x() \u21d2 <code>number</code>\nGet x-axis value\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>number</code> - X coordinate value  \n**Read only**: true  \n<a name=\"Line+y\"></a>\n\n### line.y(value)\nSet y-axis value\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>number</code> | Y coordinate value |\n\n<a name=\"Line+y\"></a>\n\n### line.y() \u21d2 <code>number</code>\nGet y-axis value\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>number</code> - Y coordinate value  \n**Read only**: true  \n<a name=\"Line+isThere\"></a>\n\n### line.isThere(line)\nCheck whether the passed object is already present\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| line | [<code>Line</code>](#Line) | Object to validate |\n\n<a name=\"Line+center\"></a>\n\n### line.center() \u21d2 <code>Point</code>\nGet center of this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Returns**: <code>Point</code> - Center point coordinates  \n**Read only**: true  \n<a name=\"Line+curve\"></a>\n\n### line.curve(p0, p1, p2, p3)\nSet control points for bezier curve\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| p0 | <code>number</code> | Control point 0 |\n| p1 | <code>number</code> | Control point 1 |\n| p2 | <code>number</code> | Control point 2 |\n| p3 | <code>number</code> | Control point 3 |\n\n<a name=\"Line+drawPoints\"></a>\n\n### line.drawPoints()\nDraws start & end points\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n<a name=\"Line+move\"></a>\n\n### line.move(degree, distance)\nMove this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| degree | <code>number</code> | Direction to move; in degrees |\n| distance | <code>number</code> | Distance to move |\n\n<a name=\"Line+rotate\"></a>\n\n### line.rotate(degree, [anchor], [clear])\nRotate this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n**See**: [UTILITIES.individual.misc.rotate](UTILITIES.individual.misc.rotate)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| degree | <code>number</code> |  | Distance to rotate; in degrees |\n| [anchor] | <code>string</code> | <code>&quot;&#x27;center&#x27;&quot;</code> | Anchoring point during rotation |\n| [clear] | <code>number</code> | <code>true</code> | Clear canvas during each rotation |\n\n<a name=\"Line+showControlPoints\"></a>\n\n### line.showControlPoints([offset], [fontSize])\nShow control points for this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of control points y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Control points font size |\n\n<a name=\"Line+showCoordinates\"></a>\n\n### line.showCoordinates([offset], [fontSize])\nShows coordinates of this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [offset] | <code>number</code> | <code>10</code> | Offset of coordinates y origin |\n| [fontSize] | <code>number</code> | <code>16</code> | Coordinates font size |\n\n<a name=\"Line+draw\"></a>\n\n### line.draw(canvas)\nDraw this object\n\n**Kind**: instance method of [<code>Line</code>](#Line)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| canvas | <code>string</code> | Canvas Id |\n\n"
}